// Code generated by SQLBoiler 4.18.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testReviews(t *testing.T) {
	t.Parallel()

	query := Reviews()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testReviewsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Review{}
	if err = randomize.Struct(seed, o, reviewDBTypes, true, reviewColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Review struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Reviews().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testReviewsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Review{}
	if err = randomize.Struct(seed, o, reviewDBTypes, true, reviewColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Review struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Reviews().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Reviews().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testReviewsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Review{}
	if err = randomize.Struct(seed, o, reviewDBTypes, true, reviewColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Review struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ReviewSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Reviews().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testReviewsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Review{}
	if err = randomize.Struct(seed, o, reviewDBTypes, true, reviewColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Review struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := ReviewExists(ctx, tx, o.ReviewID)
	if err != nil {
		t.Errorf("Unable to check if Review exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ReviewExists to return true, but got false.")
	}
}

func testReviewsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Review{}
	if err = randomize.Struct(seed, o, reviewDBTypes, true, reviewColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Review struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	reviewFound, err := FindReview(ctx, tx, o.ReviewID)
	if err != nil {
		t.Error(err)
	}

	if reviewFound == nil {
		t.Error("want a record, got nil")
	}
}

func testReviewsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Review{}
	if err = randomize.Struct(seed, o, reviewDBTypes, true, reviewColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Review struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Reviews().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testReviewsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Review{}
	if err = randomize.Struct(seed, o, reviewDBTypes, true, reviewColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Review struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Reviews().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testReviewsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	reviewOne := &Review{}
	reviewTwo := &Review{}
	if err = randomize.Struct(seed, reviewOne, reviewDBTypes, false, reviewColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Review struct: %s", err)
	}
	if err = randomize.Struct(seed, reviewTwo, reviewDBTypes, false, reviewColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Review struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = reviewOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = reviewTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Reviews().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testReviewsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	reviewOne := &Review{}
	reviewTwo := &Review{}
	if err = randomize.Struct(seed, reviewOne, reviewDBTypes, false, reviewColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Review struct: %s", err)
	}
	if err = randomize.Struct(seed, reviewTwo, reviewDBTypes, false, reviewColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Review struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = reviewOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = reviewTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Reviews().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func reviewBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Review) error {
	*o = Review{}
	return nil
}

func reviewAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Review) error {
	*o = Review{}
	return nil
}

func reviewAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Review) error {
	*o = Review{}
	return nil
}

func reviewBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Review) error {
	*o = Review{}
	return nil
}

func reviewAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Review) error {
	*o = Review{}
	return nil
}

func reviewBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Review) error {
	*o = Review{}
	return nil
}

func reviewAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Review) error {
	*o = Review{}
	return nil
}

func reviewBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Review) error {
	*o = Review{}
	return nil
}

func reviewAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Review) error {
	*o = Review{}
	return nil
}

func testReviewsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Review{}
	o := &Review{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, reviewDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Review object: %s", err)
	}

	AddReviewHook(boil.BeforeInsertHook, reviewBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	reviewBeforeInsertHooks = []ReviewHook{}

	AddReviewHook(boil.AfterInsertHook, reviewAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	reviewAfterInsertHooks = []ReviewHook{}

	AddReviewHook(boil.AfterSelectHook, reviewAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	reviewAfterSelectHooks = []ReviewHook{}

	AddReviewHook(boil.BeforeUpdateHook, reviewBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	reviewBeforeUpdateHooks = []ReviewHook{}

	AddReviewHook(boil.AfterUpdateHook, reviewAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	reviewAfterUpdateHooks = []ReviewHook{}

	AddReviewHook(boil.BeforeDeleteHook, reviewBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	reviewBeforeDeleteHooks = []ReviewHook{}

	AddReviewHook(boil.AfterDeleteHook, reviewAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	reviewAfterDeleteHooks = []ReviewHook{}

	AddReviewHook(boil.BeforeUpsertHook, reviewBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	reviewBeforeUpsertHooks = []ReviewHook{}

	AddReviewHook(boil.AfterUpsertHook, reviewAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	reviewAfterUpsertHooks = []ReviewHook{}
}

func testReviewsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Review{}
	if err = randomize.Struct(seed, o, reviewDBTypes, true, reviewColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Review struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Reviews().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testReviewsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Review{}
	if err = randomize.Struct(seed, o, reviewDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Review struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(reviewColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Reviews().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testReviewToManyReviewIDReplies(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Review
	var b, c Reply

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, reviewDBTypes, true, reviewColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Review struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, replyDBTypes, false, replyColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, replyDBTypes, false, replyColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.ReviewID = a.ReviewID
	c.ReviewID = a.ReviewID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.ReviewIDReplies().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.ReviewID == b.ReviewID {
			bFound = true
		}
		if v.ReviewID == c.ReviewID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := ReviewSlice{&a}
	if err = a.L.LoadReviewIDReplies(ctx, tx, false, (*[]*Review)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ReviewIDReplies); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.ReviewIDReplies = nil
	if err = a.L.LoadReviewIDReplies(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ReviewIDReplies); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testReviewToManyReviewIDReviewImages(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Review
	var b, c ReviewImage

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, reviewDBTypes, true, reviewColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Review struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, reviewImageDBTypes, false, reviewImageColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, reviewImageDBTypes, false, reviewImageColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.ReviewID = a.ReviewID
	c.ReviewID = a.ReviewID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.ReviewIDReviewImages().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.ReviewID == b.ReviewID {
			bFound = true
		}
		if v.ReviewID == c.ReviewID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := ReviewSlice{&a}
	if err = a.L.LoadReviewIDReviewImages(ctx, tx, false, (*[]*Review)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ReviewIDReviewImages); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.ReviewIDReviewImages = nil
	if err = a.L.LoadReviewIDReviewImages(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ReviewIDReviewImages); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testReviewToManyAddOpReviewIDReplies(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Review
	var b, c, d, e Reply

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, reviewDBTypes, false, strmangle.SetComplement(reviewPrimaryKeyColumns, reviewColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Reply{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, replyDBTypes, false, strmangle.SetComplement(replyPrimaryKeyColumns, replyColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Reply{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddReviewIDReplies(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ReviewID != first.ReviewID {
			t.Error("foreign key was wrong value", a.ReviewID, first.ReviewID)
		}
		if a.ReviewID != second.ReviewID {
			t.Error("foreign key was wrong value", a.ReviewID, second.ReviewID)
		}

		if first.R.ReviewIDReview != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.ReviewIDReview != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.ReviewIDReplies[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.ReviewIDReplies[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.ReviewIDReplies().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testReviewToManyAddOpReviewIDReviewImages(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Review
	var b, c, d, e ReviewImage

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, reviewDBTypes, false, strmangle.SetComplement(reviewPrimaryKeyColumns, reviewColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ReviewImage{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, reviewImageDBTypes, false, strmangle.SetComplement(reviewImagePrimaryKeyColumns, reviewImageColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*ReviewImage{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddReviewIDReviewImages(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ReviewID != first.ReviewID {
			t.Error("foreign key was wrong value", a.ReviewID, first.ReviewID)
		}
		if a.ReviewID != second.ReviewID {
			t.Error("foreign key was wrong value", a.ReviewID, second.ReviewID)
		}

		if first.R.ReviewIDReview != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.ReviewIDReview != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.ReviewIDReviewImages[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.ReviewIDReviewImages[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.ReviewIDReviewImages().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testReviewToOneAccountUsingAccountIDAccount(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Review
	var foreign Account

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, reviewDBTypes, false, reviewColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Review struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, accountDBTypes, false, accountColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Account struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.AccountID = foreign.AccountID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.AccountIDAccount().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.AccountID != foreign.AccountID {
		t.Errorf("want: %v, got %v", foreign.AccountID, check.AccountID)
	}

	ranAfterSelectHook := false
	AddAccountHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Account) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := ReviewSlice{&local}
	if err = local.L.LoadAccountIDAccount(ctx, tx, false, (*[]*Review)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.AccountIDAccount == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.AccountIDAccount = nil
	if err = local.L.LoadAccountIDAccount(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.AccountIDAccount == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testReviewToOneInvoiceUsingInvoiceIDInvoice(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Review
	var foreign Invoice

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, reviewDBTypes, false, reviewColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Review struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, invoiceDBTypes, false, invoiceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Invoice struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.InvoiceID = foreign.InvoiceID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.InvoiceIDInvoice().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.InvoiceID != foreign.InvoiceID {
		t.Errorf("want: %v, got %v", foreign.InvoiceID, check.InvoiceID)
	}

	ranAfterSelectHook := false
	AddInvoiceHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Invoice) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := ReviewSlice{&local}
	if err = local.L.LoadInvoiceIDInvoice(ctx, tx, false, (*[]*Review)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.InvoiceIDInvoice == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.InvoiceIDInvoice = nil
	if err = local.L.LoadInvoiceIDInvoice(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.InvoiceIDInvoice == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testReviewToOneProductUsingProductIDProduct(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Review
	var foreign Product

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, reviewDBTypes, false, reviewColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Review struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, productDBTypes, false, productColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Product struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.ProductID = foreign.ProductID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.ProductIDProduct().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ProductID != foreign.ProductID {
		t.Errorf("want: %v, got %v", foreign.ProductID, check.ProductID)
	}

	ranAfterSelectHook := false
	AddProductHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Product) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := ReviewSlice{&local}
	if err = local.L.LoadProductIDProduct(ctx, tx, false, (*[]*Review)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ProductIDProduct == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.ProductIDProduct = nil
	if err = local.L.LoadProductIDProduct(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ProductIDProduct == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testReviewToOneSetOpAccountUsingAccountIDAccount(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Review
	var b, c Account

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, reviewDBTypes, false, strmangle.SetComplement(reviewPrimaryKeyColumns, reviewColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, accountDBTypes, false, strmangle.SetComplement(accountPrimaryKeyColumns, accountColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, accountDBTypes, false, strmangle.SetComplement(accountPrimaryKeyColumns, accountColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Account{&b, &c} {
		err = a.SetAccountIDAccount(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.AccountIDAccount != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.AccountIDReviews[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.AccountID != x.AccountID {
			t.Error("foreign key was wrong value", a.AccountID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.AccountID))
		reflect.Indirect(reflect.ValueOf(&a.AccountID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.AccountID != x.AccountID {
			t.Error("foreign key was wrong value", a.AccountID, x.AccountID)
		}
	}
}
func testReviewToOneSetOpInvoiceUsingInvoiceIDInvoice(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Review
	var b, c Invoice

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, reviewDBTypes, false, strmangle.SetComplement(reviewPrimaryKeyColumns, reviewColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, invoiceDBTypes, false, strmangle.SetComplement(invoicePrimaryKeyColumns, invoiceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, invoiceDBTypes, false, strmangle.SetComplement(invoicePrimaryKeyColumns, invoiceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Invoice{&b, &c} {
		err = a.SetInvoiceIDInvoice(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.InvoiceIDInvoice != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.InvoiceIDReviews[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.InvoiceID != x.InvoiceID {
			t.Error("foreign key was wrong value", a.InvoiceID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.InvoiceID))
		reflect.Indirect(reflect.ValueOf(&a.InvoiceID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.InvoiceID != x.InvoiceID {
			t.Error("foreign key was wrong value", a.InvoiceID, x.InvoiceID)
		}
	}
}
func testReviewToOneSetOpProductUsingProductIDProduct(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Review
	var b, c Product

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, reviewDBTypes, false, strmangle.SetComplement(reviewPrimaryKeyColumns, reviewColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, productDBTypes, false, strmangle.SetComplement(productPrimaryKeyColumns, productColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, productDBTypes, false, strmangle.SetComplement(productPrimaryKeyColumns, productColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Product{&b, &c} {
		err = a.SetProductIDProduct(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.ProductIDProduct != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ProductIDReviews[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.ProductID != x.ProductID {
			t.Error("foreign key was wrong value", a.ProductID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ProductID))
		reflect.Indirect(reflect.ValueOf(&a.ProductID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.ProductID != x.ProductID {
			t.Error("foreign key was wrong value", a.ProductID, x.ProductID)
		}
	}
}

func testReviewsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Review{}
	if err = randomize.Struct(seed, o, reviewDBTypes, true, reviewColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Review struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testReviewsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Review{}
	if err = randomize.Struct(seed, o, reviewDBTypes, true, reviewColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Review struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ReviewSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testReviewsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Review{}
	if err = randomize.Struct(seed, o, reviewDBTypes, true, reviewColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Review struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Reviews().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	reviewDBTypes = map[string]string{`ReviewID`: `integer`, `ReviewDate`: `timestamp without time zone`, `Stars`: `integer`, `Comment`: `character varying`, `Status`: `boolean`, `ProductID`: `integer`, `AccountID`: `integer`, `InvoiceID`: `integer`}
	_             = bytes.MinRead
)

func testReviewsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(reviewPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(reviewAllColumns) == len(reviewPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Review{}
	if err = randomize.Struct(seed, o, reviewDBTypes, true, reviewColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Review struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Reviews().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, reviewDBTypes, true, reviewPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Review struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testReviewsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(reviewAllColumns) == len(reviewPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Review{}
	if err = randomize.Struct(seed, o, reviewDBTypes, true, reviewColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Review struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Reviews().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, reviewDBTypes, true, reviewPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Review struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(reviewAllColumns, reviewPrimaryKeyColumns) {
		fields = reviewAllColumns
	} else {
		fields = strmangle.SetComplement(
			reviewAllColumns,
			reviewPrimaryKeyColumns,
		)
		fields = strmangle.SetComplement(fields, reviewGeneratedColumns)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := ReviewSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testReviewsUpsert(t *testing.T) {
	t.Parallel()

	if len(reviewAllColumns) == len(reviewPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Review{}
	if err = randomize.Struct(seed, &o, reviewDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Review struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Review: %s", err)
	}

	count, err := Reviews().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, reviewDBTypes, false, reviewPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Review struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Review: %s", err)
	}

	count, err = Reviews().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
