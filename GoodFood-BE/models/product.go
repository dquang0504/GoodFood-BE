// Code generated by SQLBoiler 4.18.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Product is an object representing the database table.
type Product struct {
	ProductID     int         `boil:"productID" json:"productID" toml:"productID" yaml:"productID"`
	ProductName   string      `boil:"productName" json:"productName" toml:"productName" yaml:"productName"`
	Price         float32     `boil:"price" json:"price" toml:"price" yaml:"price"`
	CoverImage    string      `boil:"coverImage" json:"coverImage" toml:"coverImage" yaml:"coverImage"`
	Description   null.String `boil:"description" json:"description,omitempty" toml:"description" yaml:"description,omitempty"`
	Status        bool        `boil:"status" json:"status" toml:"status" yaml:"status"`
	InsertDate    time.Time   `boil:"insertDate" json:"insertDate" toml:"insertDate" yaml:"insertDate"`
	ProductTypeID int         `boil:"productTypeID" json:"productTypeID" toml:"productTypeID" yaml:"productTypeID"`
	Weight        float32     `boil:"weight" json:"weight" toml:"weight" yaml:"weight"`

	R *productR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L productL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ProductColumns = struct {
	ProductID     string
	ProductName   string
	Price         string
	CoverImage    string
	Description   string
	Status        string
	InsertDate    string
	ProductTypeID string
	Weight        string
}{
	ProductID:     "productID",
	ProductName:   "productName",
	Price:         "price",
	CoverImage:    "coverImage",
	Description:   "description",
	Status:        "status",
	InsertDate:    "insertDate",
	ProductTypeID: "productTypeID",
	Weight:        "weight",
}

var ProductTableColumns = struct {
	ProductID     string
	ProductName   string
	Price         string
	CoverImage    string
	Description   string
	Status        string
	InsertDate    string
	ProductTypeID string
	Weight        string
}{
	ProductID:     "product.productID",
	ProductName:   "product.productName",
	Price:         "product.price",
	CoverImage:    "product.coverImage",
	Description:   "product.description",
	Status:        "product.status",
	InsertDate:    "product.insertDate",
	ProductTypeID: "product.productTypeID",
	Weight:        "product.weight",
}

// Generated where

var ProductWhere = struct {
	ProductID     whereHelperint
	ProductName   whereHelperstring
	Price         whereHelperfloat32
	CoverImage    whereHelperstring
	Description   whereHelpernull_String
	Status        whereHelperbool
	InsertDate    whereHelpertime_Time
	ProductTypeID whereHelperint
	Weight        whereHelperfloat32
}{
	ProductID:     whereHelperint{field: "\"product\".\"productID\""},
	ProductName:   whereHelperstring{field: "\"product\".\"productName\""},
	Price:         whereHelperfloat32{field: "\"product\".\"price\""},
	CoverImage:    whereHelperstring{field: "\"product\".\"coverImage\""},
	Description:   whereHelpernull_String{field: "\"product\".\"description\""},
	Status:        whereHelperbool{field: "\"product\".\"status\""},
	InsertDate:    whereHelpertime_Time{field: "\"product\".\"insertDate\""},
	ProductTypeID: whereHelperint{field: "\"product\".\"productTypeID\""},
	Weight:        whereHelperfloat32{field: "\"product\".\"weight\""},
}

// ProductRels is where relationship names are stored.
var ProductRels = struct {
	ProductTypeIDProductType string
	ProductIDCartDetails     string
	ProductIDInvoiceDetails  string
	ProductIDProductImages   string
	ProductIDReviews         string
}{
	ProductTypeIDProductType: "ProductTypeIDProductType",
	ProductIDCartDetails:     "ProductIDCartDetails",
	ProductIDInvoiceDetails:  "ProductIDInvoiceDetails",
	ProductIDProductImages:   "ProductIDProductImages",
	ProductIDReviews:         "ProductIDReviews",
}

// productR is where relationships are stored.
type productR struct {
	ProductTypeIDProductType *ProductType       `boil:"ProductTypeIDProductType" json:"ProductTypeIDProductType" toml:"ProductTypeIDProductType" yaml:"ProductTypeIDProductType"`
	ProductIDCartDetails     CartDetailSlice    `boil:"ProductIDCartDetails" json:"ProductIDCartDetails" toml:"ProductIDCartDetails" yaml:"ProductIDCartDetails"`
	ProductIDInvoiceDetails  InvoiceDetailSlice `boil:"ProductIDInvoiceDetails" json:"ProductIDInvoiceDetails" toml:"ProductIDInvoiceDetails" yaml:"ProductIDInvoiceDetails"`
	ProductIDProductImages   ProductImageSlice  `boil:"ProductIDProductImages" json:"ProductIDProductImages" toml:"ProductIDProductImages" yaml:"ProductIDProductImages"`
	ProductIDReviews         ReviewSlice        `boil:"ProductIDReviews" json:"ProductIDReviews" toml:"ProductIDReviews" yaml:"ProductIDReviews"`
}

// NewStruct creates a new relationship struct
func (*productR) NewStruct() *productR {
	return &productR{}
}

func (r *productR) GetProductTypeIDProductType() *ProductType {
	if r == nil {
		return nil
	}
	return r.ProductTypeIDProductType
}

func (r *productR) GetProductIDCartDetails() CartDetailSlice {
	if r == nil {
		return nil
	}
	return r.ProductIDCartDetails
}

func (r *productR) GetProductIDInvoiceDetails() InvoiceDetailSlice {
	if r == nil {
		return nil
	}
	return r.ProductIDInvoiceDetails
}

func (r *productR) GetProductIDProductImages() ProductImageSlice {
	if r == nil {
		return nil
	}
	return r.ProductIDProductImages
}

func (r *productR) GetProductIDReviews() ReviewSlice {
	if r == nil {
		return nil
	}
	return r.ProductIDReviews
}

// productL is where Load methods for each relationship are stored.
type productL struct{}

var (
	productAllColumns            = []string{"productID", "productName", "price", "coverImage", "description", "status", "insertDate", "productTypeID", "weight"}
	productColumnsWithoutDefault = []string{"productName", "price", "coverImage", "status", "insertDate", "productTypeID", "weight"}
	productColumnsWithDefault    = []string{"productID", "description"}
	productPrimaryKeyColumns     = []string{"productID"}
	productGeneratedColumns      = []string{"productID"}
)

type (
	// ProductSlice is an alias for a slice of pointers to Product.
	// This should almost always be used instead of []Product.
	ProductSlice []*Product
	// ProductHook is the signature for custom Product hook methods
	ProductHook func(context.Context, boil.ContextExecutor, *Product) error

	productQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	productType                 = reflect.TypeOf(&Product{})
	productMapping              = queries.MakeStructMapping(productType)
	productPrimaryKeyMapping, _ = queries.BindMapping(productType, productMapping, productPrimaryKeyColumns)
	productInsertCacheMut       sync.RWMutex
	productInsertCache          = make(map[string]insertCache)
	productUpdateCacheMut       sync.RWMutex
	productUpdateCache          = make(map[string]updateCache)
	productUpsertCacheMut       sync.RWMutex
	productUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var productAfterSelectMu sync.Mutex
var productAfterSelectHooks []ProductHook

var productBeforeInsertMu sync.Mutex
var productBeforeInsertHooks []ProductHook
var productAfterInsertMu sync.Mutex
var productAfterInsertHooks []ProductHook

var productBeforeUpdateMu sync.Mutex
var productBeforeUpdateHooks []ProductHook
var productAfterUpdateMu sync.Mutex
var productAfterUpdateHooks []ProductHook

var productBeforeDeleteMu sync.Mutex
var productBeforeDeleteHooks []ProductHook
var productAfterDeleteMu sync.Mutex
var productAfterDeleteHooks []ProductHook

var productBeforeUpsertMu sync.Mutex
var productBeforeUpsertHooks []ProductHook
var productAfterUpsertMu sync.Mutex
var productAfterUpsertHooks []ProductHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Product) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Product) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Product) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Product) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Product) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Product) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Product) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Product) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Product) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddProductHook registers your hook function for all future operations.
func AddProductHook(hookPoint boil.HookPoint, productHook ProductHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		productAfterSelectMu.Lock()
		productAfterSelectHooks = append(productAfterSelectHooks, productHook)
		productAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		productBeforeInsertMu.Lock()
		productBeforeInsertHooks = append(productBeforeInsertHooks, productHook)
		productBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		productAfterInsertMu.Lock()
		productAfterInsertHooks = append(productAfterInsertHooks, productHook)
		productAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		productBeforeUpdateMu.Lock()
		productBeforeUpdateHooks = append(productBeforeUpdateHooks, productHook)
		productBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		productAfterUpdateMu.Lock()
		productAfterUpdateHooks = append(productAfterUpdateHooks, productHook)
		productAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		productBeforeDeleteMu.Lock()
		productBeforeDeleteHooks = append(productBeforeDeleteHooks, productHook)
		productBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		productAfterDeleteMu.Lock()
		productAfterDeleteHooks = append(productAfterDeleteHooks, productHook)
		productAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		productBeforeUpsertMu.Lock()
		productBeforeUpsertHooks = append(productBeforeUpsertHooks, productHook)
		productBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		productAfterUpsertMu.Lock()
		productAfterUpsertHooks = append(productAfterUpsertHooks, productHook)
		productAfterUpsertMu.Unlock()
	}
}

// One returns a single product record from the query.
func (q productQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Product, error) {
	o := &Product{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for product")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Product records from the query.
func (q productQuery) All(ctx context.Context, exec boil.ContextExecutor) (ProductSlice, error) {
	var o []*Product

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Product slice")
	}

	if len(productAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Product records in the query.
func (q productQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count product rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q productQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if product exists")
	}

	return count > 0, nil
}

// ProductTypeIDProductType pointed to by the foreign key.
func (o *Product) ProductTypeIDProductType(mods ...qm.QueryMod) productTypeQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"productTypeID\" = ?", o.ProductTypeID),
	}

	queryMods = append(queryMods, mods...)

	return ProductTypes(queryMods...)
}

// ProductIDCartDetails retrieves all the cart_detail's CartDetails with an executor via productID column.
func (o *Product) ProductIDCartDetails(mods ...qm.QueryMod) cartDetailQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"cart_detail\".\"productID\"=?", o.ProductID),
	)

	return CartDetails(queryMods...)
}

// ProductIDInvoiceDetails retrieves all the invoice_detail's InvoiceDetails with an executor via productID column.
func (o *Product) ProductIDInvoiceDetails(mods ...qm.QueryMod) invoiceDetailQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"invoice_detail\".\"productID\"=?", o.ProductID),
	)

	return InvoiceDetails(queryMods...)
}

// ProductIDProductImages retrieves all the product_image's ProductImages with an executor via productID column.
func (o *Product) ProductIDProductImages(mods ...qm.QueryMod) productImageQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"product_images\".\"productID\"=?", o.ProductID),
	)

	return ProductImages(queryMods...)
}

// ProductIDReviews retrieves all the review's Reviews with an executor via productID column.
func (o *Product) ProductIDReviews(mods ...qm.QueryMod) reviewQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"review\".\"productID\"=?", o.ProductID),
	)

	return Reviews(queryMods...)
}

// LoadProductTypeIDProductType allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (productL) LoadProductTypeIDProductType(ctx context.Context, e boil.ContextExecutor, singular bool, maybeProduct interface{}, mods queries.Applicator) error {
	var slice []*Product
	var object *Product

	if singular {
		var ok bool
		object, ok = maybeProduct.(*Product)
		if !ok {
			object = new(Product)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeProduct)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeProduct))
			}
		}
	} else {
		s, ok := maybeProduct.(*[]*Product)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeProduct)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeProduct))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &productR{}
		}
		args[object.ProductTypeID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &productR{}
			}

			args[obj.ProductTypeID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`product_type`),
		qm.WhereIn(`product_type.productTypeID in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ProductType")
	}

	var resultSlice []*ProductType
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ProductType")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for product_type")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for product_type")
	}

	if len(productTypeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ProductTypeIDProductType = foreign
		if foreign.R == nil {
			foreign.R = &productTypeR{}
		}
		foreign.R.ProductTypeIDProducts = append(foreign.R.ProductTypeIDProducts, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ProductTypeID == foreign.ProductTypeID {
				local.R.ProductTypeIDProductType = foreign
				if foreign.R == nil {
					foreign.R = &productTypeR{}
				}
				foreign.R.ProductTypeIDProducts = append(foreign.R.ProductTypeIDProducts, local)
				break
			}
		}
	}

	return nil
}

// LoadProductIDCartDetails allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (productL) LoadProductIDCartDetails(ctx context.Context, e boil.ContextExecutor, singular bool, maybeProduct interface{}, mods queries.Applicator) error {
	var slice []*Product
	var object *Product

	if singular {
		var ok bool
		object, ok = maybeProduct.(*Product)
		if !ok {
			object = new(Product)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeProduct)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeProduct))
			}
		}
	} else {
		s, ok := maybeProduct.(*[]*Product)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeProduct)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeProduct))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &productR{}
		}
		args[object.ProductID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &productR{}
			}
			args[obj.ProductID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`cart_detail`),
		qm.WhereIn(`cart_detail.productID in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load cart_detail")
	}

	var resultSlice []*CartDetail
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice cart_detail")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on cart_detail")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for cart_detail")
	}

	if len(cartDetailAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ProductIDCartDetails = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &cartDetailR{}
			}
			foreign.R.ProductIDProduct = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ProductID == foreign.ProductID {
				local.R.ProductIDCartDetails = append(local.R.ProductIDCartDetails, foreign)
				if foreign.R == nil {
					foreign.R = &cartDetailR{}
				}
				foreign.R.ProductIDProduct = local
				break
			}
		}
	}

	return nil
}

// LoadProductIDInvoiceDetails allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (productL) LoadProductIDInvoiceDetails(ctx context.Context, e boil.ContextExecutor, singular bool, maybeProduct interface{}, mods queries.Applicator) error {
	var slice []*Product
	var object *Product

	if singular {
		var ok bool
		object, ok = maybeProduct.(*Product)
		if !ok {
			object = new(Product)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeProduct)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeProduct))
			}
		}
	} else {
		s, ok := maybeProduct.(*[]*Product)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeProduct)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeProduct))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &productR{}
		}
		args[object.ProductID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &productR{}
			}
			args[obj.ProductID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`invoice_detail`),
		qm.WhereIn(`invoice_detail.productID in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load invoice_detail")
	}

	var resultSlice []*InvoiceDetail
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice invoice_detail")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on invoice_detail")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for invoice_detail")
	}

	if len(invoiceDetailAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ProductIDInvoiceDetails = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &invoiceDetailR{}
			}
			foreign.R.ProductIDProduct = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ProductID == foreign.ProductID {
				local.R.ProductIDInvoiceDetails = append(local.R.ProductIDInvoiceDetails, foreign)
				if foreign.R == nil {
					foreign.R = &invoiceDetailR{}
				}
				foreign.R.ProductIDProduct = local
				break
			}
		}
	}

	return nil
}

// LoadProductIDProductImages allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (productL) LoadProductIDProductImages(ctx context.Context, e boil.ContextExecutor, singular bool, maybeProduct interface{}, mods queries.Applicator) error {
	var slice []*Product
	var object *Product

	if singular {
		var ok bool
		object, ok = maybeProduct.(*Product)
		if !ok {
			object = new(Product)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeProduct)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeProduct))
			}
		}
	} else {
		s, ok := maybeProduct.(*[]*Product)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeProduct)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeProduct))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &productR{}
		}
		args[object.ProductID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &productR{}
			}
			args[obj.ProductID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`product_images`),
		qm.WhereIn(`product_images.productID in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load product_images")
	}

	var resultSlice []*ProductImage
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice product_images")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on product_images")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for product_images")
	}

	if len(productImageAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ProductIDProductImages = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &productImageR{}
			}
			foreign.R.ProductIDProduct = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ProductID == foreign.ProductID {
				local.R.ProductIDProductImages = append(local.R.ProductIDProductImages, foreign)
				if foreign.R == nil {
					foreign.R = &productImageR{}
				}
				foreign.R.ProductIDProduct = local
				break
			}
		}
	}

	return nil
}

// LoadProductIDReviews allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (productL) LoadProductIDReviews(ctx context.Context, e boil.ContextExecutor, singular bool, maybeProduct interface{}, mods queries.Applicator) error {
	var slice []*Product
	var object *Product

	if singular {
		var ok bool
		object, ok = maybeProduct.(*Product)
		if !ok {
			object = new(Product)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeProduct)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeProduct))
			}
		}
	} else {
		s, ok := maybeProduct.(*[]*Product)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeProduct)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeProduct))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &productR{}
		}
		args[object.ProductID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &productR{}
			}
			args[obj.ProductID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`review`),
		qm.WhereIn(`review.productID in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load review")
	}

	var resultSlice []*Review
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice review")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on review")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for review")
	}

	if len(reviewAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ProductIDReviews = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &reviewR{}
			}
			foreign.R.ProductIDProduct = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ProductID == foreign.ProductID {
				local.R.ProductIDReviews = append(local.R.ProductIDReviews, foreign)
				if foreign.R == nil {
					foreign.R = &reviewR{}
				}
				foreign.R.ProductIDProduct = local
				break
			}
		}
	}

	return nil
}

// SetProductTypeIDProductType of the product to the related item.
// Sets o.R.ProductTypeIDProductType to related.
// Adds o to related.R.ProductTypeIDProducts.
func (o *Product) SetProductTypeIDProductType(ctx context.Context, exec boil.ContextExecutor, insert bool, related *ProductType) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"product\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"productTypeID"}),
		strmangle.WhereClause("\"", "\"", 2, productPrimaryKeyColumns),
	)
	values := []interface{}{related.ProductTypeID, o.ProductID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ProductTypeID = related.ProductTypeID
	if o.R == nil {
		o.R = &productR{
			ProductTypeIDProductType: related,
		}
	} else {
		o.R.ProductTypeIDProductType = related
	}

	if related.R == nil {
		related.R = &productTypeR{
			ProductTypeIDProducts: ProductSlice{o},
		}
	} else {
		related.R.ProductTypeIDProducts = append(related.R.ProductTypeIDProducts, o)
	}

	return nil
}

// AddProductIDCartDetails adds the given related objects to the existing relationships
// of the product, optionally inserting them as new records.
// Appends related to o.R.ProductIDCartDetails.
// Sets related.R.ProductIDProduct appropriately.
func (o *Product) AddProductIDCartDetails(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*CartDetail) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ProductID = o.ProductID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"cart_detail\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"productID"}),
				strmangle.WhereClause("\"", "\"", 2, cartDetailPrimaryKeyColumns),
			)
			values := []interface{}{o.ProductID, rel.CartID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ProductID = o.ProductID
		}
	}

	if o.R == nil {
		o.R = &productR{
			ProductIDCartDetails: related,
		}
	} else {
		o.R.ProductIDCartDetails = append(o.R.ProductIDCartDetails, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &cartDetailR{
				ProductIDProduct: o,
			}
		} else {
			rel.R.ProductIDProduct = o
		}
	}
	return nil
}

// AddProductIDInvoiceDetails adds the given related objects to the existing relationships
// of the product, optionally inserting them as new records.
// Appends related to o.R.ProductIDInvoiceDetails.
// Sets related.R.ProductIDProduct appropriately.
func (o *Product) AddProductIDInvoiceDetails(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*InvoiceDetail) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ProductID = o.ProductID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"invoice_detail\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"productID"}),
				strmangle.WhereClause("\"", "\"", 2, invoiceDetailPrimaryKeyColumns),
			)
			values := []interface{}{o.ProductID, rel.InvoiceDetailID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ProductID = o.ProductID
		}
	}

	if o.R == nil {
		o.R = &productR{
			ProductIDInvoiceDetails: related,
		}
	} else {
		o.R.ProductIDInvoiceDetails = append(o.R.ProductIDInvoiceDetails, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &invoiceDetailR{
				ProductIDProduct: o,
			}
		} else {
			rel.R.ProductIDProduct = o
		}
	}
	return nil
}

// AddProductIDProductImages adds the given related objects to the existing relationships
// of the product, optionally inserting them as new records.
// Appends related to o.R.ProductIDProductImages.
// Sets related.R.ProductIDProduct appropriately.
func (o *Product) AddProductIDProductImages(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ProductImage) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ProductID = o.ProductID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"product_images\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"productID"}),
				strmangle.WhereClause("\"", "\"", 2, productImagePrimaryKeyColumns),
			)
			values := []interface{}{o.ProductID, rel.ProductImageID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ProductID = o.ProductID
		}
	}

	if o.R == nil {
		o.R = &productR{
			ProductIDProductImages: related,
		}
	} else {
		o.R.ProductIDProductImages = append(o.R.ProductIDProductImages, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &productImageR{
				ProductIDProduct: o,
			}
		} else {
			rel.R.ProductIDProduct = o
		}
	}
	return nil
}

// AddProductIDReviews adds the given related objects to the existing relationships
// of the product, optionally inserting them as new records.
// Appends related to o.R.ProductIDReviews.
// Sets related.R.ProductIDProduct appropriately.
func (o *Product) AddProductIDReviews(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Review) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ProductID = o.ProductID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"review\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"productID"}),
				strmangle.WhereClause("\"", "\"", 2, reviewPrimaryKeyColumns),
			)
			values := []interface{}{o.ProductID, rel.ReviewID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ProductID = o.ProductID
		}
	}

	if o.R == nil {
		o.R = &productR{
			ProductIDReviews: related,
		}
	} else {
		o.R.ProductIDReviews = append(o.R.ProductIDReviews, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &reviewR{
				ProductIDProduct: o,
			}
		} else {
			rel.R.ProductIDProduct = o
		}
	}
	return nil
}

// Products retrieves all the records using an executor.
func Products(mods ...qm.QueryMod) productQuery {
	mods = append(mods, qm.From("\"product\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"product\".*"})
	}

	return productQuery{q}
}

// FindProduct retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindProduct(ctx context.Context, exec boil.ContextExecutor, productID int, selectCols ...string) (*Product, error) {
	productObj := &Product{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"product\" where \"productID\"=$1", sel,
	)

	q := queries.Raw(query, productID)

	err := q.Bind(ctx, exec, productObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from product")
	}

	if err = productObj.doAfterSelectHooks(ctx, exec); err != nil {
		return productObj, err
	}

	return productObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Product) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no product provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(productColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	productInsertCacheMut.RLock()
	cache, cached := productInsertCache[key]
	productInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			productAllColumns,
			productColumnsWithDefault,
			productColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, productGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(productType, productMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(productType, productMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"product\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"product\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into product")
	}

	if !cached {
		productInsertCacheMut.Lock()
		productInsertCache[key] = cache
		productInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Product.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Product) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	productUpdateCacheMut.RLock()
	cache, cached := productUpdateCache[key]
	productUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			productAllColumns,
			productPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, productGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update product, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"product\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, productPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(productType, productMapping, append(wl, productPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update product row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for product")
	}

	if !cached {
		productUpdateCacheMut.Lock()
		productUpdateCache[key] = cache
		productUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q productQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for product")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for product")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ProductSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), productPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"product\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, productPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in product slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all product")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Product) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no product provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(productColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	productUpsertCacheMut.RLock()
	cache, cached := productUpsertCache[key]
	productUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			productAllColumns,
			productColumnsWithDefault,
			productColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			productAllColumns,
			productPrimaryKeyColumns,
		)

		insert = strmangle.SetComplement(insert, productGeneratedColumns)
		update = strmangle.SetComplement(update, productGeneratedColumns)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert product, could not build update column list")
		}

		ret := strmangle.SetComplement(productAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(productPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert product, could not build conflict column list")
			}

			conflict = make([]string, len(productPrimaryKeyColumns))
			copy(conflict, productPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"product\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(productType, productMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(productType, productMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert product")
	}

	if !cached {
		productUpsertCacheMut.Lock()
		productUpsertCache[key] = cache
		productUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Product record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Product) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Product provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), productPrimaryKeyMapping)
	sql := "DELETE FROM \"product\" WHERE \"productID\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from product")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for product")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q productQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no productQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from product")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for product")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ProductSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(productBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), productPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"product\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, productPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from product slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for product")
	}

	if len(productAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Product) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindProduct(ctx, exec, o.ProductID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ProductSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ProductSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), productPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"product\".* FROM \"product\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, productPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ProductSlice")
	}

	*o = slice

	return nil
}

// ProductExists checks if the Product row exists.
func ProductExists(ctx context.Context, exec boil.ContextExecutor, productID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"product\" where \"productID\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, productID)
	}
	row := exec.QueryRowContext(ctx, sql, productID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if product exists")
	}

	return exists, nil
}

// Exists checks if the Product row exists.
func (o *Product) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ProductExists(ctx, exec, o.ProductID)
}
