// Code generated by SQLBoiler 4.18.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// InvoiceStatus is an object representing the database table.
type InvoiceStatus struct {
	InvoiceStatusID int    `boil:"invoiceStatusID" json:"invoiceStatusID" toml:"invoiceStatusID" yaml:"invoiceStatusID"`
	StatusName      string `boil:"statusName" json:"statusName" toml:"statusName" yaml:"statusName"`

	R *invoiceStatusR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L invoiceStatusL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var InvoiceStatusColumns = struct {
	InvoiceStatusID string
	StatusName      string
}{
	InvoiceStatusID: "invoiceStatusID",
	StatusName:      "statusName",
}

var InvoiceStatusTableColumns = struct {
	InvoiceStatusID string
	StatusName      string
}{
	InvoiceStatusID: "invoice_status.invoiceStatusID",
	StatusName:      "invoice_status.statusName",
}

// Generated where

var InvoiceStatusWhere = struct {
	InvoiceStatusID whereHelperint
	StatusName      whereHelperstring
}{
	InvoiceStatusID: whereHelperint{field: "\"invoice_status\".\"invoiceStatusID\""},
	StatusName:      whereHelperstring{field: "\"invoice_status\".\"statusName\""},
}

// InvoiceStatusRels is where relationship names are stored.
var InvoiceStatusRels = struct {
	InvoiceStatusIDInvoices string
}{
	InvoiceStatusIDInvoices: "InvoiceStatusIDInvoices",
}

// invoiceStatusR is where relationships are stored.
type invoiceStatusR struct {
	InvoiceStatusIDInvoices InvoiceSlice `boil:"InvoiceStatusIDInvoices" json:"InvoiceStatusIDInvoices" toml:"InvoiceStatusIDInvoices" yaml:"InvoiceStatusIDInvoices"`
}

// NewStruct creates a new relationship struct
func (*invoiceStatusR) NewStruct() *invoiceStatusR {
	return &invoiceStatusR{}
}

func (r *invoiceStatusR) GetInvoiceStatusIDInvoices() InvoiceSlice {
	if r == nil {
		return nil
	}
	return r.InvoiceStatusIDInvoices
}

// invoiceStatusL is where Load methods for each relationship are stored.
type invoiceStatusL struct{}

var (
	invoiceStatusAllColumns            = []string{"invoiceStatusID", "statusName"}
	invoiceStatusColumnsWithoutDefault = []string{"statusName"}
	invoiceStatusColumnsWithDefault    = []string{"invoiceStatusID"}
	invoiceStatusPrimaryKeyColumns     = []string{"invoiceStatusID"}
	invoiceStatusGeneratedColumns      = []string{"invoiceStatusID"}
)

type (
	// InvoiceStatusSlice is an alias for a slice of pointers to InvoiceStatus.
	// This should almost always be used instead of []InvoiceStatus.
	InvoiceStatusSlice []*InvoiceStatus
	// InvoiceStatusHook is the signature for custom InvoiceStatus hook methods
	InvoiceStatusHook func(context.Context, boil.ContextExecutor, *InvoiceStatus) error

	invoiceStatusQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	invoiceStatusType                 = reflect.TypeOf(&InvoiceStatus{})
	invoiceStatusMapping              = queries.MakeStructMapping(invoiceStatusType)
	invoiceStatusPrimaryKeyMapping, _ = queries.BindMapping(invoiceStatusType, invoiceStatusMapping, invoiceStatusPrimaryKeyColumns)
	invoiceStatusInsertCacheMut       sync.RWMutex
	invoiceStatusInsertCache          = make(map[string]insertCache)
	invoiceStatusUpdateCacheMut       sync.RWMutex
	invoiceStatusUpdateCache          = make(map[string]updateCache)
	invoiceStatusUpsertCacheMut       sync.RWMutex
	invoiceStatusUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var invoiceStatusAfterSelectMu sync.Mutex
var invoiceStatusAfterSelectHooks []InvoiceStatusHook

var invoiceStatusBeforeInsertMu sync.Mutex
var invoiceStatusBeforeInsertHooks []InvoiceStatusHook
var invoiceStatusAfterInsertMu sync.Mutex
var invoiceStatusAfterInsertHooks []InvoiceStatusHook

var invoiceStatusBeforeUpdateMu sync.Mutex
var invoiceStatusBeforeUpdateHooks []InvoiceStatusHook
var invoiceStatusAfterUpdateMu sync.Mutex
var invoiceStatusAfterUpdateHooks []InvoiceStatusHook

var invoiceStatusBeforeDeleteMu sync.Mutex
var invoiceStatusBeforeDeleteHooks []InvoiceStatusHook
var invoiceStatusAfterDeleteMu sync.Mutex
var invoiceStatusAfterDeleteHooks []InvoiceStatusHook

var invoiceStatusBeforeUpsertMu sync.Mutex
var invoiceStatusBeforeUpsertHooks []InvoiceStatusHook
var invoiceStatusAfterUpsertMu sync.Mutex
var invoiceStatusAfterUpsertHooks []InvoiceStatusHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *InvoiceStatus) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range invoiceStatusAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *InvoiceStatus) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range invoiceStatusBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *InvoiceStatus) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range invoiceStatusAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *InvoiceStatus) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range invoiceStatusBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *InvoiceStatus) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range invoiceStatusAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *InvoiceStatus) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range invoiceStatusBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *InvoiceStatus) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range invoiceStatusAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *InvoiceStatus) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range invoiceStatusBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *InvoiceStatus) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range invoiceStatusAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddInvoiceStatusHook registers your hook function for all future operations.
func AddInvoiceStatusHook(hookPoint boil.HookPoint, invoiceStatusHook InvoiceStatusHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		invoiceStatusAfterSelectMu.Lock()
		invoiceStatusAfterSelectHooks = append(invoiceStatusAfterSelectHooks, invoiceStatusHook)
		invoiceStatusAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		invoiceStatusBeforeInsertMu.Lock()
		invoiceStatusBeforeInsertHooks = append(invoiceStatusBeforeInsertHooks, invoiceStatusHook)
		invoiceStatusBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		invoiceStatusAfterInsertMu.Lock()
		invoiceStatusAfterInsertHooks = append(invoiceStatusAfterInsertHooks, invoiceStatusHook)
		invoiceStatusAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		invoiceStatusBeforeUpdateMu.Lock()
		invoiceStatusBeforeUpdateHooks = append(invoiceStatusBeforeUpdateHooks, invoiceStatusHook)
		invoiceStatusBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		invoiceStatusAfterUpdateMu.Lock()
		invoiceStatusAfterUpdateHooks = append(invoiceStatusAfterUpdateHooks, invoiceStatusHook)
		invoiceStatusAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		invoiceStatusBeforeDeleteMu.Lock()
		invoiceStatusBeforeDeleteHooks = append(invoiceStatusBeforeDeleteHooks, invoiceStatusHook)
		invoiceStatusBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		invoiceStatusAfterDeleteMu.Lock()
		invoiceStatusAfterDeleteHooks = append(invoiceStatusAfterDeleteHooks, invoiceStatusHook)
		invoiceStatusAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		invoiceStatusBeforeUpsertMu.Lock()
		invoiceStatusBeforeUpsertHooks = append(invoiceStatusBeforeUpsertHooks, invoiceStatusHook)
		invoiceStatusBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		invoiceStatusAfterUpsertMu.Lock()
		invoiceStatusAfterUpsertHooks = append(invoiceStatusAfterUpsertHooks, invoiceStatusHook)
		invoiceStatusAfterUpsertMu.Unlock()
	}
}

// One returns a single invoiceStatus record from the query.
func (q invoiceStatusQuery) One(ctx context.Context, exec boil.ContextExecutor) (*InvoiceStatus, error) {
	o := &InvoiceStatus{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for invoice_status")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all InvoiceStatus records from the query.
func (q invoiceStatusQuery) All(ctx context.Context, exec boil.ContextExecutor) (InvoiceStatusSlice, error) {
	var o []*InvoiceStatus

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to InvoiceStatus slice")
	}

	if len(invoiceStatusAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all InvoiceStatus records in the query.
func (q invoiceStatusQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count invoice_status rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q invoiceStatusQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if invoice_status exists")
	}

	return count > 0, nil
}

// InvoiceStatusIDInvoices retrieves all the invoice's Invoices with an executor via invoiceStatusID column.
func (o *InvoiceStatus) InvoiceStatusIDInvoices(mods ...qm.QueryMod) invoiceQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"invoice\".\"invoiceStatusID\"=?", o.InvoiceStatusID),
	)

	return Invoices(queryMods...)
}

// LoadInvoiceStatusIDInvoices allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (invoiceStatusL) LoadInvoiceStatusIDInvoices(ctx context.Context, e boil.ContextExecutor, singular bool, maybeInvoiceStatus interface{}, mods queries.Applicator) error {
	var slice []*InvoiceStatus
	var object *InvoiceStatus

	if singular {
		var ok bool
		object, ok = maybeInvoiceStatus.(*InvoiceStatus)
		if !ok {
			object = new(InvoiceStatus)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeInvoiceStatus)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeInvoiceStatus))
			}
		}
	} else {
		s, ok := maybeInvoiceStatus.(*[]*InvoiceStatus)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeInvoiceStatus)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeInvoiceStatus))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &invoiceStatusR{}
		}
		args[object.InvoiceStatusID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &invoiceStatusR{}
			}
			args[obj.InvoiceStatusID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`invoice`),
		qm.WhereIn(`invoice.invoiceStatusID in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load invoice")
	}

	var resultSlice []*Invoice
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice invoice")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on invoice")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for invoice")
	}

	if len(invoiceAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.InvoiceStatusIDInvoices = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &invoiceR{}
			}
			foreign.R.InvoiceStatusIDInvoiceStatus = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.InvoiceStatusID == foreign.InvoiceStatusID {
				local.R.InvoiceStatusIDInvoices = append(local.R.InvoiceStatusIDInvoices, foreign)
				if foreign.R == nil {
					foreign.R = &invoiceR{}
				}
				foreign.R.InvoiceStatusIDInvoiceStatus = local
				break
			}
		}
	}

	return nil
}

// AddInvoiceStatusIDInvoices adds the given related objects to the existing relationships
// of the invoice_status, optionally inserting them as new records.
// Appends related to o.R.InvoiceStatusIDInvoices.
// Sets related.R.InvoiceStatusIDInvoiceStatus appropriately.
func (o *InvoiceStatus) AddInvoiceStatusIDInvoices(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Invoice) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.InvoiceStatusID = o.InvoiceStatusID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"invoice\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"invoiceStatusID"}),
				strmangle.WhereClause("\"", "\"", 2, invoicePrimaryKeyColumns),
			)
			values := []interface{}{o.InvoiceStatusID, rel.InvoiceID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.InvoiceStatusID = o.InvoiceStatusID
		}
	}

	if o.R == nil {
		o.R = &invoiceStatusR{
			InvoiceStatusIDInvoices: related,
		}
	} else {
		o.R.InvoiceStatusIDInvoices = append(o.R.InvoiceStatusIDInvoices, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &invoiceR{
				InvoiceStatusIDInvoiceStatus: o,
			}
		} else {
			rel.R.InvoiceStatusIDInvoiceStatus = o
		}
	}
	return nil
}

// InvoiceStatuses retrieves all the records using an executor.
func InvoiceStatuses(mods ...qm.QueryMod) invoiceStatusQuery {
	mods = append(mods, qm.From("\"invoice_status\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"invoice_status\".*"})
	}

	return invoiceStatusQuery{q}
}

// FindInvoiceStatus retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindInvoiceStatus(ctx context.Context, exec boil.ContextExecutor, invoiceStatusID int, selectCols ...string) (*InvoiceStatus, error) {
	invoiceStatusObj := &InvoiceStatus{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"invoice_status\" where \"invoiceStatusID\"=$1", sel,
	)

	q := queries.Raw(query, invoiceStatusID)

	err := q.Bind(ctx, exec, invoiceStatusObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from invoice_status")
	}

	if err = invoiceStatusObj.doAfterSelectHooks(ctx, exec); err != nil {
		return invoiceStatusObj, err
	}

	return invoiceStatusObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *InvoiceStatus) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no invoice_status provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(invoiceStatusColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	invoiceStatusInsertCacheMut.RLock()
	cache, cached := invoiceStatusInsertCache[key]
	invoiceStatusInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			invoiceStatusAllColumns,
			invoiceStatusColumnsWithDefault,
			invoiceStatusColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, invoiceStatusGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(invoiceStatusType, invoiceStatusMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(invoiceStatusType, invoiceStatusMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"invoice_status\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"invoice_status\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into invoice_status")
	}

	if !cached {
		invoiceStatusInsertCacheMut.Lock()
		invoiceStatusInsertCache[key] = cache
		invoiceStatusInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the InvoiceStatus.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *InvoiceStatus) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	invoiceStatusUpdateCacheMut.RLock()
	cache, cached := invoiceStatusUpdateCache[key]
	invoiceStatusUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			invoiceStatusAllColumns,
			invoiceStatusPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, invoiceStatusGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update invoice_status, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"invoice_status\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, invoiceStatusPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(invoiceStatusType, invoiceStatusMapping, append(wl, invoiceStatusPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update invoice_status row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for invoice_status")
	}

	if !cached {
		invoiceStatusUpdateCacheMut.Lock()
		invoiceStatusUpdateCache[key] = cache
		invoiceStatusUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q invoiceStatusQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for invoice_status")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for invoice_status")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o InvoiceStatusSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), invoiceStatusPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"invoice_status\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, invoiceStatusPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in invoiceStatus slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all invoiceStatus")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *InvoiceStatus) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no invoice_status provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(invoiceStatusColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	invoiceStatusUpsertCacheMut.RLock()
	cache, cached := invoiceStatusUpsertCache[key]
	invoiceStatusUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			invoiceStatusAllColumns,
			invoiceStatusColumnsWithDefault,
			invoiceStatusColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			invoiceStatusAllColumns,
			invoiceStatusPrimaryKeyColumns,
		)

		insert = strmangle.SetComplement(insert, invoiceStatusGeneratedColumns)
		update = strmangle.SetComplement(update, invoiceStatusGeneratedColumns)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert invoice_status, could not build update column list")
		}

		ret := strmangle.SetComplement(invoiceStatusAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(invoiceStatusPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert invoice_status, could not build conflict column list")
			}

			conflict = make([]string, len(invoiceStatusPrimaryKeyColumns))
			copy(conflict, invoiceStatusPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"invoice_status\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(invoiceStatusType, invoiceStatusMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(invoiceStatusType, invoiceStatusMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert invoice_status")
	}

	if !cached {
		invoiceStatusUpsertCacheMut.Lock()
		invoiceStatusUpsertCache[key] = cache
		invoiceStatusUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single InvoiceStatus record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *InvoiceStatus) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no InvoiceStatus provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), invoiceStatusPrimaryKeyMapping)
	sql := "DELETE FROM \"invoice_status\" WHERE \"invoiceStatusID\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from invoice_status")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for invoice_status")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q invoiceStatusQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no invoiceStatusQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from invoice_status")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for invoice_status")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o InvoiceStatusSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(invoiceStatusBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), invoiceStatusPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"invoice_status\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, invoiceStatusPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from invoiceStatus slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for invoice_status")
	}

	if len(invoiceStatusAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *InvoiceStatus) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindInvoiceStatus(ctx, exec, o.InvoiceStatusID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *InvoiceStatusSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := InvoiceStatusSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), invoiceStatusPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"invoice_status\".* FROM \"invoice_status\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, invoiceStatusPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in InvoiceStatusSlice")
	}

	*o = slice

	return nil
}

// InvoiceStatusExists checks if the InvoiceStatus row exists.
func InvoiceStatusExists(ctx context.Context, exec boil.ContextExecutor, invoiceStatusID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"invoice_status\" where \"invoiceStatusID\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, invoiceStatusID)
	}
	row := exec.QueryRowContext(ctx, sql, invoiceStatusID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if invoice_status exists")
	}

	return exists, nil
}

// Exists checks if the InvoiceStatus row exists.
func (o *InvoiceStatus) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return InvoiceStatusExists(ctx, exec, o.InvoiceStatusID)
}
