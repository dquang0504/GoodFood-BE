// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/aarondl/randomize"
	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testInvoiceStatuses(t *testing.T) {
	t.Parallel()

	query := InvoiceStatuses()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testInvoiceStatusesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InvoiceStatus{}
	if err = randomize.Struct(seed, o, invoiceStatusDBTypes, true, invoiceStatusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InvoiceStatus struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := InvoiceStatuses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testInvoiceStatusesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InvoiceStatus{}
	if err = randomize.Struct(seed, o, invoiceStatusDBTypes, true, invoiceStatusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InvoiceStatus struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := InvoiceStatuses().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := InvoiceStatuses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testInvoiceStatusesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InvoiceStatus{}
	if err = randomize.Struct(seed, o, invoiceStatusDBTypes, true, invoiceStatusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InvoiceStatus struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := InvoiceStatusSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := InvoiceStatuses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testInvoiceStatusesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InvoiceStatus{}
	if err = randomize.Struct(seed, o, invoiceStatusDBTypes, true, invoiceStatusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InvoiceStatus struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := InvoiceStatusExists(ctx, tx, o.InvoiceStatusID)
	if err != nil {
		t.Errorf("Unable to check if InvoiceStatus exists: %s", err)
	}
	if !e {
		t.Errorf("Expected InvoiceStatusExists to return true, but got false.")
	}
}

func testInvoiceStatusesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InvoiceStatus{}
	if err = randomize.Struct(seed, o, invoiceStatusDBTypes, true, invoiceStatusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InvoiceStatus struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	invoiceStatusFound, err := FindInvoiceStatus(ctx, tx, o.InvoiceStatusID)
	if err != nil {
		t.Error(err)
	}

	if invoiceStatusFound == nil {
		t.Error("want a record, got nil")
	}
}

func testInvoiceStatusesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InvoiceStatus{}
	if err = randomize.Struct(seed, o, invoiceStatusDBTypes, true, invoiceStatusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InvoiceStatus struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = InvoiceStatuses().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testInvoiceStatusesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InvoiceStatus{}
	if err = randomize.Struct(seed, o, invoiceStatusDBTypes, true, invoiceStatusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InvoiceStatus struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := InvoiceStatuses().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testInvoiceStatusesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	invoiceStatusOne := &InvoiceStatus{}
	invoiceStatusTwo := &InvoiceStatus{}
	if err = randomize.Struct(seed, invoiceStatusOne, invoiceStatusDBTypes, false, invoiceStatusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InvoiceStatus struct: %s", err)
	}
	if err = randomize.Struct(seed, invoiceStatusTwo, invoiceStatusDBTypes, false, invoiceStatusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InvoiceStatus struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = invoiceStatusOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = invoiceStatusTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := InvoiceStatuses().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testInvoiceStatusesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	invoiceStatusOne := &InvoiceStatus{}
	invoiceStatusTwo := &InvoiceStatus{}
	if err = randomize.Struct(seed, invoiceStatusOne, invoiceStatusDBTypes, false, invoiceStatusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InvoiceStatus struct: %s", err)
	}
	if err = randomize.Struct(seed, invoiceStatusTwo, invoiceStatusDBTypes, false, invoiceStatusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InvoiceStatus struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = invoiceStatusOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = invoiceStatusTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := InvoiceStatuses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func invoiceStatusBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *InvoiceStatus) error {
	*o = InvoiceStatus{}
	return nil
}

func invoiceStatusAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *InvoiceStatus) error {
	*o = InvoiceStatus{}
	return nil
}

func invoiceStatusAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *InvoiceStatus) error {
	*o = InvoiceStatus{}
	return nil
}

func invoiceStatusBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *InvoiceStatus) error {
	*o = InvoiceStatus{}
	return nil
}

func invoiceStatusAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *InvoiceStatus) error {
	*o = InvoiceStatus{}
	return nil
}

func invoiceStatusBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *InvoiceStatus) error {
	*o = InvoiceStatus{}
	return nil
}

func invoiceStatusAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *InvoiceStatus) error {
	*o = InvoiceStatus{}
	return nil
}

func invoiceStatusBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *InvoiceStatus) error {
	*o = InvoiceStatus{}
	return nil
}

func invoiceStatusAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *InvoiceStatus) error {
	*o = InvoiceStatus{}
	return nil
}

func testInvoiceStatusesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &InvoiceStatus{}
	o := &InvoiceStatus{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, invoiceStatusDBTypes, false); err != nil {
		t.Errorf("Unable to randomize InvoiceStatus object: %s", err)
	}

	AddInvoiceStatusHook(boil.BeforeInsertHook, invoiceStatusBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	invoiceStatusBeforeInsertHooks = []InvoiceStatusHook{}

	AddInvoiceStatusHook(boil.AfterInsertHook, invoiceStatusAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	invoiceStatusAfterInsertHooks = []InvoiceStatusHook{}

	AddInvoiceStatusHook(boil.AfterSelectHook, invoiceStatusAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	invoiceStatusAfterSelectHooks = []InvoiceStatusHook{}

	AddInvoiceStatusHook(boil.BeforeUpdateHook, invoiceStatusBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	invoiceStatusBeforeUpdateHooks = []InvoiceStatusHook{}

	AddInvoiceStatusHook(boil.AfterUpdateHook, invoiceStatusAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	invoiceStatusAfterUpdateHooks = []InvoiceStatusHook{}

	AddInvoiceStatusHook(boil.BeforeDeleteHook, invoiceStatusBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	invoiceStatusBeforeDeleteHooks = []InvoiceStatusHook{}

	AddInvoiceStatusHook(boil.AfterDeleteHook, invoiceStatusAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	invoiceStatusAfterDeleteHooks = []InvoiceStatusHook{}

	AddInvoiceStatusHook(boil.BeforeUpsertHook, invoiceStatusBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	invoiceStatusBeforeUpsertHooks = []InvoiceStatusHook{}

	AddInvoiceStatusHook(boil.AfterUpsertHook, invoiceStatusAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	invoiceStatusAfterUpsertHooks = []InvoiceStatusHook{}
}

func testInvoiceStatusesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InvoiceStatus{}
	if err = randomize.Struct(seed, o, invoiceStatusDBTypes, true, invoiceStatusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InvoiceStatus struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := InvoiceStatuses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testInvoiceStatusesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InvoiceStatus{}
	if err = randomize.Struct(seed, o, invoiceStatusDBTypes, true); err != nil {
		t.Errorf("Unable to randomize InvoiceStatus struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(strmangle.SetMerge(invoiceStatusPrimaryKeyColumns, invoiceStatusColumnsWithoutDefault)...)); err != nil {
		t.Error(err)
	}

	count, err := InvoiceStatuses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testInvoiceStatusToManyInvoiceStatusIDInvoices(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a InvoiceStatus
	var b, c Invoice

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, invoiceStatusDBTypes, true, invoiceStatusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InvoiceStatus struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, invoiceDBTypes, false, invoiceColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, invoiceDBTypes, false, invoiceColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.InvoiceStatusID = a.InvoiceStatusID
	c.InvoiceStatusID = a.InvoiceStatusID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.InvoiceStatusIDInvoices().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.InvoiceStatusID == b.InvoiceStatusID {
			bFound = true
		}
		if v.InvoiceStatusID == c.InvoiceStatusID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := InvoiceStatusSlice{&a}
	if err = a.L.LoadInvoiceStatusIDInvoices(ctx, tx, false, (*[]*InvoiceStatus)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.InvoiceStatusIDInvoices); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.InvoiceStatusIDInvoices = nil
	if err = a.L.LoadInvoiceStatusIDInvoices(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.InvoiceStatusIDInvoices); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testInvoiceStatusToManyAddOpInvoiceStatusIDInvoices(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a InvoiceStatus
	var b, c, d, e Invoice

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, invoiceStatusDBTypes, false, strmangle.SetComplement(invoiceStatusPrimaryKeyColumns, invoiceStatusColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Invoice{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, invoiceDBTypes, false, strmangle.SetComplement(invoicePrimaryKeyColumns, invoiceColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Invoice{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddInvoiceStatusIDInvoices(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.InvoiceStatusID != first.InvoiceStatusID {
			t.Error("foreign key was wrong value", a.InvoiceStatusID, first.InvoiceStatusID)
		}
		if a.InvoiceStatusID != second.InvoiceStatusID {
			t.Error("foreign key was wrong value", a.InvoiceStatusID, second.InvoiceStatusID)
		}

		if first.R.InvoiceStatusIDInvoiceStatus != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.InvoiceStatusIDInvoiceStatus != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.InvoiceStatusIDInvoices[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.InvoiceStatusIDInvoices[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.InvoiceStatusIDInvoices().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testInvoiceStatusesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InvoiceStatus{}
	if err = randomize.Struct(seed, o, invoiceStatusDBTypes, true, invoiceStatusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InvoiceStatus struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testInvoiceStatusesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InvoiceStatus{}
	if err = randomize.Struct(seed, o, invoiceStatusDBTypes, true, invoiceStatusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InvoiceStatus struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := InvoiceStatusSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testInvoiceStatusesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InvoiceStatus{}
	if err = randomize.Struct(seed, o, invoiceStatusDBTypes, true, invoiceStatusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InvoiceStatus struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := InvoiceStatuses().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	invoiceStatusDBTypes = map[string]string{`InvoiceStatusID`: `integer`, `StatusName`: `character varying`}
	_                    = bytes.MinRead
)

func testInvoiceStatusesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(invoiceStatusPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(invoiceStatusAllColumns) == len(invoiceStatusPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &InvoiceStatus{}
	if err = randomize.Struct(seed, o, invoiceStatusDBTypes, true, invoiceStatusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InvoiceStatus struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := InvoiceStatuses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, invoiceStatusDBTypes, true, invoiceStatusPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize InvoiceStatus struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testInvoiceStatusesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(invoiceStatusAllColumns) == len(invoiceStatusPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &InvoiceStatus{}
	if err = randomize.Struct(seed, o, invoiceStatusDBTypes, true, invoiceStatusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InvoiceStatus struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := InvoiceStatuses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, invoiceStatusDBTypes, true, invoiceStatusPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize InvoiceStatus struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(invoiceStatusAllColumns, invoiceStatusPrimaryKeyColumns) {
		fields = invoiceStatusAllColumns
	} else {
		fields = strmangle.SetComplement(
			invoiceStatusAllColumns,
			invoiceStatusPrimaryKeyColumns,
		)
		fields = strmangle.SetComplement(fields, invoiceStatusGeneratedColumns)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := InvoiceStatusSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testInvoiceStatusesUpsert(t *testing.T) {
	t.Parallel()

	if len(invoiceStatusAllColumns) == len(invoiceStatusPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := InvoiceStatus{}
	if err = randomize.Struct(seed, &o, invoiceStatusDBTypes, true); err != nil {
		t.Errorf("Unable to randomize InvoiceStatus struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert InvoiceStatus: %s", err)
	}

	count, err := InvoiceStatuses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, invoiceStatusDBTypes, false, invoiceStatusPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize InvoiceStatus struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert InvoiceStatus: %s", err)
	}

	count, err = InvoiceStatuses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
