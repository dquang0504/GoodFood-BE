// Code generated by SQLBoiler 4.18.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testReplies(t *testing.T) {
	t.Parallel()

	query := Replies()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testRepliesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Reply{}
	if err = randomize.Struct(seed, o, replyDBTypes, true, replyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Reply struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Replies().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRepliesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Reply{}
	if err = randomize.Struct(seed, o, replyDBTypes, true, replyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Reply struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Replies().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Replies().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRepliesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Reply{}
	if err = randomize.Struct(seed, o, replyDBTypes, true, replyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Reply struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ReplySlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Replies().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRepliesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Reply{}
	if err = randomize.Struct(seed, o, replyDBTypes, true, replyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Reply struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := ReplyExists(ctx, tx, o.ReplyID)
	if err != nil {
		t.Errorf("Unable to check if Reply exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ReplyExists to return true, but got false.")
	}
}

func testRepliesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Reply{}
	if err = randomize.Struct(seed, o, replyDBTypes, true, replyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Reply struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	replyFound, err := FindReply(ctx, tx, o.ReplyID)
	if err != nil {
		t.Error(err)
	}

	if replyFound == nil {
		t.Error("want a record, got nil")
	}
}

func testRepliesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Reply{}
	if err = randomize.Struct(seed, o, replyDBTypes, true, replyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Reply struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Replies().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testRepliesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Reply{}
	if err = randomize.Struct(seed, o, replyDBTypes, true, replyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Reply struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Replies().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testRepliesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	replyOne := &Reply{}
	replyTwo := &Reply{}
	if err = randomize.Struct(seed, replyOne, replyDBTypes, false, replyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Reply struct: %s", err)
	}
	if err = randomize.Struct(seed, replyTwo, replyDBTypes, false, replyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Reply struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = replyOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = replyTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Replies().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testRepliesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	replyOne := &Reply{}
	replyTwo := &Reply{}
	if err = randomize.Struct(seed, replyOne, replyDBTypes, false, replyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Reply struct: %s", err)
	}
	if err = randomize.Struct(seed, replyTwo, replyDBTypes, false, replyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Reply struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = replyOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = replyTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Replies().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func replyBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Reply) error {
	*o = Reply{}
	return nil
}

func replyAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Reply) error {
	*o = Reply{}
	return nil
}

func replyAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Reply) error {
	*o = Reply{}
	return nil
}

func replyBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Reply) error {
	*o = Reply{}
	return nil
}

func replyAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Reply) error {
	*o = Reply{}
	return nil
}

func replyBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Reply) error {
	*o = Reply{}
	return nil
}

func replyAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Reply) error {
	*o = Reply{}
	return nil
}

func replyBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Reply) error {
	*o = Reply{}
	return nil
}

func replyAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Reply) error {
	*o = Reply{}
	return nil
}

func testRepliesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Reply{}
	o := &Reply{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, replyDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Reply object: %s", err)
	}

	AddReplyHook(boil.BeforeInsertHook, replyBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	replyBeforeInsertHooks = []ReplyHook{}

	AddReplyHook(boil.AfterInsertHook, replyAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	replyAfterInsertHooks = []ReplyHook{}

	AddReplyHook(boil.AfterSelectHook, replyAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	replyAfterSelectHooks = []ReplyHook{}

	AddReplyHook(boil.BeforeUpdateHook, replyBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	replyBeforeUpdateHooks = []ReplyHook{}

	AddReplyHook(boil.AfterUpdateHook, replyAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	replyAfterUpdateHooks = []ReplyHook{}

	AddReplyHook(boil.BeforeDeleteHook, replyBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	replyBeforeDeleteHooks = []ReplyHook{}

	AddReplyHook(boil.AfterDeleteHook, replyAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	replyAfterDeleteHooks = []ReplyHook{}

	AddReplyHook(boil.BeforeUpsertHook, replyBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	replyBeforeUpsertHooks = []ReplyHook{}

	AddReplyHook(boil.AfterUpsertHook, replyAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	replyAfterUpsertHooks = []ReplyHook{}
}

func testRepliesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Reply{}
	if err = randomize.Struct(seed, o, replyDBTypes, true, replyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Reply struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Replies().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testRepliesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Reply{}
	if err = randomize.Struct(seed, o, replyDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Reply struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(replyColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Replies().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testReplyToOneAccountUsingAccountIDAccount(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Reply
	var foreign Account

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, replyDBTypes, false, replyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Reply struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, accountDBTypes, false, accountColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Account struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.AccountID = foreign.AccountID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.AccountIDAccount().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.AccountID != foreign.AccountID {
		t.Errorf("want: %v, got %v", foreign.AccountID, check.AccountID)
	}

	ranAfterSelectHook := false
	AddAccountHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Account) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := ReplySlice{&local}
	if err = local.L.LoadAccountIDAccount(ctx, tx, false, (*[]*Reply)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.AccountIDAccount == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.AccountIDAccount = nil
	if err = local.L.LoadAccountIDAccount(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.AccountIDAccount == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testReplyToOneReviewUsingReviewIDReview(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Reply
	var foreign Review

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, replyDBTypes, false, replyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Reply struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, reviewDBTypes, false, reviewColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Review struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.ReviewID = foreign.ReviewID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.ReviewIDReview().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ReviewID != foreign.ReviewID {
		t.Errorf("want: %v, got %v", foreign.ReviewID, check.ReviewID)
	}

	ranAfterSelectHook := false
	AddReviewHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Review) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := ReplySlice{&local}
	if err = local.L.LoadReviewIDReview(ctx, tx, false, (*[]*Reply)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ReviewIDReview == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.ReviewIDReview = nil
	if err = local.L.LoadReviewIDReview(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ReviewIDReview == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testReplyToOneSetOpAccountUsingAccountIDAccount(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Reply
	var b, c Account

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, replyDBTypes, false, strmangle.SetComplement(replyPrimaryKeyColumns, replyColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, accountDBTypes, false, strmangle.SetComplement(accountPrimaryKeyColumns, accountColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, accountDBTypes, false, strmangle.SetComplement(accountPrimaryKeyColumns, accountColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Account{&b, &c} {
		err = a.SetAccountIDAccount(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.AccountIDAccount != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.AccountIDReplies[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.AccountID != x.AccountID {
			t.Error("foreign key was wrong value", a.AccountID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.AccountID))
		reflect.Indirect(reflect.ValueOf(&a.AccountID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.AccountID != x.AccountID {
			t.Error("foreign key was wrong value", a.AccountID, x.AccountID)
		}
	}
}
func testReplyToOneSetOpReviewUsingReviewIDReview(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Reply
	var b, c Review

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, replyDBTypes, false, strmangle.SetComplement(replyPrimaryKeyColumns, replyColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, reviewDBTypes, false, strmangle.SetComplement(reviewPrimaryKeyColumns, reviewColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, reviewDBTypes, false, strmangle.SetComplement(reviewPrimaryKeyColumns, reviewColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Review{&b, &c} {
		err = a.SetReviewIDReview(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.ReviewIDReview != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ReviewIDReplies[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.ReviewID != x.ReviewID {
			t.Error("foreign key was wrong value", a.ReviewID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ReviewID))
		reflect.Indirect(reflect.ValueOf(&a.ReviewID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.ReviewID != x.ReviewID {
			t.Error("foreign key was wrong value", a.ReviewID, x.ReviewID)
		}
	}
}

func testRepliesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Reply{}
	if err = randomize.Struct(seed, o, replyDBTypes, true, replyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Reply struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testRepliesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Reply{}
	if err = randomize.Struct(seed, o, replyDBTypes, true, replyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Reply struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ReplySlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testRepliesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Reply{}
	if err = randomize.Struct(seed, o, replyDBTypes, true, replyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Reply struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Replies().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	replyDBTypes = map[string]string{`ReplyID`: `integer`, `Reply`: `character varying`, `IsReplied`: `boolean`, `ReviewID`: `integer`, `AccountID`: `integer`}
	_            = bytes.MinRead
)

func testRepliesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(replyPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(replyAllColumns) == len(replyPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Reply{}
	if err = randomize.Struct(seed, o, replyDBTypes, true, replyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Reply struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Replies().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, replyDBTypes, true, replyPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Reply struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testRepliesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(replyAllColumns) == len(replyPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Reply{}
	if err = randomize.Struct(seed, o, replyDBTypes, true, replyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Reply struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Replies().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, replyDBTypes, true, replyPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Reply struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(replyAllColumns, replyPrimaryKeyColumns) {
		fields = replyAllColumns
	} else {
		fields = strmangle.SetComplement(
			replyAllColumns,
			replyPrimaryKeyColumns,
		)
		fields = strmangle.SetComplement(fields, replyGeneratedColumns)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := ReplySlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testRepliesUpsert(t *testing.T) {
	t.Parallel()

	if len(replyAllColumns) == len(replyPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Reply{}
	if err = randomize.Struct(seed, &o, replyDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Reply struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Reply: %s", err)
	}

	count, err := Replies().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, replyDBTypes, false, replyPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Reply struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Reply: %s", err)
	}

	count, err = Replies().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
