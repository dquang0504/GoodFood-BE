// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/aarondl/randomize"
	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testInvoiceDetails(t *testing.T) {
	t.Parallel()

	query := InvoiceDetails()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testInvoiceDetailsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InvoiceDetail{}
	if err = randomize.Struct(seed, o, invoiceDetailDBTypes, true, invoiceDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InvoiceDetail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := InvoiceDetails().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testInvoiceDetailsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InvoiceDetail{}
	if err = randomize.Struct(seed, o, invoiceDetailDBTypes, true, invoiceDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InvoiceDetail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := InvoiceDetails().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := InvoiceDetails().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testInvoiceDetailsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InvoiceDetail{}
	if err = randomize.Struct(seed, o, invoiceDetailDBTypes, true, invoiceDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InvoiceDetail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := InvoiceDetailSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := InvoiceDetails().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testInvoiceDetailsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InvoiceDetail{}
	if err = randomize.Struct(seed, o, invoiceDetailDBTypes, true, invoiceDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InvoiceDetail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := InvoiceDetailExists(ctx, tx, o.InvoiceDetailID)
	if err != nil {
		t.Errorf("Unable to check if InvoiceDetail exists: %s", err)
	}
	if !e {
		t.Errorf("Expected InvoiceDetailExists to return true, but got false.")
	}
}

func testInvoiceDetailsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InvoiceDetail{}
	if err = randomize.Struct(seed, o, invoiceDetailDBTypes, true, invoiceDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InvoiceDetail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	invoiceDetailFound, err := FindInvoiceDetail(ctx, tx, o.InvoiceDetailID)
	if err != nil {
		t.Error(err)
	}

	if invoiceDetailFound == nil {
		t.Error("want a record, got nil")
	}
}

func testInvoiceDetailsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InvoiceDetail{}
	if err = randomize.Struct(seed, o, invoiceDetailDBTypes, true, invoiceDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InvoiceDetail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = InvoiceDetails().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testInvoiceDetailsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InvoiceDetail{}
	if err = randomize.Struct(seed, o, invoiceDetailDBTypes, true, invoiceDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InvoiceDetail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := InvoiceDetails().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testInvoiceDetailsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	invoiceDetailOne := &InvoiceDetail{}
	invoiceDetailTwo := &InvoiceDetail{}
	if err = randomize.Struct(seed, invoiceDetailOne, invoiceDetailDBTypes, false, invoiceDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InvoiceDetail struct: %s", err)
	}
	if err = randomize.Struct(seed, invoiceDetailTwo, invoiceDetailDBTypes, false, invoiceDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InvoiceDetail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = invoiceDetailOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = invoiceDetailTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := InvoiceDetails().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testInvoiceDetailsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	invoiceDetailOne := &InvoiceDetail{}
	invoiceDetailTwo := &InvoiceDetail{}
	if err = randomize.Struct(seed, invoiceDetailOne, invoiceDetailDBTypes, false, invoiceDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InvoiceDetail struct: %s", err)
	}
	if err = randomize.Struct(seed, invoiceDetailTwo, invoiceDetailDBTypes, false, invoiceDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InvoiceDetail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = invoiceDetailOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = invoiceDetailTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := InvoiceDetails().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func invoiceDetailBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *InvoiceDetail) error {
	*o = InvoiceDetail{}
	return nil
}

func invoiceDetailAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *InvoiceDetail) error {
	*o = InvoiceDetail{}
	return nil
}

func invoiceDetailAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *InvoiceDetail) error {
	*o = InvoiceDetail{}
	return nil
}

func invoiceDetailBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *InvoiceDetail) error {
	*o = InvoiceDetail{}
	return nil
}

func invoiceDetailAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *InvoiceDetail) error {
	*o = InvoiceDetail{}
	return nil
}

func invoiceDetailBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *InvoiceDetail) error {
	*o = InvoiceDetail{}
	return nil
}

func invoiceDetailAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *InvoiceDetail) error {
	*o = InvoiceDetail{}
	return nil
}

func invoiceDetailBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *InvoiceDetail) error {
	*o = InvoiceDetail{}
	return nil
}

func invoiceDetailAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *InvoiceDetail) error {
	*o = InvoiceDetail{}
	return nil
}

func testInvoiceDetailsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &InvoiceDetail{}
	o := &InvoiceDetail{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, invoiceDetailDBTypes, false); err != nil {
		t.Errorf("Unable to randomize InvoiceDetail object: %s", err)
	}

	AddInvoiceDetailHook(boil.BeforeInsertHook, invoiceDetailBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	invoiceDetailBeforeInsertHooks = []InvoiceDetailHook{}

	AddInvoiceDetailHook(boil.AfterInsertHook, invoiceDetailAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	invoiceDetailAfterInsertHooks = []InvoiceDetailHook{}

	AddInvoiceDetailHook(boil.AfterSelectHook, invoiceDetailAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	invoiceDetailAfterSelectHooks = []InvoiceDetailHook{}

	AddInvoiceDetailHook(boil.BeforeUpdateHook, invoiceDetailBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	invoiceDetailBeforeUpdateHooks = []InvoiceDetailHook{}

	AddInvoiceDetailHook(boil.AfterUpdateHook, invoiceDetailAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	invoiceDetailAfterUpdateHooks = []InvoiceDetailHook{}

	AddInvoiceDetailHook(boil.BeforeDeleteHook, invoiceDetailBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	invoiceDetailBeforeDeleteHooks = []InvoiceDetailHook{}

	AddInvoiceDetailHook(boil.AfterDeleteHook, invoiceDetailAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	invoiceDetailAfterDeleteHooks = []InvoiceDetailHook{}

	AddInvoiceDetailHook(boil.BeforeUpsertHook, invoiceDetailBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	invoiceDetailBeforeUpsertHooks = []InvoiceDetailHook{}

	AddInvoiceDetailHook(boil.AfterUpsertHook, invoiceDetailAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	invoiceDetailAfterUpsertHooks = []InvoiceDetailHook{}
}

func testInvoiceDetailsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InvoiceDetail{}
	if err = randomize.Struct(seed, o, invoiceDetailDBTypes, true, invoiceDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InvoiceDetail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := InvoiceDetails().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testInvoiceDetailsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InvoiceDetail{}
	if err = randomize.Struct(seed, o, invoiceDetailDBTypes, true); err != nil {
		t.Errorf("Unable to randomize InvoiceDetail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(strmangle.SetMerge(invoiceDetailPrimaryKeyColumns, invoiceDetailColumnsWithoutDefault)...)); err != nil {
		t.Error(err)
	}

	count, err := InvoiceDetails().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testInvoiceDetailToOneInvoiceUsingInvoiceIDInvoice(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local InvoiceDetail
	var foreign Invoice

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, invoiceDetailDBTypes, false, invoiceDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InvoiceDetail struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, invoiceDBTypes, false, invoiceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Invoice struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.InvoiceID = foreign.InvoiceID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.InvoiceIDInvoice().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.InvoiceID != foreign.InvoiceID {
		t.Errorf("want: %v, got %v", foreign.InvoiceID, check.InvoiceID)
	}

	ranAfterSelectHook := false
	AddInvoiceHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Invoice) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := InvoiceDetailSlice{&local}
	if err = local.L.LoadInvoiceIDInvoice(ctx, tx, false, (*[]*InvoiceDetail)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.InvoiceIDInvoice == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.InvoiceIDInvoice = nil
	if err = local.L.LoadInvoiceIDInvoice(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.InvoiceIDInvoice == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testInvoiceDetailToOneProductUsingProductIDProduct(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local InvoiceDetail
	var foreign Product

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, invoiceDetailDBTypes, false, invoiceDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InvoiceDetail struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, productDBTypes, false, productColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Product struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.ProductID = foreign.ProductID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.ProductIDProduct().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ProductID != foreign.ProductID {
		t.Errorf("want: %v, got %v", foreign.ProductID, check.ProductID)
	}

	ranAfterSelectHook := false
	AddProductHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Product) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := InvoiceDetailSlice{&local}
	if err = local.L.LoadProductIDProduct(ctx, tx, false, (*[]*InvoiceDetail)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ProductIDProduct == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.ProductIDProduct = nil
	if err = local.L.LoadProductIDProduct(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ProductIDProduct == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testInvoiceDetailToOneSetOpInvoiceUsingInvoiceIDInvoice(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a InvoiceDetail
	var b, c Invoice

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, invoiceDetailDBTypes, false, strmangle.SetComplement(invoiceDetailPrimaryKeyColumns, invoiceDetailColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, invoiceDBTypes, false, strmangle.SetComplement(invoicePrimaryKeyColumns, invoiceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, invoiceDBTypes, false, strmangle.SetComplement(invoicePrimaryKeyColumns, invoiceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Invoice{&b, &c} {
		err = a.SetInvoiceIDInvoice(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.InvoiceIDInvoice != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.InvoiceIDInvoiceDetails[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.InvoiceID != x.InvoiceID {
			t.Error("foreign key was wrong value", a.InvoiceID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.InvoiceID))
		reflect.Indirect(reflect.ValueOf(&a.InvoiceID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.InvoiceID != x.InvoiceID {
			t.Error("foreign key was wrong value", a.InvoiceID, x.InvoiceID)
		}
	}
}
func testInvoiceDetailToOneSetOpProductUsingProductIDProduct(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a InvoiceDetail
	var b, c Product

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, invoiceDetailDBTypes, false, strmangle.SetComplement(invoiceDetailPrimaryKeyColumns, invoiceDetailColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, productDBTypes, false, strmangle.SetComplement(productPrimaryKeyColumns, productColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, productDBTypes, false, strmangle.SetComplement(productPrimaryKeyColumns, productColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Product{&b, &c} {
		err = a.SetProductIDProduct(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.ProductIDProduct != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ProductIDInvoiceDetails[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.ProductID != x.ProductID {
			t.Error("foreign key was wrong value", a.ProductID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ProductID))
		reflect.Indirect(reflect.ValueOf(&a.ProductID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.ProductID != x.ProductID {
			t.Error("foreign key was wrong value", a.ProductID, x.ProductID)
		}
	}
}

func testInvoiceDetailsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InvoiceDetail{}
	if err = randomize.Struct(seed, o, invoiceDetailDBTypes, true, invoiceDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InvoiceDetail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testInvoiceDetailsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InvoiceDetail{}
	if err = randomize.Struct(seed, o, invoiceDetailDBTypes, true, invoiceDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InvoiceDetail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := InvoiceDetailSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testInvoiceDetailsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InvoiceDetail{}
	if err = randomize.Struct(seed, o, invoiceDetailDBTypes, true, invoiceDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InvoiceDetail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := InvoiceDetails().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	invoiceDetailDBTypes = map[string]string{`InvoiceDetailID`: `integer`, `Quantity`: `integer`, `Price`: `real`, `ProductID`: `integer`, `InvoiceID`: `integer`}
	_                    = bytes.MinRead
)

func testInvoiceDetailsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(invoiceDetailPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(invoiceDetailAllColumns) == len(invoiceDetailPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &InvoiceDetail{}
	if err = randomize.Struct(seed, o, invoiceDetailDBTypes, true, invoiceDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InvoiceDetail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := InvoiceDetails().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, invoiceDetailDBTypes, true, invoiceDetailPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize InvoiceDetail struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testInvoiceDetailsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(invoiceDetailAllColumns) == len(invoiceDetailPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &InvoiceDetail{}
	if err = randomize.Struct(seed, o, invoiceDetailDBTypes, true, invoiceDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InvoiceDetail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := InvoiceDetails().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, invoiceDetailDBTypes, true, invoiceDetailPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize InvoiceDetail struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(invoiceDetailAllColumns, invoiceDetailPrimaryKeyColumns) {
		fields = invoiceDetailAllColumns
	} else {
		fields = strmangle.SetComplement(
			invoiceDetailAllColumns,
			invoiceDetailPrimaryKeyColumns,
		)
		fields = strmangle.SetComplement(fields, invoiceDetailGeneratedColumns)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := InvoiceDetailSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testInvoiceDetailsUpsert(t *testing.T) {
	t.Parallel()

	if len(invoiceDetailAllColumns) == len(invoiceDetailPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := InvoiceDetail{}
	if err = randomize.Struct(seed, &o, invoiceDetailDBTypes, true); err != nil {
		t.Errorf("Unable to randomize InvoiceDetail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert InvoiceDetail: %s", err)
	}

	count, err := InvoiceDetails().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, invoiceDetailDBTypes, false, invoiceDetailPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize InvoiceDetail struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert InvoiceDetail: %s", err)
	}

	count, err = InvoiceDetails().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
