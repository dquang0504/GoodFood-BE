// Code generated by SQLBoiler 4.18.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Reply is an object representing the database table.
type Reply struct {
	ReplyID   int    `boil:"replyID" json:"replyID" toml:"replyID" yaml:"replyID"`
	Reply     string `boil:"reply" json:"reply" toml:"reply" yaml:"reply"`
	IsReplied bool   `boil:"isReplied" json:"isReplied" toml:"isReplied" yaml:"isReplied"`
	ReviewID  int    `boil:"reviewID" json:"reviewID" toml:"reviewID" yaml:"reviewID"`
	AccountID int    `boil:"accountID" json:"accountID" toml:"accountID" yaml:"accountID"`

	R *replyR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L replyL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ReplyColumns = struct {
	ReplyID   string
	Reply     string
	IsReplied string
	ReviewID  string
	AccountID string
}{
	ReplyID:   "replyID",
	Reply:     "reply",
	IsReplied: "isReplied",
	ReviewID:  "reviewID",
	AccountID: "accountID",
}

var ReplyTableColumns = struct {
	ReplyID   string
	Reply     string
	IsReplied string
	ReviewID  string
	AccountID string
}{
	ReplyID:   "reply.replyID",
	Reply:     "reply.reply",
	IsReplied: "reply.isReplied",
	ReviewID:  "reply.reviewID",
	AccountID: "reply.accountID",
}

// Generated where

var ReplyWhere = struct {
	ReplyID   whereHelperint
	Reply     whereHelperstring
	IsReplied whereHelperbool
	ReviewID  whereHelperint
	AccountID whereHelperint
}{
	ReplyID:   whereHelperint{field: "\"reply\".\"replyID\""},
	Reply:     whereHelperstring{field: "\"reply\".\"reply\""},
	IsReplied: whereHelperbool{field: "\"reply\".\"isReplied\""},
	ReviewID:  whereHelperint{field: "\"reply\".\"reviewID\""},
	AccountID: whereHelperint{field: "\"reply\".\"accountID\""},
}

// ReplyRels is where relationship names are stored.
var ReplyRels = struct {
	AccountIDAccount string
	ReviewIDReview   string
}{
	AccountIDAccount: "AccountIDAccount",
	ReviewIDReview:   "ReviewIDReview",
}

// replyR is where relationships are stored.
type replyR struct {
	AccountIDAccount *Account `boil:"AccountIDAccount" json:"AccountIDAccount" toml:"AccountIDAccount" yaml:"AccountIDAccount"`
	ReviewIDReview   *Review  `boil:"ReviewIDReview" json:"ReviewIDReview" toml:"ReviewIDReview" yaml:"ReviewIDReview"`
}

// NewStruct creates a new relationship struct
func (*replyR) NewStruct() *replyR {
	return &replyR{}
}

func (r *replyR) GetAccountIDAccount() *Account {
	if r == nil {
		return nil
	}
	return r.AccountIDAccount
}

func (r *replyR) GetReviewIDReview() *Review {
	if r == nil {
		return nil
	}
	return r.ReviewIDReview
}

// replyL is where Load methods for each relationship are stored.
type replyL struct{}

var (
	replyAllColumns            = []string{"replyID", "reply", "isReplied", "reviewID", "accountID"}
	replyColumnsWithoutDefault = []string{"reply", "isReplied", "reviewID", "accountID"}
	replyColumnsWithDefault    = []string{"replyID"}
	replyPrimaryKeyColumns     = []string{"replyID"}
	replyGeneratedColumns      = []string{"replyID"}
)

type (
	// ReplySlice is an alias for a slice of pointers to Reply.
	// This should almost always be used instead of []Reply.
	ReplySlice []*Reply
	// ReplyHook is the signature for custom Reply hook methods
	ReplyHook func(context.Context, boil.ContextExecutor, *Reply) error

	replyQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	replyType                 = reflect.TypeOf(&Reply{})
	replyMapping              = queries.MakeStructMapping(replyType)
	replyPrimaryKeyMapping, _ = queries.BindMapping(replyType, replyMapping, replyPrimaryKeyColumns)
	replyInsertCacheMut       sync.RWMutex
	replyInsertCache          = make(map[string]insertCache)
	replyUpdateCacheMut       sync.RWMutex
	replyUpdateCache          = make(map[string]updateCache)
	replyUpsertCacheMut       sync.RWMutex
	replyUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var replyAfterSelectMu sync.Mutex
var replyAfterSelectHooks []ReplyHook

var replyBeforeInsertMu sync.Mutex
var replyBeforeInsertHooks []ReplyHook
var replyAfterInsertMu sync.Mutex
var replyAfterInsertHooks []ReplyHook

var replyBeforeUpdateMu sync.Mutex
var replyBeforeUpdateHooks []ReplyHook
var replyAfterUpdateMu sync.Mutex
var replyAfterUpdateHooks []ReplyHook

var replyBeforeDeleteMu sync.Mutex
var replyBeforeDeleteHooks []ReplyHook
var replyAfterDeleteMu sync.Mutex
var replyAfterDeleteHooks []ReplyHook

var replyBeforeUpsertMu sync.Mutex
var replyBeforeUpsertHooks []ReplyHook
var replyAfterUpsertMu sync.Mutex
var replyAfterUpsertHooks []ReplyHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Reply) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range replyAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Reply) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range replyBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Reply) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range replyAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Reply) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range replyBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Reply) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range replyAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Reply) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range replyBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Reply) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range replyAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Reply) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range replyBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Reply) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range replyAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddReplyHook registers your hook function for all future operations.
func AddReplyHook(hookPoint boil.HookPoint, replyHook ReplyHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		replyAfterSelectMu.Lock()
		replyAfterSelectHooks = append(replyAfterSelectHooks, replyHook)
		replyAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		replyBeforeInsertMu.Lock()
		replyBeforeInsertHooks = append(replyBeforeInsertHooks, replyHook)
		replyBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		replyAfterInsertMu.Lock()
		replyAfterInsertHooks = append(replyAfterInsertHooks, replyHook)
		replyAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		replyBeforeUpdateMu.Lock()
		replyBeforeUpdateHooks = append(replyBeforeUpdateHooks, replyHook)
		replyBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		replyAfterUpdateMu.Lock()
		replyAfterUpdateHooks = append(replyAfterUpdateHooks, replyHook)
		replyAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		replyBeforeDeleteMu.Lock()
		replyBeforeDeleteHooks = append(replyBeforeDeleteHooks, replyHook)
		replyBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		replyAfterDeleteMu.Lock()
		replyAfterDeleteHooks = append(replyAfterDeleteHooks, replyHook)
		replyAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		replyBeforeUpsertMu.Lock()
		replyBeforeUpsertHooks = append(replyBeforeUpsertHooks, replyHook)
		replyBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		replyAfterUpsertMu.Lock()
		replyAfterUpsertHooks = append(replyAfterUpsertHooks, replyHook)
		replyAfterUpsertMu.Unlock()
	}
}

// One returns a single reply record from the query.
func (q replyQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Reply, error) {
	o := &Reply{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for reply")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Reply records from the query.
func (q replyQuery) All(ctx context.Context, exec boil.ContextExecutor) (ReplySlice, error) {
	var o []*Reply

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Reply slice")
	}

	if len(replyAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Reply records in the query.
func (q replyQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count reply rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q replyQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if reply exists")
	}

	return count > 0, nil
}

// AccountIDAccount pointed to by the foreign key.
func (o *Reply) AccountIDAccount(mods ...qm.QueryMod) accountQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"accountID\" = ?", o.AccountID),
	}

	queryMods = append(queryMods, mods...)

	return Accounts(queryMods...)
}

// ReviewIDReview pointed to by the foreign key.
func (o *Reply) ReviewIDReview(mods ...qm.QueryMod) reviewQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"reviewID\" = ?", o.ReviewID),
	}

	queryMods = append(queryMods, mods...)

	return Reviews(queryMods...)
}

// LoadAccountIDAccount allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (replyL) LoadAccountIDAccount(ctx context.Context, e boil.ContextExecutor, singular bool, maybeReply interface{}, mods queries.Applicator) error {
	var slice []*Reply
	var object *Reply

	if singular {
		var ok bool
		object, ok = maybeReply.(*Reply)
		if !ok {
			object = new(Reply)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeReply)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeReply))
			}
		}
	} else {
		s, ok := maybeReply.(*[]*Reply)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeReply)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeReply))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &replyR{}
		}
		args[object.AccountID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &replyR{}
			}

			args[obj.AccountID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`account`),
		qm.WhereIn(`account.accountID in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Account")
	}

	var resultSlice []*Account
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Account")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for account")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for account")
	}

	if len(accountAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.AccountIDAccount = foreign
		if foreign.R == nil {
			foreign.R = &accountR{}
		}
		foreign.R.AccountIDReplies = append(foreign.R.AccountIDReplies, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.AccountID == foreign.AccountID {
				local.R.AccountIDAccount = foreign
				if foreign.R == nil {
					foreign.R = &accountR{}
				}
				foreign.R.AccountIDReplies = append(foreign.R.AccountIDReplies, local)
				break
			}
		}
	}

	return nil
}

// LoadReviewIDReview allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (replyL) LoadReviewIDReview(ctx context.Context, e boil.ContextExecutor, singular bool, maybeReply interface{}, mods queries.Applicator) error {
	var slice []*Reply
	var object *Reply

	if singular {
		var ok bool
		object, ok = maybeReply.(*Reply)
		if !ok {
			object = new(Reply)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeReply)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeReply))
			}
		}
	} else {
		s, ok := maybeReply.(*[]*Reply)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeReply)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeReply))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &replyR{}
		}
		args[object.ReviewID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &replyR{}
			}

			args[obj.ReviewID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`review`),
		qm.WhereIn(`review.reviewID in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Review")
	}

	var resultSlice []*Review
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Review")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for review")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for review")
	}

	if len(reviewAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ReviewIDReview = foreign
		if foreign.R == nil {
			foreign.R = &reviewR{}
		}
		foreign.R.ReviewIDReplies = append(foreign.R.ReviewIDReplies, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ReviewID == foreign.ReviewID {
				local.R.ReviewIDReview = foreign
				if foreign.R == nil {
					foreign.R = &reviewR{}
				}
				foreign.R.ReviewIDReplies = append(foreign.R.ReviewIDReplies, local)
				break
			}
		}
	}

	return nil
}

// SetAccountIDAccount of the reply to the related item.
// Sets o.R.AccountIDAccount to related.
// Adds o to related.R.AccountIDReplies.
func (o *Reply) SetAccountIDAccount(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Account) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"reply\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"accountID"}),
		strmangle.WhereClause("\"", "\"", 2, replyPrimaryKeyColumns),
	)
	values := []interface{}{related.AccountID, o.ReplyID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.AccountID = related.AccountID
	if o.R == nil {
		o.R = &replyR{
			AccountIDAccount: related,
		}
	} else {
		o.R.AccountIDAccount = related
	}

	if related.R == nil {
		related.R = &accountR{
			AccountIDReplies: ReplySlice{o},
		}
	} else {
		related.R.AccountIDReplies = append(related.R.AccountIDReplies, o)
	}

	return nil
}

// SetReviewIDReview of the reply to the related item.
// Sets o.R.ReviewIDReview to related.
// Adds o to related.R.ReviewIDReplies.
func (o *Reply) SetReviewIDReview(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Review) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"reply\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"reviewID"}),
		strmangle.WhereClause("\"", "\"", 2, replyPrimaryKeyColumns),
	)
	values := []interface{}{related.ReviewID, o.ReplyID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ReviewID = related.ReviewID
	if o.R == nil {
		o.R = &replyR{
			ReviewIDReview: related,
		}
	} else {
		o.R.ReviewIDReview = related
	}

	if related.R == nil {
		related.R = &reviewR{
			ReviewIDReplies: ReplySlice{o},
		}
	} else {
		related.R.ReviewIDReplies = append(related.R.ReviewIDReplies, o)
	}

	return nil
}

// Replies retrieves all the records using an executor.
func Replies(mods ...qm.QueryMod) replyQuery {
	mods = append(mods, qm.From("\"reply\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"reply\".*"})
	}

	return replyQuery{q}
}

// FindReply retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindReply(ctx context.Context, exec boil.ContextExecutor, replyID int, selectCols ...string) (*Reply, error) {
	replyObj := &Reply{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"reply\" where \"replyID\"=$1", sel,
	)

	q := queries.Raw(query, replyID)

	err := q.Bind(ctx, exec, replyObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from reply")
	}

	if err = replyObj.doAfterSelectHooks(ctx, exec); err != nil {
		return replyObj, err
	}

	return replyObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Reply) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no reply provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(replyColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	replyInsertCacheMut.RLock()
	cache, cached := replyInsertCache[key]
	replyInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			replyAllColumns,
			replyColumnsWithDefault,
			replyColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, replyGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(replyType, replyMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(replyType, replyMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"reply\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"reply\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into reply")
	}

	if !cached {
		replyInsertCacheMut.Lock()
		replyInsertCache[key] = cache
		replyInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Reply.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Reply) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	replyUpdateCacheMut.RLock()
	cache, cached := replyUpdateCache[key]
	replyUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			replyAllColumns,
			replyPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, replyGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update reply, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"reply\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, replyPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(replyType, replyMapping, append(wl, replyPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update reply row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for reply")
	}

	if !cached {
		replyUpdateCacheMut.Lock()
		replyUpdateCache[key] = cache
		replyUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q replyQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for reply")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for reply")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ReplySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), replyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"reply\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, replyPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in reply slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all reply")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Reply) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no reply provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(replyColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	replyUpsertCacheMut.RLock()
	cache, cached := replyUpsertCache[key]
	replyUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			replyAllColumns,
			replyColumnsWithDefault,
			replyColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			replyAllColumns,
			replyPrimaryKeyColumns,
		)

		insert = strmangle.SetComplement(insert, replyGeneratedColumns)
		update = strmangle.SetComplement(update, replyGeneratedColumns)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert reply, could not build update column list")
		}

		ret := strmangle.SetComplement(replyAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(replyPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert reply, could not build conflict column list")
			}

			conflict = make([]string, len(replyPrimaryKeyColumns))
			copy(conflict, replyPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"reply\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(replyType, replyMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(replyType, replyMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert reply")
	}

	if !cached {
		replyUpsertCacheMut.Lock()
		replyUpsertCache[key] = cache
		replyUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Reply record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Reply) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Reply provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), replyPrimaryKeyMapping)
	sql := "DELETE FROM \"reply\" WHERE \"replyID\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from reply")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for reply")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q replyQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no replyQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from reply")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for reply")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ReplySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(replyBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), replyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"reply\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, replyPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from reply slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for reply")
	}

	if len(replyAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Reply) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindReply(ctx, exec, o.ReplyID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ReplySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ReplySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), replyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"reply\".* FROM \"reply\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, replyPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ReplySlice")
	}

	*o = slice

	return nil
}

// ReplyExists checks if the Reply row exists.
func ReplyExists(ctx context.Context, exec boil.ContextExecutor, replyID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"reply\" where \"replyID\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, replyID)
	}
	row := exec.QueryRowContext(ctx, sql, replyID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if reply exists")
	}

	return exists, nil
}

// Exists checks if the Reply row exists.
func (o *Reply) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ReplyExists(ctx, exec, o.ReplyID)
}
