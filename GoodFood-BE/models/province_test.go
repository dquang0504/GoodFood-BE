// Code generated by SQLBoiler 4.18.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testProvinces(t *testing.T) {
	t.Parallel()

	query := Provinces()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testProvincesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Province{}
	if err = randomize.Struct(seed, o, provinceDBTypes, true, provinceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Province struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Provinces().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testProvincesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Province{}
	if err = randomize.Struct(seed, o, provinceDBTypes, true, provinceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Province struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Provinces().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Provinces().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testProvincesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Province{}
	if err = randomize.Struct(seed, o, provinceDBTypes, true, provinceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Province struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ProvinceSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Provinces().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testProvincesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Province{}
	if err = randomize.Struct(seed, o, provinceDBTypes, true, provinceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Province struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := ProvinceExists(ctx, tx, o.ProvinceID)
	if err != nil {
		t.Errorf("Unable to check if Province exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ProvinceExists to return true, but got false.")
	}
}

func testProvincesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Province{}
	if err = randomize.Struct(seed, o, provinceDBTypes, true, provinceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Province struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	provinceFound, err := FindProvince(ctx, tx, o.ProvinceID)
	if err != nil {
		t.Error(err)
	}

	if provinceFound == nil {
		t.Error("want a record, got nil")
	}
}

func testProvincesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Province{}
	if err = randomize.Struct(seed, o, provinceDBTypes, true, provinceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Province struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Provinces().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testProvincesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Province{}
	if err = randomize.Struct(seed, o, provinceDBTypes, true, provinceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Province struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Provinces().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testProvincesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	provinceOne := &Province{}
	provinceTwo := &Province{}
	if err = randomize.Struct(seed, provinceOne, provinceDBTypes, false, provinceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Province struct: %s", err)
	}
	if err = randomize.Struct(seed, provinceTwo, provinceDBTypes, false, provinceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Province struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = provinceOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = provinceTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Provinces().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testProvincesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	provinceOne := &Province{}
	provinceTwo := &Province{}
	if err = randomize.Struct(seed, provinceOne, provinceDBTypes, false, provinceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Province struct: %s", err)
	}
	if err = randomize.Struct(seed, provinceTwo, provinceDBTypes, false, provinceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Province struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = provinceOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = provinceTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Provinces().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func provinceBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Province) error {
	*o = Province{}
	return nil
}

func provinceAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Province) error {
	*o = Province{}
	return nil
}

func provinceAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Province) error {
	*o = Province{}
	return nil
}

func provinceBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Province) error {
	*o = Province{}
	return nil
}

func provinceAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Province) error {
	*o = Province{}
	return nil
}

func provinceBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Province) error {
	*o = Province{}
	return nil
}

func provinceAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Province) error {
	*o = Province{}
	return nil
}

func provinceBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Province) error {
	*o = Province{}
	return nil
}

func provinceAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Province) error {
	*o = Province{}
	return nil
}

func testProvincesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Province{}
	o := &Province{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, provinceDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Province object: %s", err)
	}

	AddProvinceHook(boil.BeforeInsertHook, provinceBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	provinceBeforeInsertHooks = []ProvinceHook{}

	AddProvinceHook(boil.AfterInsertHook, provinceAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	provinceAfterInsertHooks = []ProvinceHook{}

	AddProvinceHook(boil.AfterSelectHook, provinceAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	provinceAfterSelectHooks = []ProvinceHook{}

	AddProvinceHook(boil.BeforeUpdateHook, provinceBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	provinceBeforeUpdateHooks = []ProvinceHook{}

	AddProvinceHook(boil.AfterUpdateHook, provinceAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	provinceAfterUpdateHooks = []ProvinceHook{}

	AddProvinceHook(boil.BeforeDeleteHook, provinceBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	provinceBeforeDeleteHooks = []ProvinceHook{}

	AddProvinceHook(boil.AfterDeleteHook, provinceAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	provinceAfterDeleteHooks = []ProvinceHook{}

	AddProvinceHook(boil.BeforeUpsertHook, provinceBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	provinceBeforeUpsertHooks = []ProvinceHook{}

	AddProvinceHook(boil.AfterUpsertHook, provinceAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	provinceAfterUpsertHooks = []ProvinceHook{}
}

func testProvincesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Province{}
	if err = randomize.Struct(seed, o, provinceDBTypes, true, provinceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Province struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Provinces().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testProvincesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Province{}
	if err = randomize.Struct(seed, o, provinceDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Province struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(provinceColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Provinces().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testProvinceToManyProvinceIDDistricts(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Province
	var b, c District

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, provinceDBTypes, true, provinceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Province struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, districtDBTypes, false, districtColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, districtDBTypes, false, districtColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.ProvinceID = a.ProvinceID
	c.ProvinceID = a.ProvinceID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.ProvinceIDDistricts().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.ProvinceID == b.ProvinceID {
			bFound = true
		}
		if v.ProvinceID == c.ProvinceID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := ProvinceSlice{&a}
	if err = a.L.LoadProvinceIDDistricts(ctx, tx, false, (*[]*Province)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ProvinceIDDistricts); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.ProvinceIDDistricts = nil
	if err = a.L.LoadProvinceIDDistricts(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ProvinceIDDistricts); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testProvinceToManyAddOpProvinceIDDistricts(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Province
	var b, c, d, e District

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, provinceDBTypes, false, strmangle.SetComplement(provincePrimaryKeyColumns, provinceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*District{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, districtDBTypes, false, strmangle.SetComplement(districtPrimaryKeyColumns, districtColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*District{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddProvinceIDDistricts(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ProvinceID != first.ProvinceID {
			t.Error("foreign key was wrong value", a.ProvinceID, first.ProvinceID)
		}
		if a.ProvinceID != second.ProvinceID {
			t.Error("foreign key was wrong value", a.ProvinceID, second.ProvinceID)
		}

		if first.R.ProvinceIDProvince != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.ProvinceIDProvince != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.ProvinceIDDistricts[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.ProvinceIDDistricts[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.ProvinceIDDistricts().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testProvincesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Province{}
	if err = randomize.Struct(seed, o, provinceDBTypes, true, provinceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Province struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testProvincesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Province{}
	if err = randomize.Struct(seed, o, provinceDBTypes, true, provinceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Province struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ProvinceSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testProvincesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Province{}
	if err = randomize.Struct(seed, o, provinceDBTypes, true, provinceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Province struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Provinces().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	provinceDBTypes = map[string]string{`ProvinceID`: `integer`, `ProvinceCode`: `integer`, `ProvinceName`: `character varying`}
	_               = bytes.MinRead
)

func testProvincesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(provincePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(provinceAllColumns) == len(provincePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Province{}
	if err = randomize.Struct(seed, o, provinceDBTypes, true, provinceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Province struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Provinces().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, provinceDBTypes, true, provincePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Province struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testProvincesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(provinceAllColumns) == len(provincePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Province{}
	if err = randomize.Struct(seed, o, provinceDBTypes, true, provinceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Province struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Provinces().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, provinceDBTypes, true, provincePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Province struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(provinceAllColumns, provincePrimaryKeyColumns) {
		fields = provinceAllColumns
	} else {
		fields = strmangle.SetComplement(
			provinceAllColumns,
			provincePrimaryKeyColumns,
		)
		fields = strmangle.SetComplement(fields, provinceGeneratedColumns)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := ProvinceSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testProvincesUpsert(t *testing.T) {
	t.Parallel()

	if len(provinceAllColumns) == len(provincePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Province{}
	if err = randomize.Struct(seed, &o, provinceDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Province struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Province: %s", err)
	}

	count, err := Provinces().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, provinceDBTypes, false, provincePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Province struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Province: %s", err)
	}

	count, err = Provinces().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
