// Code generated by SQLBoiler 4.18.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Invoice is an object representing the database table.
type Invoice struct {
	InvoiceID       int         `boil:"invoiceID" json:"invoiceID" toml:"invoiceID" yaml:"invoiceID"`
	ShippingFee     float32     `boil:"shippingFee" json:"shippingFee" toml:"shippingFee" yaml:"shippingFee"`
	TotalPrice      float32     `boil:"totalPrice" json:"totalPrice" toml:"totalPrice" yaml:"totalPrice"`
	CreatedAt       time.Time   `boil:"createdAt" json:"createdAt" toml:"createdAt" yaml:"createdAt"`
	PaymentMethod   bool        `boil:"paymentMethod" json:"paymentMethod" toml:"paymentMethod" yaml:"paymentMethod"`
	Status          bool        `boil:"status" json:"status" toml:"status" yaml:"status"`
	Note            null.String `boil:"note" json:"note,omitempty" toml:"note" yaml:"note,omitempty"`
	CancelReason    null.String `boil:"cancelReason" json:"cancelReason,omitempty" toml:"cancelReason" yaml:"cancelReason,omitempty"`
	ReceiveAddress  string      `boil:"receiveAddress" json:"receiveAddress" toml:"receiveAddress" yaml:"receiveAddress"`
	ReceiveName     string      `boil:"receiveName" json:"receiveName" toml:"receiveName" yaml:"receiveName"`
	ReceivePhone    string      `boil:"receivePhone" json:"receivePhone" toml:"receivePhone" yaml:"receivePhone"`
	AccountID       int         `boil:"accountID" json:"accountID" toml:"accountID" yaml:"accountID"`
	InvoiceStatusID int         `boil:"invoiceStatusID" json:"invoiceStatusID" toml:"invoiceStatusID" yaml:"invoiceStatusID"`

	R *invoiceR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L invoiceL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var InvoiceColumns = struct {
	InvoiceID       string
	ShippingFee     string
	TotalPrice      string
	CreatedAt       string
	PaymentMethod   string
	Status          string
	Note            string
	CancelReason    string
	ReceiveAddress  string
	ReceiveName     string
	ReceivePhone    string
	AccountID       string
	InvoiceStatusID string
}{
	InvoiceID:       "invoiceID",
	ShippingFee:     "shippingFee",
	TotalPrice:      "totalPrice",
	CreatedAt:       "createdAt",
	PaymentMethod:   "paymentMethod",
	Status:          "status",
	Note:            "note",
	CancelReason:    "cancelReason",
	ReceiveAddress:  "receiveAddress",
	ReceiveName:     "receiveName",
	ReceivePhone:    "receivePhone",
	AccountID:       "accountID",
	InvoiceStatusID: "invoiceStatusID",
}

var InvoiceTableColumns = struct {
	InvoiceID       string
	ShippingFee     string
	TotalPrice      string
	CreatedAt       string
	PaymentMethod   string
	Status          string
	Note            string
	CancelReason    string
	ReceiveAddress  string
	ReceiveName     string
	ReceivePhone    string
	AccountID       string
	InvoiceStatusID string
}{
	InvoiceID:       "invoice.invoiceID",
	ShippingFee:     "invoice.shippingFee",
	TotalPrice:      "invoice.totalPrice",
	CreatedAt:       "invoice.createdAt",
	PaymentMethod:   "invoice.paymentMethod",
	Status:          "invoice.status",
	Note:            "invoice.note",
	CancelReason:    "invoice.cancelReason",
	ReceiveAddress:  "invoice.receiveAddress",
	ReceiveName:     "invoice.receiveName",
	ReceivePhone:    "invoice.receivePhone",
	AccountID:       "invoice.accountID",
	InvoiceStatusID: "invoice.invoiceStatusID",
}

// Generated where

type whereHelperfloat32 struct{ field string }

func (w whereHelperfloat32) EQ(x float32) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperfloat32) NEQ(x float32) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelperfloat32) LT(x float32) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperfloat32) LTE(x float32) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperfloat32) GT(x float32) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperfloat32) GTE(x float32) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelperfloat32) IN(slice []float32) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperfloat32) NIN(slice []float32) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var InvoiceWhere = struct {
	InvoiceID       whereHelperint
	ShippingFee     whereHelperfloat32
	TotalPrice      whereHelperfloat32
	CreatedAt       whereHelpertime_Time
	PaymentMethod   whereHelperbool
	Status          whereHelperbool
	Note            whereHelpernull_String
	CancelReason    whereHelpernull_String
	ReceiveAddress  whereHelperstring
	ReceiveName     whereHelperstring
	ReceivePhone    whereHelperstring
	AccountID       whereHelperint
	InvoiceStatusID whereHelperint
}{
	InvoiceID:       whereHelperint{field: "\"invoice\".\"invoiceID\""},
	ShippingFee:     whereHelperfloat32{field: "\"invoice\".\"shippingFee\""},
	TotalPrice:      whereHelperfloat32{field: "\"invoice\".\"totalPrice\""},
	CreatedAt:       whereHelpertime_Time{field: "\"invoice\".\"createdAt\""},
	PaymentMethod:   whereHelperbool{field: "\"invoice\".\"paymentMethod\""},
	Status:          whereHelperbool{field: "\"invoice\".\"status\""},
	Note:            whereHelpernull_String{field: "\"invoice\".\"note\""},
	CancelReason:    whereHelpernull_String{field: "\"invoice\".\"cancelReason\""},
	ReceiveAddress:  whereHelperstring{field: "\"invoice\".\"receiveAddress\""},
	ReceiveName:     whereHelperstring{field: "\"invoice\".\"receiveName\""},
	ReceivePhone:    whereHelperstring{field: "\"invoice\".\"receivePhone\""},
	AccountID:       whereHelperint{field: "\"invoice\".\"accountID\""},
	InvoiceStatusID: whereHelperint{field: "\"invoice\".\"invoiceStatusID\""},
}

// InvoiceRels is where relationship names are stored.
var InvoiceRels = struct {
	AccountIDAccount             string
	InvoiceStatusIDInvoiceStatus string
	InvoiceIDInvoiceDetails      string
	InvoiceIDReviews             string
	InvoiceIDTransactions        string
}{
	AccountIDAccount:             "AccountIDAccount",
	InvoiceStatusIDInvoiceStatus: "InvoiceStatusIDInvoiceStatus",
	InvoiceIDInvoiceDetails:      "InvoiceIDInvoiceDetails",
	InvoiceIDReviews:             "InvoiceIDReviews",
	InvoiceIDTransactions:        "InvoiceIDTransactions",
}

// invoiceR is where relationships are stored.
type invoiceR struct {
	AccountIDAccount             *Account           `boil:"AccountIDAccount" json:"AccountIDAccount" toml:"AccountIDAccount" yaml:"AccountIDAccount"`
	InvoiceStatusIDInvoiceStatus *InvoiceStatus     `boil:"InvoiceStatusIDInvoiceStatus" json:"InvoiceStatusIDInvoiceStatus" toml:"InvoiceStatusIDInvoiceStatus" yaml:"InvoiceStatusIDInvoiceStatus"`
	InvoiceIDInvoiceDetails      InvoiceDetailSlice `boil:"InvoiceIDInvoiceDetails" json:"InvoiceIDInvoiceDetails" toml:"InvoiceIDInvoiceDetails" yaml:"InvoiceIDInvoiceDetails"`
	InvoiceIDReviews             ReviewSlice        `boil:"InvoiceIDReviews" json:"InvoiceIDReviews" toml:"InvoiceIDReviews" yaml:"InvoiceIDReviews"`
	InvoiceIDTransactions        TransactionSlice   `boil:"InvoiceIDTransactions" json:"InvoiceIDTransactions" toml:"InvoiceIDTransactions" yaml:"InvoiceIDTransactions"`
}

// NewStruct creates a new relationship struct
func (*invoiceR) NewStruct() *invoiceR {
	return &invoiceR{}
}

func (r *invoiceR) GetAccountIDAccount() *Account {
	if r == nil {
		return nil
	}
	return r.AccountIDAccount
}

func (r *invoiceR) GetInvoiceStatusIDInvoiceStatus() *InvoiceStatus {
	if r == nil {
		return nil
	}
	return r.InvoiceStatusIDInvoiceStatus
}

func (r *invoiceR) GetInvoiceIDInvoiceDetails() InvoiceDetailSlice {
	if r == nil {
		return nil
	}
	return r.InvoiceIDInvoiceDetails
}

func (r *invoiceR) GetInvoiceIDReviews() ReviewSlice {
	if r == nil {
		return nil
	}
	return r.InvoiceIDReviews
}

func (r *invoiceR) GetInvoiceIDTransactions() TransactionSlice {
	if r == nil {
		return nil
	}
	return r.InvoiceIDTransactions
}

// invoiceL is where Load methods for each relationship are stored.
type invoiceL struct{}

var (
	invoiceAllColumns            = []string{"invoiceID", "shippingFee", "totalPrice", "createdAt", "paymentMethod", "status", "note", "cancelReason", "receiveAddress", "receiveName", "receivePhone", "accountID", "invoiceStatusID"}
	invoiceColumnsWithoutDefault = []string{"shippingFee", "totalPrice", "createdAt", "paymentMethod", "status", "receiveAddress", "receiveName", "receivePhone", "accountID", "invoiceStatusID"}
	invoiceColumnsWithDefault    = []string{"invoiceID", "note", "cancelReason"}
	invoicePrimaryKeyColumns     = []string{"invoiceID"}
	invoiceGeneratedColumns      = []string{"invoiceID"}
)

type (
	// InvoiceSlice is an alias for a slice of pointers to Invoice.
	// This should almost always be used instead of []Invoice.
	InvoiceSlice []*Invoice
	// InvoiceHook is the signature for custom Invoice hook methods
	InvoiceHook func(context.Context, boil.ContextExecutor, *Invoice) error

	invoiceQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	invoiceType                 = reflect.TypeOf(&Invoice{})
	invoiceMapping              = queries.MakeStructMapping(invoiceType)
	invoicePrimaryKeyMapping, _ = queries.BindMapping(invoiceType, invoiceMapping, invoicePrimaryKeyColumns)
	invoiceInsertCacheMut       sync.RWMutex
	invoiceInsertCache          = make(map[string]insertCache)
	invoiceUpdateCacheMut       sync.RWMutex
	invoiceUpdateCache          = make(map[string]updateCache)
	invoiceUpsertCacheMut       sync.RWMutex
	invoiceUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var invoiceAfterSelectMu sync.Mutex
var invoiceAfterSelectHooks []InvoiceHook

var invoiceBeforeInsertMu sync.Mutex
var invoiceBeforeInsertHooks []InvoiceHook
var invoiceAfterInsertMu sync.Mutex
var invoiceAfterInsertHooks []InvoiceHook

var invoiceBeforeUpdateMu sync.Mutex
var invoiceBeforeUpdateHooks []InvoiceHook
var invoiceAfterUpdateMu sync.Mutex
var invoiceAfterUpdateHooks []InvoiceHook

var invoiceBeforeDeleteMu sync.Mutex
var invoiceBeforeDeleteHooks []InvoiceHook
var invoiceAfterDeleteMu sync.Mutex
var invoiceAfterDeleteHooks []InvoiceHook

var invoiceBeforeUpsertMu sync.Mutex
var invoiceBeforeUpsertHooks []InvoiceHook
var invoiceAfterUpsertMu sync.Mutex
var invoiceAfterUpsertHooks []InvoiceHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Invoice) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range invoiceAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Invoice) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range invoiceBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Invoice) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range invoiceAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Invoice) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range invoiceBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Invoice) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range invoiceAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Invoice) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range invoiceBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Invoice) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range invoiceAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Invoice) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range invoiceBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Invoice) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range invoiceAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddInvoiceHook registers your hook function for all future operations.
func AddInvoiceHook(hookPoint boil.HookPoint, invoiceHook InvoiceHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		invoiceAfterSelectMu.Lock()
		invoiceAfterSelectHooks = append(invoiceAfterSelectHooks, invoiceHook)
		invoiceAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		invoiceBeforeInsertMu.Lock()
		invoiceBeforeInsertHooks = append(invoiceBeforeInsertHooks, invoiceHook)
		invoiceBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		invoiceAfterInsertMu.Lock()
		invoiceAfterInsertHooks = append(invoiceAfterInsertHooks, invoiceHook)
		invoiceAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		invoiceBeforeUpdateMu.Lock()
		invoiceBeforeUpdateHooks = append(invoiceBeforeUpdateHooks, invoiceHook)
		invoiceBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		invoiceAfterUpdateMu.Lock()
		invoiceAfterUpdateHooks = append(invoiceAfterUpdateHooks, invoiceHook)
		invoiceAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		invoiceBeforeDeleteMu.Lock()
		invoiceBeforeDeleteHooks = append(invoiceBeforeDeleteHooks, invoiceHook)
		invoiceBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		invoiceAfterDeleteMu.Lock()
		invoiceAfterDeleteHooks = append(invoiceAfterDeleteHooks, invoiceHook)
		invoiceAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		invoiceBeforeUpsertMu.Lock()
		invoiceBeforeUpsertHooks = append(invoiceBeforeUpsertHooks, invoiceHook)
		invoiceBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		invoiceAfterUpsertMu.Lock()
		invoiceAfterUpsertHooks = append(invoiceAfterUpsertHooks, invoiceHook)
		invoiceAfterUpsertMu.Unlock()
	}
}

// One returns a single invoice record from the query.
func (q invoiceQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Invoice, error) {
	o := &Invoice{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for invoice")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Invoice records from the query.
func (q invoiceQuery) All(ctx context.Context, exec boil.ContextExecutor) (InvoiceSlice, error) {
	var o []*Invoice

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Invoice slice")
	}

	if len(invoiceAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Invoice records in the query.
func (q invoiceQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count invoice rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q invoiceQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if invoice exists")
	}

	return count > 0, nil
}

// AccountIDAccount pointed to by the foreign key.
func (o *Invoice) AccountIDAccount(mods ...qm.QueryMod) accountQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"accountID\" = ?", o.AccountID),
	}

	queryMods = append(queryMods, mods...)

	return Accounts(queryMods...)
}

// InvoiceStatusIDInvoiceStatus pointed to by the foreign key.
func (o *Invoice) InvoiceStatusIDInvoiceStatus(mods ...qm.QueryMod) invoiceStatusQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"invoiceStatusID\" = ?", o.InvoiceStatusID),
	}

	queryMods = append(queryMods, mods...)

	return InvoiceStatuses(queryMods...)
}

// InvoiceIDInvoiceDetails retrieves all the invoice_detail's InvoiceDetails with an executor via invoiceID column.
func (o *Invoice) InvoiceIDInvoiceDetails(mods ...qm.QueryMod) invoiceDetailQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"invoice_detail\".\"invoiceID\"=?", o.InvoiceID),
	)

	return InvoiceDetails(queryMods...)
}

// InvoiceIDReviews retrieves all the review's Reviews with an executor via invoiceID column.
func (o *Invoice) InvoiceIDReviews(mods ...qm.QueryMod) reviewQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"review\".\"invoiceID\"=?", o.InvoiceID),
	)

	return Reviews(queryMods...)
}

// InvoiceIDTransactions retrieves all the transaction's Transactions with an executor via invoiceID column.
func (o *Invoice) InvoiceIDTransactions(mods ...qm.QueryMod) transactionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"transaction\".\"invoiceID\"=?", o.InvoiceID),
	)

	return Transactions(queryMods...)
}

// LoadAccountIDAccount allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (invoiceL) LoadAccountIDAccount(ctx context.Context, e boil.ContextExecutor, singular bool, maybeInvoice interface{}, mods queries.Applicator) error {
	var slice []*Invoice
	var object *Invoice

	if singular {
		var ok bool
		object, ok = maybeInvoice.(*Invoice)
		if !ok {
			object = new(Invoice)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeInvoice)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeInvoice))
			}
		}
	} else {
		s, ok := maybeInvoice.(*[]*Invoice)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeInvoice)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeInvoice))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &invoiceR{}
		}
		args[object.AccountID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &invoiceR{}
			}

			args[obj.AccountID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`account`),
		qm.WhereIn(`account.accountID in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Account")
	}

	var resultSlice []*Account
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Account")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for account")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for account")
	}

	if len(accountAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.AccountIDAccount = foreign
		if foreign.R == nil {
			foreign.R = &accountR{}
		}
		foreign.R.AccountIDInvoices = append(foreign.R.AccountIDInvoices, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.AccountID == foreign.AccountID {
				local.R.AccountIDAccount = foreign
				if foreign.R == nil {
					foreign.R = &accountR{}
				}
				foreign.R.AccountIDInvoices = append(foreign.R.AccountIDInvoices, local)
				break
			}
		}
	}

	return nil
}

// LoadInvoiceStatusIDInvoiceStatus allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (invoiceL) LoadInvoiceStatusIDInvoiceStatus(ctx context.Context, e boil.ContextExecutor, singular bool, maybeInvoice interface{}, mods queries.Applicator) error {
	var slice []*Invoice
	var object *Invoice

	if singular {
		var ok bool
		object, ok = maybeInvoice.(*Invoice)
		if !ok {
			object = new(Invoice)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeInvoice)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeInvoice))
			}
		}
	} else {
		s, ok := maybeInvoice.(*[]*Invoice)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeInvoice)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeInvoice))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &invoiceR{}
		}
		args[object.InvoiceStatusID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &invoiceR{}
			}

			args[obj.InvoiceStatusID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`invoice_status`),
		qm.WhereIn(`invoice_status.invoiceStatusID in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load InvoiceStatus")
	}

	var resultSlice []*InvoiceStatus
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice InvoiceStatus")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for invoice_status")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for invoice_status")
	}

	if len(invoiceStatusAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.InvoiceStatusIDInvoiceStatus = foreign
		if foreign.R == nil {
			foreign.R = &invoiceStatusR{}
		}
		foreign.R.InvoiceStatusIDInvoices = append(foreign.R.InvoiceStatusIDInvoices, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.InvoiceStatusID == foreign.InvoiceStatusID {
				local.R.InvoiceStatusIDInvoiceStatus = foreign
				if foreign.R == nil {
					foreign.R = &invoiceStatusR{}
				}
				foreign.R.InvoiceStatusIDInvoices = append(foreign.R.InvoiceStatusIDInvoices, local)
				break
			}
		}
	}

	return nil
}

// LoadInvoiceIDInvoiceDetails allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (invoiceL) LoadInvoiceIDInvoiceDetails(ctx context.Context, e boil.ContextExecutor, singular bool, maybeInvoice interface{}, mods queries.Applicator) error {
	var slice []*Invoice
	var object *Invoice

	if singular {
		var ok bool
		object, ok = maybeInvoice.(*Invoice)
		if !ok {
			object = new(Invoice)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeInvoice)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeInvoice))
			}
		}
	} else {
		s, ok := maybeInvoice.(*[]*Invoice)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeInvoice)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeInvoice))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &invoiceR{}
		}
		args[object.InvoiceID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &invoiceR{}
			}
			args[obj.InvoiceID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`invoice_detail`),
		qm.WhereIn(`invoice_detail.invoiceID in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load invoice_detail")
	}

	var resultSlice []*InvoiceDetail
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice invoice_detail")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on invoice_detail")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for invoice_detail")
	}

	if len(invoiceDetailAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.InvoiceIDInvoiceDetails = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &invoiceDetailR{}
			}
			foreign.R.InvoiceIDInvoice = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.InvoiceID == foreign.InvoiceID {
				local.R.InvoiceIDInvoiceDetails = append(local.R.InvoiceIDInvoiceDetails, foreign)
				if foreign.R == nil {
					foreign.R = &invoiceDetailR{}
				}
				foreign.R.InvoiceIDInvoice = local
				break
			}
		}
	}

	return nil
}

// LoadInvoiceIDReviews allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (invoiceL) LoadInvoiceIDReviews(ctx context.Context, e boil.ContextExecutor, singular bool, maybeInvoice interface{}, mods queries.Applicator) error {
	var slice []*Invoice
	var object *Invoice

	if singular {
		var ok bool
		object, ok = maybeInvoice.(*Invoice)
		if !ok {
			object = new(Invoice)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeInvoice)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeInvoice))
			}
		}
	} else {
		s, ok := maybeInvoice.(*[]*Invoice)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeInvoice)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeInvoice))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &invoiceR{}
		}
		args[object.InvoiceID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &invoiceR{}
			}
			args[obj.InvoiceID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`review`),
		qm.WhereIn(`review.invoiceID in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load review")
	}

	var resultSlice []*Review
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice review")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on review")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for review")
	}

	if len(reviewAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.InvoiceIDReviews = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &reviewR{}
			}
			foreign.R.InvoiceIDInvoice = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.InvoiceID == foreign.InvoiceID {
				local.R.InvoiceIDReviews = append(local.R.InvoiceIDReviews, foreign)
				if foreign.R == nil {
					foreign.R = &reviewR{}
				}
				foreign.R.InvoiceIDInvoice = local
				break
			}
		}
	}

	return nil
}

// LoadInvoiceIDTransactions allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (invoiceL) LoadInvoiceIDTransactions(ctx context.Context, e boil.ContextExecutor, singular bool, maybeInvoice interface{}, mods queries.Applicator) error {
	var slice []*Invoice
	var object *Invoice

	if singular {
		var ok bool
		object, ok = maybeInvoice.(*Invoice)
		if !ok {
			object = new(Invoice)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeInvoice)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeInvoice))
			}
		}
	} else {
		s, ok := maybeInvoice.(*[]*Invoice)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeInvoice)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeInvoice))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &invoiceR{}
		}
		args[object.InvoiceID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &invoiceR{}
			}
			args[obj.InvoiceID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`transaction`),
		qm.WhereIn(`transaction.invoiceID in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load transaction")
	}

	var resultSlice []*Transaction
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice transaction")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on transaction")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for transaction")
	}

	if len(transactionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.InvoiceIDTransactions = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &transactionR{}
			}
			foreign.R.InvoiceIDInvoice = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.InvoiceID == foreign.InvoiceID {
				local.R.InvoiceIDTransactions = append(local.R.InvoiceIDTransactions, foreign)
				if foreign.R == nil {
					foreign.R = &transactionR{}
				}
				foreign.R.InvoiceIDInvoice = local
				break
			}
		}
	}

	return nil
}

// SetAccountIDAccount of the invoice to the related item.
// Sets o.R.AccountIDAccount to related.
// Adds o to related.R.AccountIDInvoices.
func (o *Invoice) SetAccountIDAccount(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Account) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"invoice\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"accountID"}),
		strmangle.WhereClause("\"", "\"", 2, invoicePrimaryKeyColumns),
	)
	values := []interface{}{related.AccountID, o.InvoiceID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.AccountID = related.AccountID
	if o.R == nil {
		o.R = &invoiceR{
			AccountIDAccount: related,
		}
	} else {
		o.R.AccountIDAccount = related
	}

	if related.R == nil {
		related.R = &accountR{
			AccountIDInvoices: InvoiceSlice{o},
		}
	} else {
		related.R.AccountIDInvoices = append(related.R.AccountIDInvoices, o)
	}

	return nil
}

// SetInvoiceStatusIDInvoiceStatus of the invoice to the related item.
// Sets o.R.InvoiceStatusIDInvoiceStatus to related.
// Adds o to related.R.InvoiceStatusIDInvoices.
func (o *Invoice) SetInvoiceStatusIDInvoiceStatus(ctx context.Context, exec boil.ContextExecutor, insert bool, related *InvoiceStatus) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"invoice\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"invoiceStatusID"}),
		strmangle.WhereClause("\"", "\"", 2, invoicePrimaryKeyColumns),
	)
	values := []interface{}{related.InvoiceStatusID, o.InvoiceID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.InvoiceStatusID = related.InvoiceStatusID
	if o.R == nil {
		o.R = &invoiceR{
			InvoiceStatusIDInvoiceStatus: related,
		}
	} else {
		o.R.InvoiceStatusIDInvoiceStatus = related
	}

	if related.R == nil {
		related.R = &invoiceStatusR{
			InvoiceStatusIDInvoices: InvoiceSlice{o},
		}
	} else {
		related.R.InvoiceStatusIDInvoices = append(related.R.InvoiceStatusIDInvoices, o)
	}

	return nil
}

// AddInvoiceIDInvoiceDetails adds the given related objects to the existing relationships
// of the invoice, optionally inserting them as new records.
// Appends related to o.R.InvoiceIDInvoiceDetails.
// Sets related.R.InvoiceIDInvoice appropriately.
func (o *Invoice) AddInvoiceIDInvoiceDetails(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*InvoiceDetail) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.InvoiceID = o.InvoiceID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"invoice_detail\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"invoiceID"}),
				strmangle.WhereClause("\"", "\"", 2, invoiceDetailPrimaryKeyColumns),
			)
			values := []interface{}{o.InvoiceID, rel.InvoiceDetailID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.InvoiceID = o.InvoiceID
		}
	}

	if o.R == nil {
		o.R = &invoiceR{
			InvoiceIDInvoiceDetails: related,
		}
	} else {
		o.R.InvoiceIDInvoiceDetails = append(o.R.InvoiceIDInvoiceDetails, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &invoiceDetailR{
				InvoiceIDInvoice: o,
			}
		} else {
			rel.R.InvoiceIDInvoice = o
		}
	}
	return nil
}

// AddInvoiceIDReviews adds the given related objects to the existing relationships
// of the invoice, optionally inserting them as new records.
// Appends related to o.R.InvoiceIDReviews.
// Sets related.R.InvoiceIDInvoice appropriately.
func (o *Invoice) AddInvoiceIDReviews(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Review) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.InvoiceID = o.InvoiceID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"review\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"invoiceID"}),
				strmangle.WhereClause("\"", "\"", 2, reviewPrimaryKeyColumns),
			)
			values := []interface{}{o.InvoiceID, rel.ReviewID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.InvoiceID = o.InvoiceID
		}
	}

	if o.R == nil {
		o.R = &invoiceR{
			InvoiceIDReviews: related,
		}
	} else {
		o.R.InvoiceIDReviews = append(o.R.InvoiceIDReviews, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &reviewR{
				InvoiceIDInvoice: o,
			}
		} else {
			rel.R.InvoiceIDInvoice = o
		}
	}
	return nil
}

// AddInvoiceIDTransactions adds the given related objects to the existing relationships
// of the invoice, optionally inserting them as new records.
// Appends related to o.R.InvoiceIDTransactions.
// Sets related.R.InvoiceIDInvoice appropriately.
func (o *Invoice) AddInvoiceIDTransactions(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Transaction) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.InvoiceID = o.InvoiceID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"transaction\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"invoiceID"}),
				strmangle.WhereClause("\"", "\"", 2, transactionPrimaryKeyColumns),
			)
			values := []interface{}{o.InvoiceID, rel.TransactionID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.InvoiceID = o.InvoiceID
		}
	}

	if o.R == nil {
		o.R = &invoiceR{
			InvoiceIDTransactions: related,
		}
	} else {
		o.R.InvoiceIDTransactions = append(o.R.InvoiceIDTransactions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &transactionR{
				InvoiceIDInvoice: o,
			}
		} else {
			rel.R.InvoiceIDInvoice = o
		}
	}
	return nil
}

// Invoices retrieves all the records using an executor.
func Invoices(mods ...qm.QueryMod) invoiceQuery {
	mods = append(mods, qm.From("\"invoice\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"invoice\".*"})
	}

	return invoiceQuery{q}
}

// FindInvoice retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindInvoice(ctx context.Context, exec boil.ContextExecutor, invoiceID int, selectCols ...string) (*Invoice, error) {
	invoiceObj := &Invoice{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"invoice\" where \"invoiceID\"=$1", sel,
	)

	q := queries.Raw(query, invoiceID)

	err := q.Bind(ctx, exec, invoiceObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from invoice")
	}

	if err = invoiceObj.doAfterSelectHooks(ctx, exec); err != nil {
		return invoiceObj, err
	}

	return invoiceObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Invoice) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no invoice provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(invoiceColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	invoiceInsertCacheMut.RLock()
	cache, cached := invoiceInsertCache[key]
	invoiceInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			invoiceAllColumns,
			invoiceColumnsWithDefault,
			invoiceColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, invoiceGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(invoiceType, invoiceMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(invoiceType, invoiceMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"invoice\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"invoice\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into invoice")
	}

	if !cached {
		invoiceInsertCacheMut.Lock()
		invoiceInsertCache[key] = cache
		invoiceInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Invoice.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Invoice) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	invoiceUpdateCacheMut.RLock()
	cache, cached := invoiceUpdateCache[key]
	invoiceUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			invoiceAllColumns,
			invoicePrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, invoiceGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update invoice, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"invoice\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, invoicePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(invoiceType, invoiceMapping, append(wl, invoicePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update invoice row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for invoice")
	}

	if !cached {
		invoiceUpdateCacheMut.Lock()
		invoiceUpdateCache[key] = cache
		invoiceUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q invoiceQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for invoice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for invoice")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o InvoiceSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), invoicePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"invoice\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, invoicePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in invoice slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all invoice")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Invoice) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no invoice provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(invoiceColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	invoiceUpsertCacheMut.RLock()
	cache, cached := invoiceUpsertCache[key]
	invoiceUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			invoiceAllColumns,
			invoiceColumnsWithDefault,
			invoiceColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			invoiceAllColumns,
			invoicePrimaryKeyColumns,
		)

		insert = strmangle.SetComplement(insert, invoiceGeneratedColumns)
		update = strmangle.SetComplement(update, invoiceGeneratedColumns)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert invoice, could not build update column list")
		}

		ret := strmangle.SetComplement(invoiceAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(invoicePrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert invoice, could not build conflict column list")
			}

			conflict = make([]string, len(invoicePrimaryKeyColumns))
			copy(conflict, invoicePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"invoice\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(invoiceType, invoiceMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(invoiceType, invoiceMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert invoice")
	}

	if !cached {
		invoiceUpsertCacheMut.Lock()
		invoiceUpsertCache[key] = cache
		invoiceUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Invoice record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Invoice) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Invoice provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), invoicePrimaryKeyMapping)
	sql := "DELETE FROM \"invoice\" WHERE \"invoiceID\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from invoice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for invoice")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q invoiceQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no invoiceQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from invoice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for invoice")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o InvoiceSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(invoiceBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), invoicePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"invoice\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, invoicePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from invoice slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for invoice")
	}

	if len(invoiceAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Invoice) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindInvoice(ctx, exec, o.InvoiceID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *InvoiceSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := InvoiceSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), invoicePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"invoice\".* FROM \"invoice\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, invoicePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in InvoiceSlice")
	}

	*o = slice

	return nil
}

// InvoiceExists checks if the Invoice row exists.
func InvoiceExists(ctx context.Context, exec boil.ContextExecutor, invoiceID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"invoice\" where \"invoiceID\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, invoiceID)
	}
	row := exec.QueryRowContext(ctx, sql, invoiceID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if invoice exists")
	}

	return exists, nil
}

// Exists checks if the Invoice row exists.
func (o *Invoice) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return InvoiceExists(ctx, exec, o.InvoiceID)
}
