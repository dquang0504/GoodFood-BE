// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("AddressToAccountUsingAccountIDAccount", testAddressToOneAccountUsingAccountIDAccount)
	t.Run("CartDetailToAccountUsingAccountIDAccount", testCartDetailToOneAccountUsingAccountIDAccount)
	t.Run("CartDetailToProductUsingProductIDProduct", testCartDetailToOneProductUsingProductIDProduct)
	t.Run("DistrictToProvinceUsingProvinceIDProvince", testDistrictToOneProvinceUsingProvinceIDProvince)
	t.Run("InvoiceToAccountUsingAccountIDAccount", testInvoiceToOneAccountUsingAccountIDAccount)
	t.Run("InvoiceToInvoiceStatusUsingInvoiceStatusIDInvoiceStatus", testInvoiceToOneInvoiceStatusUsingInvoiceStatusIDInvoiceStatus)
	t.Run("InvoiceDetailToInvoiceUsingInvoiceIDInvoice", testInvoiceDetailToOneInvoiceUsingInvoiceIDInvoice)
	t.Run("InvoiceDetailToProductUsingProductIDProduct", testInvoiceDetailToOneProductUsingProductIDProduct)
	t.Run("OauthAccountToAccountUsingAccountIDAccount", testOauthAccountToOneAccountUsingAccountIDAccount)
	t.Run("ProductToProductTypeUsingProductTypeIDProductType", testProductToOneProductTypeUsingProductTypeIDProductType)
	t.Run("ProductImageToProductUsingProductIDProduct", testProductImageToOneProductUsingProductIDProduct)
	t.Run("ReplyToAccountUsingAccountIDAccount", testReplyToOneAccountUsingAccountIDAccount)
	t.Run("ReplyToReviewUsingReviewIDReview", testReplyToOneReviewUsingReviewIDReview)
	t.Run("ReviewToAccountUsingAccountIDAccount", testReviewToOneAccountUsingAccountIDAccount)
	t.Run("ReviewToInvoiceUsingInvoiceIDInvoice", testReviewToOneInvoiceUsingInvoiceIDInvoice)
	t.Run("ReviewToProductUsingProductIDProduct", testReviewToOneProductUsingProductIDProduct)
	t.Run("ReviewImageToReviewUsingReviewIDReview", testReviewImageToOneReviewUsingReviewIDReview)
	t.Run("TransactionToAccountUsingAccountIDAccount", testTransactionToOneAccountUsingAccountIDAccount)
	t.Run("TransactionToInvoiceUsingInvoiceIDInvoice", testTransactionToOneInvoiceUsingInvoiceIDInvoice)
	t.Run("WardToDistrictUsingDistrictIDDistrict", testWardToOneDistrictUsingDistrictIDDistrict)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("AccountToAccountIDAddresses", testAccountToManyAccountIDAddresses)
	t.Run("AccountToAccountIDCartDetails", testAccountToManyAccountIDCartDetails)
	t.Run("AccountToAccountIDInvoices", testAccountToManyAccountIDInvoices)
	t.Run("AccountToAccountIDOauthAccounts", testAccountToManyAccountIDOauthAccounts)
	t.Run("AccountToAccountIDReplies", testAccountToManyAccountIDReplies)
	t.Run("AccountToAccountIDReviews", testAccountToManyAccountIDReviews)
	t.Run("AccountToAccountIDTransactions", testAccountToManyAccountIDTransactions)
	t.Run("DistrictToDistrictIDWards", testDistrictToManyDistrictIDWards)
	t.Run("InvoiceToInvoiceIDInvoiceDetails", testInvoiceToManyInvoiceIDInvoiceDetails)
	t.Run("InvoiceToInvoiceIDReviews", testInvoiceToManyInvoiceIDReviews)
	t.Run("InvoiceToInvoiceIDTransactions", testInvoiceToManyInvoiceIDTransactions)
	t.Run("InvoiceStatusToInvoiceStatusIDInvoices", testInvoiceStatusToManyInvoiceStatusIDInvoices)
	t.Run("ProductToProductIDCartDetails", testProductToManyProductIDCartDetails)
	t.Run("ProductToProductIDInvoiceDetails", testProductToManyProductIDInvoiceDetails)
	t.Run("ProductToProductIDProductImages", testProductToManyProductIDProductImages)
	t.Run("ProductToProductIDReviews", testProductToManyProductIDReviews)
	t.Run("ProductTypeToProductTypeIDProducts", testProductTypeToManyProductTypeIDProducts)
	t.Run("ProvinceToProvinceIDDistricts", testProvinceToManyProvinceIDDistricts)
	t.Run("ReviewToReviewIDReplies", testReviewToManyReviewIDReplies)
	t.Run("ReviewToReviewIDReviewImages", testReviewToManyReviewIDReviewImages)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("AddressToAccountUsingAccountIDAddresses", testAddressToOneSetOpAccountUsingAccountIDAccount)
	t.Run("CartDetailToAccountUsingAccountIDCartDetails", testCartDetailToOneSetOpAccountUsingAccountIDAccount)
	t.Run("CartDetailToProductUsingProductIDCartDetails", testCartDetailToOneSetOpProductUsingProductIDProduct)
	t.Run("DistrictToProvinceUsingProvinceIDDistricts", testDistrictToOneSetOpProvinceUsingProvinceIDProvince)
	t.Run("InvoiceToAccountUsingAccountIDInvoices", testInvoiceToOneSetOpAccountUsingAccountIDAccount)
	t.Run("InvoiceToInvoiceStatusUsingInvoiceStatusIDInvoices", testInvoiceToOneSetOpInvoiceStatusUsingInvoiceStatusIDInvoiceStatus)
	t.Run("InvoiceDetailToInvoiceUsingInvoiceIDInvoiceDetails", testInvoiceDetailToOneSetOpInvoiceUsingInvoiceIDInvoice)
	t.Run("InvoiceDetailToProductUsingProductIDInvoiceDetails", testInvoiceDetailToOneSetOpProductUsingProductIDProduct)
	t.Run("OauthAccountToAccountUsingAccountIDOauthAccounts", testOauthAccountToOneSetOpAccountUsingAccountIDAccount)
	t.Run("ProductToProductTypeUsingProductTypeIDProducts", testProductToOneSetOpProductTypeUsingProductTypeIDProductType)
	t.Run("ProductImageToProductUsingProductIDProductImages", testProductImageToOneSetOpProductUsingProductIDProduct)
	t.Run("ReplyToAccountUsingAccountIDReplies", testReplyToOneSetOpAccountUsingAccountIDAccount)
	t.Run("ReplyToReviewUsingReviewIDReplies", testReplyToOneSetOpReviewUsingReviewIDReview)
	t.Run("ReviewToAccountUsingAccountIDReviews", testReviewToOneSetOpAccountUsingAccountIDAccount)
	t.Run("ReviewToInvoiceUsingInvoiceIDReviews", testReviewToOneSetOpInvoiceUsingInvoiceIDInvoice)
	t.Run("ReviewToProductUsingProductIDReviews", testReviewToOneSetOpProductUsingProductIDProduct)
	t.Run("ReviewImageToReviewUsingReviewIDReviewImages", testReviewImageToOneSetOpReviewUsingReviewIDReview)
	t.Run("TransactionToAccountUsingAccountIDTransactions", testTransactionToOneSetOpAccountUsingAccountIDAccount)
	t.Run("TransactionToInvoiceUsingInvoiceIDTransactions", testTransactionToOneSetOpInvoiceUsingInvoiceIDInvoice)
	t.Run("WardToDistrictUsingDistrictIDWards", testWardToOneSetOpDistrictUsingDistrictIDDistrict)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("AccountToAccountIDAddresses", testAccountToManyAddOpAccountIDAddresses)
	t.Run("AccountToAccountIDCartDetails", testAccountToManyAddOpAccountIDCartDetails)
	t.Run("AccountToAccountIDInvoices", testAccountToManyAddOpAccountIDInvoices)
	t.Run("AccountToAccountIDOauthAccounts", testAccountToManyAddOpAccountIDOauthAccounts)
	t.Run("AccountToAccountIDReplies", testAccountToManyAddOpAccountIDReplies)
	t.Run("AccountToAccountIDReviews", testAccountToManyAddOpAccountIDReviews)
	t.Run("AccountToAccountIDTransactions", testAccountToManyAddOpAccountIDTransactions)
	t.Run("DistrictToDistrictIDWards", testDistrictToManyAddOpDistrictIDWards)
	t.Run("InvoiceToInvoiceIDInvoiceDetails", testInvoiceToManyAddOpInvoiceIDInvoiceDetails)
	t.Run("InvoiceToInvoiceIDReviews", testInvoiceToManyAddOpInvoiceIDReviews)
	t.Run("InvoiceToInvoiceIDTransactions", testInvoiceToManyAddOpInvoiceIDTransactions)
	t.Run("InvoiceStatusToInvoiceStatusIDInvoices", testInvoiceStatusToManyAddOpInvoiceStatusIDInvoices)
	t.Run("ProductToProductIDCartDetails", testProductToManyAddOpProductIDCartDetails)
	t.Run("ProductToProductIDInvoiceDetails", testProductToManyAddOpProductIDInvoiceDetails)
	t.Run("ProductToProductIDProductImages", testProductToManyAddOpProductIDProductImages)
	t.Run("ProductToProductIDReviews", testProductToManyAddOpProductIDReviews)
	t.Run("ProductTypeToProductTypeIDProducts", testProductTypeToManyAddOpProductTypeIDProducts)
	t.Run("ProvinceToProvinceIDDistricts", testProvinceToManyAddOpProvinceIDDistricts)
	t.Run("ReviewToReviewIDReplies", testReviewToManyAddOpReviewIDReplies)
	t.Run("ReviewToReviewIDReviewImages", testReviewToManyAddOpReviewIDReviewImages)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {}
