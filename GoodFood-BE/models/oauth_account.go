// Code generated by SQLBoiler 4.18.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// OauthAccount is an object representing the database table.
type OauthAccount struct {
	OauthID        int       `boil:"oauthID" json:"oauthID" toml:"oauthID" yaml:"oauthID"`
	AccountID      int       `boil:"accountID" json:"accountID" toml:"accountID" yaml:"accountID"`
	Provider       string    `boil:"provider" json:"provider" toml:"provider" yaml:"provider"`
	ProviderUserID string    `boil:"providerUserID" json:"providerUserID" toml:"providerUserID" yaml:"providerUserID"`
	CreatedAt      null.Time `boil:"createdAt" json:"createdAt,omitempty" toml:"createdAt" yaml:"createdAt,omitempty"`

	R *oauthAccountR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L oauthAccountL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var OauthAccountColumns = struct {
	OauthID        string
	AccountID      string
	Provider       string
	ProviderUserID string
	CreatedAt      string
}{
	OauthID:        "oauthID",
	AccountID:      "accountID",
	Provider:       "provider",
	ProviderUserID: "providerUserID",
	CreatedAt:      "createdAt",
}

var OauthAccountTableColumns = struct {
	OauthID        string
	AccountID      string
	Provider       string
	ProviderUserID string
	CreatedAt      string
}{
	OauthID:        "oauth_account.oauthID",
	AccountID:      "oauth_account.accountID",
	Provider:       "oauth_account.provider",
	ProviderUserID: "oauth_account.providerUserID",
	CreatedAt:      "oauth_account.createdAt",
}

// Generated where

type whereHelpernull_Time struct{ field string }

func (w whereHelpernull_Time) EQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Time) NEQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Time) LT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Time) LTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Time) GT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Time) GTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Time) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Time) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var OauthAccountWhere = struct {
	OauthID        whereHelperint
	AccountID      whereHelperint
	Provider       whereHelperstring
	ProviderUserID whereHelperstring
	CreatedAt      whereHelpernull_Time
}{
	OauthID:        whereHelperint{field: "\"oauth_account\".\"oauthID\""},
	AccountID:      whereHelperint{field: "\"oauth_account\".\"accountID\""},
	Provider:       whereHelperstring{field: "\"oauth_account\".\"provider\""},
	ProviderUserID: whereHelperstring{field: "\"oauth_account\".\"providerUserID\""},
	CreatedAt:      whereHelpernull_Time{field: "\"oauth_account\".\"createdAt\""},
}

// OauthAccountRels is where relationship names are stored.
var OauthAccountRels = struct {
	AccountIDAccount string
}{
	AccountIDAccount: "AccountIDAccount",
}

// oauthAccountR is where relationships are stored.
type oauthAccountR struct {
	AccountIDAccount *Account `boil:"AccountIDAccount" json:"AccountIDAccount" toml:"AccountIDAccount" yaml:"AccountIDAccount"`
}

// NewStruct creates a new relationship struct
func (*oauthAccountR) NewStruct() *oauthAccountR {
	return &oauthAccountR{}
}

func (r *oauthAccountR) GetAccountIDAccount() *Account {
	if r == nil {
		return nil
	}
	return r.AccountIDAccount
}

// oauthAccountL is where Load methods for each relationship are stored.
type oauthAccountL struct{}

var (
	oauthAccountAllColumns            = []string{"oauthID", "accountID", "provider", "providerUserID", "createdAt"}
	oauthAccountColumnsWithoutDefault = []string{"accountID", "provider", "providerUserID"}
	oauthAccountColumnsWithDefault    = []string{"oauthID", "createdAt"}
	oauthAccountPrimaryKeyColumns     = []string{"oauthID"}
	oauthAccountGeneratedColumns      = []string{}
)

type (
	// OauthAccountSlice is an alias for a slice of pointers to OauthAccount.
	// This should almost always be used instead of []OauthAccount.
	OauthAccountSlice []*OauthAccount
	// OauthAccountHook is the signature for custom OauthAccount hook methods
	OauthAccountHook func(context.Context, boil.ContextExecutor, *OauthAccount) error

	oauthAccountQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	oauthAccountType                 = reflect.TypeOf(&OauthAccount{})
	oauthAccountMapping              = queries.MakeStructMapping(oauthAccountType)
	oauthAccountPrimaryKeyMapping, _ = queries.BindMapping(oauthAccountType, oauthAccountMapping, oauthAccountPrimaryKeyColumns)
	oauthAccountInsertCacheMut       sync.RWMutex
	oauthAccountInsertCache          = make(map[string]insertCache)
	oauthAccountUpdateCacheMut       sync.RWMutex
	oauthAccountUpdateCache          = make(map[string]updateCache)
	oauthAccountUpsertCacheMut       sync.RWMutex
	oauthAccountUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var oauthAccountAfterSelectMu sync.Mutex
var oauthAccountAfterSelectHooks []OauthAccountHook

var oauthAccountBeforeInsertMu sync.Mutex
var oauthAccountBeforeInsertHooks []OauthAccountHook
var oauthAccountAfterInsertMu sync.Mutex
var oauthAccountAfterInsertHooks []OauthAccountHook

var oauthAccountBeforeUpdateMu sync.Mutex
var oauthAccountBeforeUpdateHooks []OauthAccountHook
var oauthAccountAfterUpdateMu sync.Mutex
var oauthAccountAfterUpdateHooks []OauthAccountHook

var oauthAccountBeforeDeleteMu sync.Mutex
var oauthAccountBeforeDeleteHooks []OauthAccountHook
var oauthAccountAfterDeleteMu sync.Mutex
var oauthAccountAfterDeleteHooks []OauthAccountHook

var oauthAccountBeforeUpsertMu sync.Mutex
var oauthAccountBeforeUpsertHooks []OauthAccountHook
var oauthAccountAfterUpsertMu sync.Mutex
var oauthAccountAfterUpsertHooks []OauthAccountHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *OauthAccount) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range oauthAccountAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *OauthAccount) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range oauthAccountBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *OauthAccount) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range oauthAccountAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *OauthAccount) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range oauthAccountBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *OauthAccount) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range oauthAccountAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *OauthAccount) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range oauthAccountBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *OauthAccount) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range oauthAccountAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *OauthAccount) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range oauthAccountBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *OauthAccount) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range oauthAccountAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddOauthAccountHook registers your hook function for all future operations.
func AddOauthAccountHook(hookPoint boil.HookPoint, oauthAccountHook OauthAccountHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		oauthAccountAfterSelectMu.Lock()
		oauthAccountAfterSelectHooks = append(oauthAccountAfterSelectHooks, oauthAccountHook)
		oauthAccountAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		oauthAccountBeforeInsertMu.Lock()
		oauthAccountBeforeInsertHooks = append(oauthAccountBeforeInsertHooks, oauthAccountHook)
		oauthAccountBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		oauthAccountAfterInsertMu.Lock()
		oauthAccountAfterInsertHooks = append(oauthAccountAfterInsertHooks, oauthAccountHook)
		oauthAccountAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		oauthAccountBeforeUpdateMu.Lock()
		oauthAccountBeforeUpdateHooks = append(oauthAccountBeforeUpdateHooks, oauthAccountHook)
		oauthAccountBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		oauthAccountAfterUpdateMu.Lock()
		oauthAccountAfterUpdateHooks = append(oauthAccountAfterUpdateHooks, oauthAccountHook)
		oauthAccountAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		oauthAccountBeforeDeleteMu.Lock()
		oauthAccountBeforeDeleteHooks = append(oauthAccountBeforeDeleteHooks, oauthAccountHook)
		oauthAccountBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		oauthAccountAfterDeleteMu.Lock()
		oauthAccountAfterDeleteHooks = append(oauthAccountAfterDeleteHooks, oauthAccountHook)
		oauthAccountAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		oauthAccountBeforeUpsertMu.Lock()
		oauthAccountBeforeUpsertHooks = append(oauthAccountBeforeUpsertHooks, oauthAccountHook)
		oauthAccountBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		oauthAccountAfterUpsertMu.Lock()
		oauthAccountAfterUpsertHooks = append(oauthAccountAfterUpsertHooks, oauthAccountHook)
		oauthAccountAfterUpsertMu.Unlock()
	}
}

// One returns a single oauthAccount record from the query.
func (q oauthAccountQuery) One(ctx context.Context, exec boil.ContextExecutor) (*OauthAccount, error) {
	o := &OauthAccount{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for oauth_account")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all OauthAccount records from the query.
func (q oauthAccountQuery) All(ctx context.Context, exec boil.ContextExecutor) (OauthAccountSlice, error) {
	var o []*OauthAccount

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to OauthAccount slice")
	}

	if len(oauthAccountAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all OauthAccount records in the query.
func (q oauthAccountQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count oauth_account rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q oauthAccountQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if oauth_account exists")
	}

	return count > 0, nil
}

// AccountIDAccount pointed to by the foreign key.
func (o *OauthAccount) AccountIDAccount(mods ...qm.QueryMod) accountQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"accountID\" = ?", o.AccountID),
	}

	queryMods = append(queryMods, mods...)

	return Accounts(queryMods...)
}

// LoadAccountIDAccount allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (oauthAccountL) LoadAccountIDAccount(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOauthAccount interface{}, mods queries.Applicator) error {
	var slice []*OauthAccount
	var object *OauthAccount

	if singular {
		var ok bool
		object, ok = maybeOauthAccount.(*OauthAccount)
		if !ok {
			object = new(OauthAccount)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeOauthAccount)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeOauthAccount))
			}
		}
	} else {
		s, ok := maybeOauthAccount.(*[]*OauthAccount)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeOauthAccount)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeOauthAccount))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &oauthAccountR{}
		}
		args[object.AccountID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &oauthAccountR{}
			}

			args[obj.AccountID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`account`),
		qm.WhereIn(`account.accountID in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Account")
	}

	var resultSlice []*Account
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Account")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for account")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for account")
	}

	if len(accountAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.AccountIDAccount = foreign
		if foreign.R == nil {
			foreign.R = &accountR{}
		}
		foreign.R.AccountIDOauthAccounts = append(foreign.R.AccountIDOauthAccounts, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.AccountID == foreign.AccountID {
				local.R.AccountIDAccount = foreign
				if foreign.R == nil {
					foreign.R = &accountR{}
				}
				foreign.R.AccountIDOauthAccounts = append(foreign.R.AccountIDOauthAccounts, local)
				break
			}
		}
	}

	return nil
}

// SetAccountIDAccount of the oauthAccount to the related item.
// Sets o.R.AccountIDAccount to related.
// Adds o to related.R.AccountIDOauthAccounts.
func (o *OauthAccount) SetAccountIDAccount(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Account) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"oauth_account\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"accountID"}),
		strmangle.WhereClause("\"", "\"", 2, oauthAccountPrimaryKeyColumns),
	)
	values := []interface{}{related.AccountID, o.OauthID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.AccountID = related.AccountID
	if o.R == nil {
		o.R = &oauthAccountR{
			AccountIDAccount: related,
		}
	} else {
		o.R.AccountIDAccount = related
	}

	if related.R == nil {
		related.R = &accountR{
			AccountIDOauthAccounts: OauthAccountSlice{o},
		}
	} else {
		related.R.AccountIDOauthAccounts = append(related.R.AccountIDOauthAccounts, o)
	}

	return nil
}

// OauthAccounts retrieves all the records using an executor.
func OauthAccounts(mods ...qm.QueryMod) oauthAccountQuery {
	mods = append(mods, qm.From("\"oauth_account\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"oauth_account\".*"})
	}

	return oauthAccountQuery{q}
}

// FindOauthAccount retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindOauthAccount(ctx context.Context, exec boil.ContextExecutor, oauthID int, selectCols ...string) (*OauthAccount, error) {
	oauthAccountObj := &OauthAccount{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"oauth_account\" where \"oauthID\"=$1", sel,
	)

	q := queries.Raw(query, oauthID)

	err := q.Bind(ctx, exec, oauthAccountObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from oauth_account")
	}

	if err = oauthAccountObj.doAfterSelectHooks(ctx, exec); err != nil {
		return oauthAccountObj, err
	}

	return oauthAccountObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *OauthAccount) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no oauth_account provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(oauthAccountColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	oauthAccountInsertCacheMut.RLock()
	cache, cached := oauthAccountInsertCache[key]
	oauthAccountInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			oauthAccountAllColumns,
			oauthAccountColumnsWithDefault,
			oauthAccountColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(oauthAccountType, oauthAccountMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(oauthAccountType, oauthAccountMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"oauth_account\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"oauth_account\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into oauth_account")
	}

	if !cached {
		oauthAccountInsertCacheMut.Lock()
		oauthAccountInsertCache[key] = cache
		oauthAccountInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the OauthAccount.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *OauthAccount) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	oauthAccountUpdateCacheMut.RLock()
	cache, cached := oauthAccountUpdateCache[key]
	oauthAccountUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			oauthAccountAllColumns,
			oauthAccountPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update oauth_account, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"oauth_account\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, oauthAccountPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(oauthAccountType, oauthAccountMapping, append(wl, oauthAccountPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update oauth_account row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for oauth_account")
	}

	if !cached {
		oauthAccountUpdateCacheMut.Lock()
		oauthAccountUpdateCache[key] = cache
		oauthAccountUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q oauthAccountQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for oauth_account")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for oauth_account")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o OauthAccountSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), oauthAccountPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"oauth_account\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, oauthAccountPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in oauthAccount slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all oauthAccount")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *OauthAccount) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no oauth_account provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(oauthAccountColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	oauthAccountUpsertCacheMut.RLock()
	cache, cached := oauthAccountUpsertCache[key]
	oauthAccountUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			oauthAccountAllColumns,
			oauthAccountColumnsWithDefault,
			oauthAccountColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			oauthAccountAllColumns,
			oauthAccountPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert oauth_account, could not build update column list")
		}

		ret := strmangle.SetComplement(oauthAccountAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(oauthAccountPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert oauth_account, could not build conflict column list")
			}

			conflict = make([]string, len(oauthAccountPrimaryKeyColumns))
			copy(conflict, oauthAccountPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"oauth_account\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(oauthAccountType, oauthAccountMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(oauthAccountType, oauthAccountMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert oauth_account")
	}

	if !cached {
		oauthAccountUpsertCacheMut.Lock()
		oauthAccountUpsertCache[key] = cache
		oauthAccountUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single OauthAccount record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *OauthAccount) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no OauthAccount provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), oauthAccountPrimaryKeyMapping)
	sql := "DELETE FROM \"oauth_account\" WHERE \"oauthID\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from oauth_account")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for oauth_account")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q oauthAccountQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no oauthAccountQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from oauth_account")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for oauth_account")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o OauthAccountSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(oauthAccountBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), oauthAccountPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"oauth_account\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, oauthAccountPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from oauthAccount slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for oauth_account")
	}

	if len(oauthAccountAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *OauthAccount) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindOauthAccount(ctx, exec, o.OauthID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *OauthAccountSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := OauthAccountSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), oauthAccountPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"oauth_account\".* FROM \"oauth_account\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, oauthAccountPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in OauthAccountSlice")
	}

	*o = slice

	return nil
}

// OauthAccountExists checks if the OauthAccount row exists.
func OauthAccountExists(ctx context.Context, exec boil.ContextExecutor, oauthID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"oauth_account\" where \"oauthID\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, oauthID)
	}
	row := exec.QueryRowContext(ctx, sql, oauthID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if oauth_account exists")
	}

	return exists, nil
}

// Exists checks if the OauthAccount row exists.
func (o *OauthAccount) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return OauthAccountExists(ctx, exec, o.OauthID)
}
