// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/sqlboiler/v4/queries/qm"
	"github.com/aarondl/sqlboiler/v4/queries/qmhelper"
	"github.com/aarondl/strmangle"
	"github.com/friendsofgo/errors"
)

// InvoiceDetail is an object representing the database table.
type InvoiceDetail struct {
	InvoiceDetailID int     `boil:"invoiceDetailID" json:"invoiceDetailID" toml:"invoiceDetailID" yaml:"invoiceDetailID"`
	Quantity        int     `boil:"quantity" json:"quantity" toml:"quantity" yaml:"quantity"`
	Price           float32 `boil:"price" json:"price" toml:"price" yaml:"price"`
	ProductID       int     `boil:"productID" json:"productID" toml:"productID" yaml:"productID"`
	InvoiceID       int     `boil:"invoiceID" json:"invoiceID" toml:"invoiceID" yaml:"invoiceID"`

	R *invoiceDetailR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L invoiceDetailL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var InvoiceDetailColumns = struct {
	InvoiceDetailID string
	Quantity        string
	Price           string
	ProductID       string
	InvoiceID       string
}{
	InvoiceDetailID: "invoiceDetailID",
	Quantity:        "quantity",
	Price:           "price",
	ProductID:       "productID",
	InvoiceID:       "invoiceID",
}

var InvoiceDetailTableColumns = struct {
	InvoiceDetailID string
	Quantity        string
	Price           string
	ProductID       string
	InvoiceID       string
}{
	InvoiceDetailID: "invoice_detail.invoiceDetailID",
	Quantity:        "invoice_detail.quantity",
	Price:           "invoice_detail.price",
	ProductID:       "invoice_detail.productID",
	InvoiceID:       "invoice_detail.invoiceID",
}

// Generated where

var InvoiceDetailWhere = struct {
	InvoiceDetailID whereHelperint
	Quantity        whereHelperint
	Price           whereHelperfloat32
	ProductID       whereHelperint
	InvoiceID       whereHelperint
}{
	InvoiceDetailID: whereHelperint{field: "\"invoice_detail\".\"invoiceDetailID\""},
	Quantity:        whereHelperint{field: "\"invoice_detail\".\"quantity\""},
	Price:           whereHelperfloat32{field: "\"invoice_detail\".\"price\""},
	ProductID:       whereHelperint{field: "\"invoice_detail\".\"productID\""},
	InvoiceID:       whereHelperint{field: "\"invoice_detail\".\"invoiceID\""},
}

// InvoiceDetailRels is where relationship names are stored.
var InvoiceDetailRels = struct {
	InvoiceIDInvoice string
	ProductIDProduct string
}{
	InvoiceIDInvoice: "InvoiceIDInvoice",
	ProductIDProduct: "ProductIDProduct",
}

// invoiceDetailR is where relationships are stored.
type invoiceDetailR struct {
	InvoiceIDInvoice *Invoice `boil:"InvoiceIDInvoice" json:"InvoiceIDInvoice" toml:"InvoiceIDInvoice" yaml:"InvoiceIDInvoice"`
	ProductIDProduct *Product `boil:"ProductIDProduct" json:"ProductIDProduct" toml:"ProductIDProduct" yaml:"ProductIDProduct"`
}

// NewStruct creates a new relationship struct
func (*invoiceDetailR) NewStruct() *invoiceDetailR {
	return &invoiceDetailR{}
}

func (o *InvoiceDetail) GetInvoiceIDInvoice() *Invoice {
	if o == nil {
		return nil
	}

	return o.R.GetInvoiceIDInvoice()
}

func (r *invoiceDetailR) GetInvoiceIDInvoice() *Invoice {
	if r == nil {
		return nil
	}

	return r.InvoiceIDInvoice
}

func (o *InvoiceDetail) GetProductIDProduct() *Product {
	if o == nil {
		return nil
	}

	return o.R.GetProductIDProduct()
}

func (r *invoiceDetailR) GetProductIDProduct() *Product {
	if r == nil {
		return nil
	}

	return r.ProductIDProduct
}

// invoiceDetailL is where Load methods for each relationship are stored.
type invoiceDetailL struct{}

var (
	invoiceDetailAllColumns            = []string{"invoiceDetailID", "quantity", "price", "productID", "invoiceID"}
	invoiceDetailColumnsWithoutDefault = []string{"quantity", "price", "productID", "invoiceID"}
	invoiceDetailColumnsWithDefault    = []string{"invoiceDetailID"}
	invoiceDetailPrimaryKeyColumns     = []string{"invoiceDetailID"}
	invoiceDetailGeneratedColumns      = []string{"invoiceDetailID"}
)

type (
	// InvoiceDetailSlice is an alias for a slice of pointers to InvoiceDetail.
	// This should almost always be used instead of []InvoiceDetail.
	InvoiceDetailSlice []*InvoiceDetail
	// InvoiceDetailHook is the signature for custom InvoiceDetail hook methods
	InvoiceDetailHook func(context.Context, boil.ContextExecutor, *InvoiceDetail) error

	invoiceDetailQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	invoiceDetailType                 = reflect.TypeOf(&InvoiceDetail{})
	invoiceDetailMapping              = queries.MakeStructMapping(invoiceDetailType)
	invoiceDetailPrimaryKeyMapping, _ = queries.BindMapping(invoiceDetailType, invoiceDetailMapping, invoiceDetailPrimaryKeyColumns)
	invoiceDetailInsertCacheMut       sync.RWMutex
	invoiceDetailInsertCache          = make(map[string]insertCache)
	invoiceDetailUpdateCacheMut       sync.RWMutex
	invoiceDetailUpdateCache          = make(map[string]updateCache)
	invoiceDetailUpsertCacheMut       sync.RWMutex
	invoiceDetailUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var invoiceDetailAfterSelectMu sync.Mutex
var invoiceDetailAfterSelectHooks []InvoiceDetailHook

var invoiceDetailBeforeInsertMu sync.Mutex
var invoiceDetailBeforeInsertHooks []InvoiceDetailHook
var invoiceDetailAfterInsertMu sync.Mutex
var invoiceDetailAfterInsertHooks []InvoiceDetailHook

var invoiceDetailBeforeUpdateMu sync.Mutex
var invoiceDetailBeforeUpdateHooks []InvoiceDetailHook
var invoiceDetailAfterUpdateMu sync.Mutex
var invoiceDetailAfterUpdateHooks []InvoiceDetailHook

var invoiceDetailBeforeDeleteMu sync.Mutex
var invoiceDetailBeforeDeleteHooks []InvoiceDetailHook
var invoiceDetailAfterDeleteMu sync.Mutex
var invoiceDetailAfterDeleteHooks []InvoiceDetailHook

var invoiceDetailBeforeUpsertMu sync.Mutex
var invoiceDetailBeforeUpsertHooks []InvoiceDetailHook
var invoiceDetailAfterUpsertMu sync.Mutex
var invoiceDetailAfterUpsertHooks []InvoiceDetailHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *InvoiceDetail) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range invoiceDetailAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *InvoiceDetail) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range invoiceDetailBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *InvoiceDetail) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range invoiceDetailAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *InvoiceDetail) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range invoiceDetailBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *InvoiceDetail) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range invoiceDetailAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *InvoiceDetail) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range invoiceDetailBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *InvoiceDetail) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range invoiceDetailAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *InvoiceDetail) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range invoiceDetailBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *InvoiceDetail) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range invoiceDetailAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddInvoiceDetailHook registers your hook function for all future operations.
func AddInvoiceDetailHook(hookPoint boil.HookPoint, invoiceDetailHook InvoiceDetailHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		invoiceDetailAfterSelectMu.Lock()
		invoiceDetailAfterSelectHooks = append(invoiceDetailAfterSelectHooks, invoiceDetailHook)
		invoiceDetailAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		invoiceDetailBeforeInsertMu.Lock()
		invoiceDetailBeforeInsertHooks = append(invoiceDetailBeforeInsertHooks, invoiceDetailHook)
		invoiceDetailBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		invoiceDetailAfterInsertMu.Lock()
		invoiceDetailAfterInsertHooks = append(invoiceDetailAfterInsertHooks, invoiceDetailHook)
		invoiceDetailAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		invoiceDetailBeforeUpdateMu.Lock()
		invoiceDetailBeforeUpdateHooks = append(invoiceDetailBeforeUpdateHooks, invoiceDetailHook)
		invoiceDetailBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		invoiceDetailAfterUpdateMu.Lock()
		invoiceDetailAfterUpdateHooks = append(invoiceDetailAfterUpdateHooks, invoiceDetailHook)
		invoiceDetailAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		invoiceDetailBeforeDeleteMu.Lock()
		invoiceDetailBeforeDeleteHooks = append(invoiceDetailBeforeDeleteHooks, invoiceDetailHook)
		invoiceDetailBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		invoiceDetailAfterDeleteMu.Lock()
		invoiceDetailAfterDeleteHooks = append(invoiceDetailAfterDeleteHooks, invoiceDetailHook)
		invoiceDetailAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		invoiceDetailBeforeUpsertMu.Lock()
		invoiceDetailBeforeUpsertHooks = append(invoiceDetailBeforeUpsertHooks, invoiceDetailHook)
		invoiceDetailBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		invoiceDetailAfterUpsertMu.Lock()
		invoiceDetailAfterUpsertHooks = append(invoiceDetailAfterUpsertHooks, invoiceDetailHook)
		invoiceDetailAfterUpsertMu.Unlock()
	}
}

// One returns a single invoiceDetail record from the query.
func (q invoiceDetailQuery) One(ctx context.Context, exec boil.ContextExecutor) (*InvoiceDetail, error) {
	o := &InvoiceDetail{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for invoice_detail")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all InvoiceDetail records from the query.
func (q invoiceDetailQuery) All(ctx context.Context, exec boil.ContextExecutor) (InvoiceDetailSlice, error) {
	var o []*InvoiceDetail

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to InvoiceDetail slice")
	}

	if len(invoiceDetailAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all InvoiceDetail records in the query.
func (q invoiceDetailQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count invoice_detail rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q invoiceDetailQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if invoice_detail exists")
	}

	return count > 0, nil
}

// InvoiceIDInvoice pointed to by the foreign key.
func (o *InvoiceDetail) InvoiceIDInvoice(mods ...qm.QueryMod) invoiceQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"invoiceID\" = ?", o.InvoiceID),
	}

	queryMods = append(queryMods, mods...)

	return Invoices(queryMods...)
}

// ProductIDProduct pointed to by the foreign key.
func (o *InvoiceDetail) ProductIDProduct(mods ...qm.QueryMod) productQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"productID\" = ?", o.ProductID),
	}

	queryMods = append(queryMods, mods...)

	return Products(queryMods...)
}

// LoadInvoiceIDInvoice allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (invoiceDetailL) LoadInvoiceIDInvoice(ctx context.Context, e boil.ContextExecutor, singular bool, maybeInvoiceDetail interface{}, mods queries.Applicator) error {
	var slice []*InvoiceDetail
	var object *InvoiceDetail

	if singular {
		var ok bool
		object, ok = maybeInvoiceDetail.(*InvoiceDetail)
		if !ok {
			object = new(InvoiceDetail)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeInvoiceDetail)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeInvoiceDetail))
			}
		}
	} else {
		s, ok := maybeInvoiceDetail.(*[]*InvoiceDetail)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeInvoiceDetail)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeInvoiceDetail))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &invoiceDetailR{}
		}
		args[object.InvoiceID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &invoiceDetailR{}
			}

			args[obj.InvoiceID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`invoice`),
		qm.WhereIn(`invoice.invoiceID in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Invoice")
	}

	var resultSlice []*Invoice
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Invoice")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for invoice")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for invoice")
	}

	if len(invoiceAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.InvoiceIDInvoice = foreign
		if foreign.R == nil {
			foreign.R = &invoiceR{}
		}
		foreign.R.InvoiceIDInvoiceDetails = append(foreign.R.InvoiceIDInvoiceDetails, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.InvoiceID == foreign.InvoiceID {
				local.R.InvoiceIDInvoice = foreign
				if foreign.R == nil {
					foreign.R = &invoiceR{}
				}
				foreign.R.InvoiceIDInvoiceDetails = append(foreign.R.InvoiceIDInvoiceDetails, local)
				break
			}
		}
	}

	return nil
}

// LoadProductIDProduct allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (invoiceDetailL) LoadProductIDProduct(ctx context.Context, e boil.ContextExecutor, singular bool, maybeInvoiceDetail interface{}, mods queries.Applicator) error {
	var slice []*InvoiceDetail
	var object *InvoiceDetail

	if singular {
		var ok bool
		object, ok = maybeInvoiceDetail.(*InvoiceDetail)
		if !ok {
			object = new(InvoiceDetail)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeInvoiceDetail)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeInvoiceDetail))
			}
		}
	} else {
		s, ok := maybeInvoiceDetail.(*[]*InvoiceDetail)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeInvoiceDetail)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeInvoiceDetail))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &invoiceDetailR{}
		}
		args[object.ProductID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &invoiceDetailR{}
			}

			args[obj.ProductID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`product`),
		qm.WhereIn(`product.productID in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Product")
	}

	var resultSlice []*Product
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Product")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for product")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for product")
	}

	if len(productAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ProductIDProduct = foreign
		if foreign.R == nil {
			foreign.R = &productR{}
		}
		foreign.R.ProductIDInvoiceDetails = append(foreign.R.ProductIDInvoiceDetails, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ProductID == foreign.ProductID {
				local.R.ProductIDProduct = foreign
				if foreign.R == nil {
					foreign.R = &productR{}
				}
				foreign.R.ProductIDInvoiceDetails = append(foreign.R.ProductIDInvoiceDetails, local)
				break
			}
		}
	}

	return nil
}

// SetInvoiceIDInvoice of the invoiceDetail to the related item.
// Sets o.R.InvoiceIDInvoice to related.
// Adds o to related.R.InvoiceIDInvoiceDetails.
func (o *InvoiceDetail) SetInvoiceIDInvoice(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Invoice) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"invoice_detail\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"invoiceID"}),
		strmangle.WhereClause("\"", "\"", 2, invoiceDetailPrimaryKeyColumns),
	)
	values := []interface{}{related.InvoiceID, o.InvoiceDetailID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.InvoiceID = related.InvoiceID
	if o.R == nil {
		o.R = &invoiceDetailR{
			InvoiceIDInvoice: related,
		}
	} else {
		o.R.InvoiceIDInvoice = related
	}

	if related.R == nil {
		related.R = &invoiceR{
			InvoiceIDInvoiceDetails: InvoiceDetailSlice{o},
		}
	} else {
		related.R.InvoiceIDInvoiceDetails = append(related.R.InvoiceIDInvoiceDetails, o)
	}

	return nil
}

// SetProductIDProduct of the invoiceDetail to the related item.
// Sets o.R.ProductIDProduct to related.
// Adds o to related.R.ProductIDInvoiceDetails.
func (o *InvoiceDetail) SetProductIDProduct(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Product) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"invoice_detail\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"productID"}),
		strmangle.WhereClause("\"", "\"", 2, invoiceDetailPrimaryKeyColumns),
	)
	values := []interface{}{related.ProductID, o.InvoiceDetailID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ProductID = related.ProductID
	if o.R == nil {
		o.R = &invoiceDetailR{
			ProductIDProduct: related,
		}
	} else {
		o.R.ProductIDProduct = related
	}

	if related.R == nil {
		related.R = &productR{
			ProductIDInvoiceDetails: InvoiceDetailSlice{o},
		}
	} else {
		related.R.ProductIDInvoiceDetails = append(related.R.ProductIDInvoiceDetails, o)
	}

	return nil
}

// InvoiceDetails retrieves all the records using an executor.
func InvoiceDetails(mods ...qm.QueryMod) invoiceDetailQuery {
	mods = append(mods, qm.From("\"invoice_detail\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"invoice_detail\".*"})
	}

	return invoiceDetailQuery{q}
}

// FindInvoiceDetail retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindInvoiceDetail(ctx context.Context, exec boil.ContextExecutor, invoiceDetailID int, selectCols ...string) (*InvoiceDetail, error) {
	invoiceDetailObj := &InvoiceDetail{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"invoice_detail\" where \"invoiceDetailID\"=$1", sel,
	)

	q := queries.Raw(query, invoiceDetailID)

	err := q.Bind(ctx, exec, invoiceDetailObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from invoice_detail")
	}

	if err = invoiceDetailObj.doAfterSelectHooks(ctx, exec); err != nil {
		return invoiceDetailObj, err
	}

	return invoiceDetailObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *InvoiceDetail) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no invoice_detail provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(invoiceDetailColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	invoiceDetailInsertCacheMut.RLock()
	cache, cached := invoiceDetailInsertCache[key]
	invoiceDetailInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			invoiceDetailAllColumns,
			invoiceDetailColumnsWithDefault,
			invoiceDetailColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, invoiceDetailGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(invoiceDetailType, invoiceDetailMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(invoiceDetailType, invoiceDetailMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"invoice_detail\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"invoice_detail\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into invoice_detail")
	}

	if !cached {
		invoiceDetailInsertCacheMut.Lock()
		invoiceDetailInsertCache[key] = cache
		invoiceDetailInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the InvoiceDetail.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *InvoiceDetail) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	invoiceDetailUpdateCacheMut.RLock()
	cache, cached := invoiceDetailUpdateCache[key]
	invoiceDetailUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			invoiceDetailAllColumns,
			invoiceDetailPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, invoiceDetailGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update invoice_detail, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"invoice_detail\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, invoiceDetailPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(invoiceDetailType, invoiceDetailMapping, append(wl, invoiceDetailPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update invoice_detail row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for invoice_detail")
	}

	if !cached {
		invoiceDetailUpdateCacheMut.Lock()
		invoiceDetailUpdateCache[key] = cache
		invoiceDetailUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q invoiceDetailQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for invoice_detail")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for invoice_detail")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o InvoiceDetailSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), invoiceDetailPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"invoice_detail\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, invoiceDetailPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in invoiceDetail slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all invoiceDetail")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *InvoiceDetail) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no invoice_detail provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(invoiceDetailColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	invoiceDetailUpsertCacheMut.RLock()
	cache, cached := invoiceDetailUpsertCache[key]
	invoiceDetailUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			invoiceDetailAllColumns,
			invoiceDetailColumnsWithDefault,
			invoiceDetailColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			invoiceDetailAllColumns,
			invoiceDetailPrimaryKeyColumns,
		)

		insert = strmangle.SetComplement(insert, invoiceDetailGeneratedColumns)
		update = strmangle.SetComplement(update, invoiceDetailGeneratedColumns)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert invoice_detail, could not build update column list")
		}

		ret := strmangle.SetComplement(invoiceDetailAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(invoiceDetailPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert invoice_detail, could not build conflict column list")
			}

			conflict = make([]string, len(invoiceDetailPrimaryKeyColumns))
			copy(conflict, invoiceDetailPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"invoice_detail\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(invoiceDetailType, invoiceDetailMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(invoiceDetailType, invoiceDetailMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert invoice_detail")
	}

	if !cached {
		invoiceDetailUpsertCacheMut.Lock()
		invoiceDetailUpsertCache[key] = cache
		invoiceDetailUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single InvoiceDetail record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *InvoiceDetail) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no InvoiceDetail provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), invoiceDetailPrimaryKeyMapping)
	sql := "DELETE FROM \"invoice_detail\" WHERE \"invoiceDetailID\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from invoice_detail")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for invoice_detail")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q invoiceDetailQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no invoiceDetailQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from invoice_detail")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for invoice_detail")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o InvoiceDetailSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(invoiceDetailBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), invoiceDetailPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"invoice_detail\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, invoiceDetailPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from invoiceDetail slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for invoice_detail")
	}

	if len(invoiceDetailAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *InvoiceDetail) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindInvoiceDetail(ctx, exec, o.InvoiceDetailID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *InvoiceDetailSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := InvoiceDetailSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), invoiceDetailPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"invoice_detail\".* FROM \"invoice_detail\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, invoiceDetailPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in InvoiceDetailSlice")
	}

	*o = slice

	return nil
}

// InvoiceDetailExists checks if the InvoiceDetail row exists.
func InvoiceDetailExists(ctx context.Context, exec boil.ContextExecutor, invoiceDetailID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"invoice_detail\" where \"invoiceDetailID\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, invoiceDetailID)
	}
	row := exec.QueryRowContext(ctx, sql, invoiceDetailID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if invoice_detail exists")
	}

	return exists, nil
}

// Exists checks if the InvoiceDetail row exists.
func (o *InvoiceDetail) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return InvoiceDetailExists(ctx, exec, o.InvoiceDetailID)
}
