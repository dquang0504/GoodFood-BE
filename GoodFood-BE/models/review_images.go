// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/sqlboiler/v4/queries/qm"
	"github.com/aarondl/sqlboiler/v4/queries/qmhelper"
	"github.com/aarondl/strmangle"
	"github.com/friendsofgo/errors"
)

// ReviewImage is an object representing the database table.
type ReviewImage struct {
	ReviewImageID int    `boil:"reviewImageID" json:"reviewImageID" toml:"reviewImageID" yaml:"reviewImageID"`
	ImageName     string `boil:"imageName" json:"imageName" toml:"imageName" yaml:"imageName"`
	ReviewID      int    `boil:"reviewID" json:"reviewID" toml:"reviewID" yaml:"reviewID"`

	R *reviewImageR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L reviewImageL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ReviewImageColumns = struct {
	ReviewImageID string
	ImageName     string
	ReviewID      string
}{
	ReviewImageID: "reviewImageID",
	ImageName:     "imageName",
	ReviewID:      "reviewID",
}

var ReviewImageTableColumns = struct {
	ReviewImageID string
	ImageName     string
	ReviewID      string
}{
	ReviewImageID: "review_images.reviewImageID",
	ImageName:     "review_images.imageName",
	ReviewID:      "review_images.reviewID",
}

// Generated where

var ReviewImageWhere = struct {
	ReviewImageID whereHelperint
	ImageName     whereHelperstring
	ReviewID      whereHelperint
}{
	ReviewImageID: whereHelperint{field: "\"review_images\".\"reviewImageID\""},
	ImageName:     whereHelperstring{field: "\"review_images\".\"imageName\""},
	ReviewID:      whereHelperint{field: "\"review_images\".\"reviewID\""},
}

// ReviewImageRels is where relationship names are stored.
var ReviewImageRels = struct {
	ReviewIDReview string
}{
	ReviewIDReview: "ReviewIDReview",
}

// reviewImageR is where relationships are stored.
type reviewImageR struct {
	ReviewIDReview *Review `boil:"ReviewIDReview" json:"ReviewIDReview" toml:"ReviewIDReview" yaml:"ReviewIDReview"`
}

// NewStruct creates a new relationship struct
func (*reviewImageR) NewStruct() *reviewImageR {
	return &reviewImageR{}
}

func (o *ReviewImage) GetReviewIDReview() *Review {
	if o == nil {
		return nil
	}

	return o.R.GetReviewIDReview()
}

func (r *reviewImageR) GetReviewIDReview() *Review {
	if r == nil {
		return nil
	}

	return r.ReviewIDReview
}

// reviewImageL is where Load methods for each relationship are stored.
type reviewImageL struct{}

var (
	reviewImageAllColumns            = []string{"reviewImageID", "imageName", "reviewID"}
	reviewImageColumnsWithoutDefault = []string{"imageName", "reviewID"}
	reviewImageColumnsWithDefault    = []string{"reviewImageID"}
	reviewImagePrimaryKeyColumns     = []string{"reviewImageID"}
	reviewImageGeneratedColumns      = []string{"reviewImageID"}
)

type (
	// ReviewImageSlice is an alias for a slice of pointers to ReviewImage.
	// This should almost always be used instead of []ReviewImage.
	ReviewImageSlice []*ReviewImage
	// ReviewImageHook is the signature for custom ReviewImage hook methods
	ReviewImageHook func(context.Context, boil.ContextExecutor, *ReviewImage) error

	reviewImageQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	reviewImageType                 = reflect.TypeOf(&ReviewImage{})
	reviewImageMapping              = queries.MakeStructMapping(reviewImageType)
	reviewImagePrimaryKeyMapping, _ = queries.BindMapping(reviewImageType, reviewImageMapping, reviewImagePrimaryKeyColumns)
	reviewImageInsertCacheMut       sync.RWMutex
	reviewImageInsertCache          = make(map[string]insertCache)
	reviewImageUpdateCacheMut       sync.RWMutex
	reviewImageUpdateCache          = make(map[string]updateCache)
	reviewImageUpsertCacheMut       sync.RWMutex
	reviewImageUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var reviewImageAfterSelectMu sync.Mutex
var reviewImageAfterSelectHooks []ReviewImageHook

var reviewImageBeforeInsertMu sync.Mutex
var reviewImageBeforeInsertHooks []ReviewImageHook
var reviewImageAfterInsertMu sync.Mutex
var reviewImageAfterInsertHooks []ReviewImageHook

var reviewImageBeforeUpdateMu sync.Mutex
var reviewImageBeforeUpdateHooks []ReviewImageHook
var reviewImageAfterUpdateMu sync.Mutex
var reviewImageAfterUpdateHooks []ReviewImageHook

var reviewImageBeforeDeleteMu sync.Mutex
var reviewImageBeforeDeleteHooks []ReviewImageHook
var reviewImageAfterDeleteMu sync.Mutex
var reviewImageAfterDeleteHooks []ReviewImageHook

var reviewImageBeforeUpsertMu sync.Mutex
var reviewImageBeforeUpsertHooks []ReviewImageHook
var reviewImageAfterUpsertMu sync.Mutex
var reviewImageAfterUpsertHooks []ReviewImageHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ReviewImage) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reviewImageAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ReviewImage) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reviewImageBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ReviewImage) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reviewImageAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ReviewImage) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reviewImageBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ReviewImage) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reviewImageAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ReviewImage) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reviewImageBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ReviewImage) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reviewImageAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ReviewImage) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reviewImageBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ReviewImage) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reviewImageAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddReviewImageHook registers your hook function for all future operations.
func AddReviewImageHook(hookPoint boil.HookPoint, reviewImageHook ReviewImageHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		reviewImageAfterSelectMu.Lock()
		reviewImageAfterSelectHooks = append(reviewImageAfterSelectHooks, reviewImageHook)
		reviewImageAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		reviewImageBeforeInsertMu.Lock()
		reviewImageBeforeInsertHooks = append(reviewImageBeforeInsertHooks, reviewImageHook)
		reviewImageBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		reviewImageAfterInsertMu.Lock()
		reviewImageAfterInsertHooks = append(reviewImageAfterInsertHooks, reviewImageHook)
		reviewImageAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		reviewImageBeforeUpdateMu.Lock()
		reviewImageBeforeUpdateHooks = append(reviewImageBeforeUpdateHooks, reviewImageHook)
		reviewImageBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		reviewImageAfterUpdateMu.Lock()
		reviewImageAfterUpdateHooks = append(reviewImageAfterUpdateHooks, reviewImageHook)
		reviewImageAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		reviewImageBeforeDeleteMu.Lock()
		reviewImageBeforeDeleteHooks = append(reviewImageBeforeDeleteHooks, reviewImageHook)
		reviewImageBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		reviewImageAfterDeleteMu.Lock()
		reviewImageAfterDeleteHooks = append(reviewImageAfterDeleteHooks, reviewImageHook)
		reviewImageAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		reviewImageBeforeUpsertMu.Lock()
		reviewImageBeforeUpsertHooks = append(reviewImageBeforeUpsertHooks, reviewImageHook)
		reviewImageBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		reviewImageAfterUpsertMu.Lock()
		reviewImageAfterUpsertHooks = append(reviewImageAfterUpsertHooks, reviewImageHook)
		reviewImageAfterUpsertMu.Unlock()
	}
}

// One returns a single reviewImage record from the query.
func (q reviewImageQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ReviewImage, error) {
	o := &ReviewImage{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for review_images")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ReviewImage records from the query.
func (q reviewImageQuery) All(ctx context.Context, exec boil.ContextExecutor) (ReviewImageSlice, error) {
	var o []*ReviewImage

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ReviewImage slice")
	}

	if len(reviewImageAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ReviewImage records in the query.
func (q reviewImageQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count review_images rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q reviewImageQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if review_images exists")
	}

	return count > 0, nil
}

// ReviewIDReview pointed to by the foreign key.
func (o *ReviewImage) ReviewIDReview(mods ...qm.QueryMod) reviewQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"reviewID\" = ?", o.ReviewID),
	}

	queryMods = append(queryMods, mods...)

	return Reviews(queryMods...)
}

// LoadReviewIDReview allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (reviewImageL) LoadReviewIDReview(ctx context.Context, e boil.ContextExecutor, singular bool, maybeReviewImage interface{}, mods queries.Applicator) error {
	var slice []*ReviewImage
	var object *ReviewImage

	if singular {
		var ok bool
		object, ok = maybeReviewImage.(*ReviewImage)
		if !ok {
			object = new(ReviewImage)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeReviewImage)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeReviewImage))
			}
		}
	} else {
		s, ok := maybeReviewImage.(*[]*ReviewImage)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeReviewImage)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeReviewImage))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &reviewImageR{}
		}
		args[object.ReviewID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &reviewImageR{}
			}

			args[obj.ReviewID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`review`),
		qm.WhereIn(`review.reviewID in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Review")
	}

	var resultSlice []*Review
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Review")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for review")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for review")
	}

	if len(reviewAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ReviewIDReview = foreign
		if foreign.R == nil {
			foreign.R = &reviewR{}
		}
		foreign.R.ReviewIDReviewImages = append(foreign.R.ReviewIDReviewImages, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ReviewID == foreign.ReviewID {
				local.R.ReviewIDReview = foreign
				if foreign.R == nil {
					foreign.R = &reviewR{}
				}
				foreign.R.ReviewIDReviewImages = append(foreign.R.ReviewIDReviewImages, local)
				break
			}
		}
	}

	return nil
}

// SetReviewIDReview of the reviewImage to the related item.
// Sets o.R.ReviewIDReview to related.
// Adds o to related.R.ReviewIDReviewImages.
func (o *ReviewImage) SetReviewIDReview(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Review) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"review_images\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"reviewID"}),
		strmangle.WhereClause("\"", "\"", 2, reviewImagePrimaryKeyColumns),
	)
	values := []interface{}{related.ReviewID, o.ReviewImageID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ReviewID = related.ReviewID
	if o.R == nil {
		o.R = &reviewImageR{
			ReviewIDReview: related,
		}
	} else {
		o.R.ReviewIDReview = related
	}

	if related.R == nil {
		related.R = &reviewR{
			ReviewIDReviewImages: ReviewImageSlice{o},
		}
	} else {
		related.R.ReviewIDReviewImages = append(related.R.ReviewIDReviewImages, o)
	}

	return nil
}

// ReviewImages retrieves all the records using an executor.
func ReviewImages(mods ...qm.QueryMod) reviewImageQuery {
	mods = append(mods, qm.From("\"review_images\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"review_images\".*"})
	}

	return reviewImageQuery{q}
}

// FindReviewImage retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindReviewImage(ctx context.Context, exec boil.ContextExecutor, reviewImageID int, selectCols ...string) (*ReviewImage, error) {
	reviewImageObj := &ReviewImage{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"review_images\" where \"reviewImageID\"=$1", sel,
	)

	q := queries.Raw(query, reviewImageID)

	err := q.Bind(ctx, exec, reviewImageObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from review_images")
	}

	if err = reviewImageObj.doAfterSelectHooks(ctx, exec); err != nil {
		return reviewImageObj, err
	}

	return reviewImageObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ReviewImage) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no review_images provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(reviewImageColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	reviewImageInsertCacheMut.RLock()
	cache, cached := reviewImageInsertCache[key]
	reviewImageInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			reviewImageAllColumns,
			reviewImageColumnsWithDefault,
			reviewImageColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, reviewImageGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(reviewImageType, reviewImageMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(reviewImageType, reviewImageMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"review_images\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"review_images\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into review_images")
	}

	if !cached {
		reviewImageInsertCacheMut.Lock()
		reviewImageInsertCache[key] = cache
		reviewImageInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ReviewImage.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ReviewImage) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	reviewImageUpdateCacheMut.RLock()
	cache, cached := reviewImageUpdateCache[key]
	reviewImageUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			reviewImageAllColumns,
			reviewImagePrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, reviewImageGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update review_images, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"review_images\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, reviewImagePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(reviewImageType, reviewImageMapping, append(wl, reviewImagePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update review_images row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for review_images")
	}

	if !cached {
		reviewImageUpdateCacheMut.Lock()
		reviewImageUpdateCache[key] = cache
		reviewImageUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q reviewImageQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for review_images")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for review_images")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ReviewImageSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), reviewImagePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"review_images\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, reviewImagePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in reviewImage slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all reviewImage")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ReviewImage) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no review_images provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(reviewImageColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	reviewImageUpsertCacheMut.RLock()
	cache, cached := reviewImageUpsertCache[key]
	reviewImageUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			reviewImageAllColumns,
			reviewImageColumnsWithDefault,
			reviewImageColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			reviewImageAllColumns,
			reviewImagePrimaryKeyColumns,
		)

		insert = strmangle.SetComplement(insert, reviewImageGeneratedColumns)
		update = strmangle.SetComplement(update, reviewImageGeneratedColumns)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert review_images, could not build update column list")
		}

		ret := strmangle.SetComplement(reviewImageAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(reviewImagePrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert review_images, could not build conflict column list")
			}

			conflict = make([]string, len(reviewImagePrimaryKeyColumns))
			copy(conflict, reviewImagePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"review_images\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(reviewImageType, reviewImageMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(reviewImageType, reviewImageMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert review_images")
	}

	if !cached {
		reviewImageUpsertCacheMut.Lock()
		reviewImageUpsertCache[key] = cache
		reviewImageUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single ReviewImage record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ReviewImage) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ReviewImage provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), reviewImagePrimaryKeyMapping)
	sql := "DELETE FROM \"review_images\" WHERE \"reviewImageID\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from review_images")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for review_images")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q reviewImageQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no reviewImageQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from review_images")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for review_images")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ReviewImageSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(reviewImageBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), reviewImagePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"review_images\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, reviewImagePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from reviewImage slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for review_images")
	}

	if len(reviewImageAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ReviewImage) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindReviewImage(ctx, exec, o.ReviewImageID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ReviewImageSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ReviewImageSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), reviewImagePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"review_images\".* FROM \"review_images\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, reviewImagePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ReviewImageSlice")
	}

	*o = slice

	return nil
}

// ReviewImageExists checks if the ReviewImage row exists.
func ReviewImageExists(ctx context.Context, exec boil.ContextExecutor, reviewImageID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"review_images\" where \"reviewImageID\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, reviewImageID)
	}
	row := exec.QueryRowContext(ctx, sql, reviewImageID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if review_images exists")
	}

	return exists, nil
}

// Exists checks if the ReviewImage row exists.
func (o *ReviewImage) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ReviewImageExists(ctx, exec, o.ReviewImageID)
}
