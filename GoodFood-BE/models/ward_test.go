// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/aarondl/randomize"
	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testWards(t *testing.T) {
	t.Parallel()

	query := Wards()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testWardsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Ward{}
	if err = randomize.Struct(seed, o, wardDBTypes, true, wardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ward struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Wards().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testWardsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Ward{}
	if err = randomize.Struct(seed, o, wardDBTypes, true, wardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ward struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Wards().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Wards().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testWardsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Ward{}
	if err = randomize.Struct(seed, o, wardDBTypes, true, wardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ward struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := WardSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Wards().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testWardsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Ward{}
	if err = randomize.Struct(seed, o, wardDBTypes, true, wardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ward struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := WardExists(ctx, tx, o.WardID)
	if err != nil {
		t.Errorf("Unable to check if Ward exists: %s", err)
	}
	if !e {
		t.Errorf("Expected WardExists to return true, but got false.")
	}
}

func testWardsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Ward{}
	if err = randomize.Struct(seed, o, wardDBTypes, true, wardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ward struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	wardFound, err := FindWard(ctx, tx, o.WardID)
	if err != nil {
		t.Error(err)
	}

	if wardFound == nil {
		t.Error("want a record, got nil")
	}
}

func testWardsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Ward{}
	if err = randomize.Struct(seed, o, wardDBTypes, true, wardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ward struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Wards().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testWardsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Ward{}
	if err = randomize.Struct(seed, o, wardDBTypes, true, wardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ward struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Wards().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testWardsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	wardOne := &Ward{}
	wardTwo := &Ward{}
	if err = randomize.Struct(seed, wardOne, wardDBTypes, false, wardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ward struct: %s", err)
	}
	if err = randomize.Struct(seed, wardTwo, wardDBTypes, false, wardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ward struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = wardOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = wardTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Wards().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testWardsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	wardOne := &Ward{}
	wardTwo := &Ward{}
	if err = randomize.Struct(seed, wardOne, wardDBTypes, false, wardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ward struct: %s", err)
	}
	if err = randomize.Struct(seed, wardTwo, wardDBTypes, false, wardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ward struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = wardOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = wardTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Wards().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func wardBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Ward) error {
	*o = Ward{}
	return nil
}

func wardAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Ward) error {
	*o = Ward{}
	return nil
}

func wardAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Ward) error {
	*o = Ward{}
	return nil
}

func wardBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Ward) error {
	*o = Ward{}
	return nil
}

func wardAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Ward) error {
	*o = Ward{}
	return nil
}

func wardBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Ward) error {
	*o = Ward{}
	return nil
}

func wardAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Ward) error {
	*o = Ward{}
	return nil
}

func wardBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Ward) error {
	*o = Ward{}
	return nil
}

func wardAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Ward) error {
	*o = Ward{}
	return nil
}

func testWardsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Ward{}
	o := &Ward{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, wardDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Ward object: %s", err)
	}

	AddWardHook(boil.BeforeInsertHook, wardBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	wardBeforeInsertHooks = []WardHook{}

	AddWardHook(boil.AfterInsertHook, wardAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	wardAfterInsertHooks = []WardHook{}

	AddWardHook(boil.AfterSelectHook, wardAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	wardAfterSelectHooks = []WardHook{}

	AddWardHook(boil.BeforeUpdateHook, wardBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	wardBeforeUpdateHooks = []WardHook{}

	AddWardHook(boil.AfterUpdateHook, wardAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	wardAfterUpdateHooks = []WardHook{}

	AddWardHook(boil.BeforeDeleteHook, wardBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	wardBeforeDeleteHooks = []WardHook{}

	AddWardHook(boil.AfterDeleteHook, wardAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	wardAfterDeleteHooks = []WardHook{}

	AddWardHook(boil.BeforeUpsertHook, wardBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	wardBeforeUpsertHooks = []WardHook{}

	AddWardHook(boil.AfterUpsertHook, wardAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	wardAfterUpsertHooks = []WardHook{}
}

func testWardsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Ward{}
	if err = randomize.Struct(seed, o, wardDBTypes, true, wardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ward struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Wards().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testWardsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Ward{}
	if err = randomize.Struct(seed, o, wardDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Ward struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(strmangle.SetMerge(wardPrimaryKeyColumns, wardColumnsWithoutDefault)...)); err != nil {
		t.Error(err)
	}

	count, err := Wards().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testWardToOneDistrictUsingDistrictIDDistrict(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Ward
	var foreign District

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, wardDBTypes, false, wardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ward struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, districtDBTypes, false, districtColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize District struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.DistrictID = foreign.DistrictID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.DistrictIDDistrict().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.DistrictID != foreign.DistrictID {
		t.Errorf("want: %v, got %v", foreign.DistrictID, check.DistrictID)
	}

	ranAfterSelectHook := false
	AddDistrictHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *District) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := WardSlice{&local}
	if err = local.L.LoadDistrictIDDistrict(ctx, tx, false, (*[]*Ward)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.DistrictIDDistrict == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.DistrictIDDistrict = nil
	if err = local.L.LoadDistrictIDDistrict(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.DistrictIDDistrict == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testWardToOneSetOpDistrictUsingDistrictIDDistrict(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Ward
	var b, c District

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, wardDBTypes, false, strmangle.SetComplement(wardPrimaryKeyColumns, wardColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, districtDBTypes, false, strmangle.SetComplement(districtPrimaryKeyColumns, districtColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, districtDBTypes, false, strmangle.SetComplement(districtPrimaryKeyColumns, districtColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*District{&b, &c} {
		err = a.SetDistrictIDDistrict(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.DistrictIDDistrict != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.DistrictIDWards[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.DistrictID != x.DistrictID {
			t.Error("foreign key was wrong value", a.DistrictID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.DistrictID))
		reflect.Indirect(reflect.ValueOf(&a.DistrictID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.DistrictID != x.DistrictID {
			t.Error("foreign key was wrong value", a.DistrictID, x.DistrictID)
		}
	}
}

func testWardsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Ward{}
	if err = randomize.Struct(seed, o, wardDBTypes, true, wardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ward struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testWardsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Ward{}
	if err = randomize.Struct(seed, o, wardDBTypes, true, wardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ward struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := WardSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testWardsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Ward{}
	if err = randomize.Struct(seed, o, wardDBTypes, true, wardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ward struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Wards().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	wardDBTypes = map[string]string{`WardID`: `integer`, `WardCode`: `integer`, `WardName`: `character varying`, `DistrictID`: `integer`}
	_           = bytes.MinRead
)

func testWardsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(wardPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(wardAllColumns) == len(wardPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Ward{}
	if err = randomize.Struct(seed, o, wardDBTypes, true, wardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ward struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Wards().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, wardDBTypes, true, wardPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Ward struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testWardsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(wardAllColumns) == len(wardPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Ward{}
	if err = randomize.Struct(seed, o, wardDBTypes, true, wardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ward struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Wards().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, wardDBTypes, true, wardPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Ward struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(wardAllColumns, wardPrimaryKeyColumns) {
		fields = wardAllColumns
	} else {
		fields = strmangle.SetComplement(
			wardAllColumns,
			wardPrimaryKeyColumns,
		)
		fields = strmangle.SetComplement(fields, wardGeneratedColumns)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := WardSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testWardsUpsert(t *testing.T) {
	t.Parallel()

	if len(wardAllColumns) == len(wardPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Ward{}
	if err = randomize.Struct(seed, &o, wardDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Ward struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Ward: %s", err)
	}

	count, err := Wards().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, wardDBTypes, false, wardPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Ward struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Ward: %s", err)
	}

	count, err = Wards().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
