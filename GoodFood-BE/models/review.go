// Code generated by SQLBoiler 4.18.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Review is an object representing the database table.
type Review struct {
	ReviewID   int       `boil:"reviewID" json:"reviewID" toml:"reviewID" yaml:"reviewID"`
	ReviewDate time.Time `boil:"reviewDate" json:"reviewDate" toml:"reviewDate" yaml:"reviewDate"`
	Stars      int       `boil:"stars" json:"stars" toml:"stars" yaml:"stars"`
	Comment    string    `boil:"comment" json:"comment" toml:"comment" yaml:"comment"`
	Status     bool      `boil:"status" json:"status" toml:"status" yaml:"status"`
	ProductID  int       `boil:"productID" json:"productID" toml:"productID" yaml:"productID"`
	AccountID  int       `boil:"accountID" json:"accountID" toml:"accountID" yaml:"accountID"`
	InvoiceID  int       `boil:"invoiceID" json:"invoiceID" toml:"invoiceID" yaml:"invoiceID"`

	R *reviewR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L reviewL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ReviewColumns = struct {
	ReviewID   string
	ReviewDate string
	Stars      string
	Comment    string
	Status     string
	ProductID  string
	AccountID  string
	InvoiceID  string
}{
	ReviewID:   "reviewID",
	ReviewDate: "reviewDate",
	Stars:      "stars",
	Comment:    "comment",
	Status:     "status",
	ProductID:  "productID",
	AccountID:  "accountID",
	InvoiceID:  "invoiceID",
}

var ReviewTableColumns = struct {
	ReviewID   string
	ReviewDate string
	Stars      string
	Comment    string
	Status     string
	ProductID  string
	AccountID  string
	InvoiceID  string
}{
	ReviewID:   "review.reviewID",
	ReviewDate: "review.reviewDate",
	Stars:      "review.stars",
	Comment:    "review.comment",
	Status:     "review.status",
	ProductID:  "review.productID",
	AccountID:  "review.accountID",
	InvoiceID:  "review.invoiceID",
}

// Generated where

var ReviewWhere = struct {
	ReviewID   whereHelperint
	ReviewDate whereHelpertime_Time
	Stars      whereHelperint
	Comment    whereHelperstring
	Status     whereHelperbool
	ProductID  whereHelperint
	AccountID  whereHelperint
	InvoiceID  whereHelperint
}{
	ReviewID:   whereHelperint{field: "\"review\".\"reviewID\""},
	ReviewDate: whereHelpertime_Time{field: "\"review\".\"reviewDate\""},
	Stars:      whereHelperint{field: "\"review\".\"stars\""},
	Comment:    whereHelperstring{field: "\"review\".\"comment\""},
	Status:     whereHelperbool{field: "\"review\".\"status\""},
	ProductID:  whereHelperint{field: "\"review\".\"productID\""},
	AccountID:  whereHelperint{field: "\"review\".\"accountID\""},
	InvoiceID:  whereHelperint{field: "\"review\".\"invoiceID\""},
}

// ReviewRels is where relationship names are stored.
var ReviewRels = struct {
	AccountIDAccount     string
	InvoiceIDInvoice     string
	ProductIDProduct     string
	ReviewIDReplies      string
	ReviewIDReviewImages string
}{
	AccountIDAccount:     "AccountIDAccount",
	InvoiceIDInvoice:     "InvoiceIDInvoice",
	ProductIDProduct:     "ProductIDProduct",
	ReviewIDReplies:      "ReviewIDReplies",
	ReviewIDReviewImages: "ReviewIDReviewImages",
}

// reviewR is where relationships are stored.
type reviewR struct {
	AccountIDAccount     *Account         `boil:"AccountIDAccount" json:"AccountIDAccount" toml:"AccountIDAccount" yaml:"AccountIDAccount"`
	InvoiceIDInvoice     *Invoice         `boil:"InvoiceIDInvoice" json:"InvoiceIDInvoice" toml:"InvoiceIDInvoice" yaml:"InvoiceIDInvoice"`
	ProductIDProduct     *Product         `boil:"ProductIDProduct" json:"ProductIDProduct" toml:"ProductIDProduct" yaml:"ProductIDProduct"`
	ReviewIDReplies      ReplySlice       `boil:"ReviewIDReplies" json:"ReviewIDReplies" toml:"ReviewIDReplies" yaml:"ReviewIDReplies"`
	ReviewIDReviewImages ReviewImageSlice `boil:"ReviewIDReviewImages" json:"ReviewIDReviewImages" toml:"ReviewIDReviewImages" yaml:"ReviewIDReviewImages"`
}

// NewStruct creates a new relationship struct
func (*reviewR) NewStruct() *reviewR {
	return &reviewR{}
}

func (r *reviewR) GetAccountIDAccount() *Account {
	if r == nil {
		return nil
	}
	return r.AccountIDAccount
}

func (r *reviewR) GetInvoiceIDInvoice() *Invoice {
	if r == nil {
		return nil
	}
	return r.InvoiceIDInvoice
}

func (r *reviewR) GetProductIDProduct() *Product {
	if r == nil {
		return nil
	}
	return r.ProductIDProduct
}

func (r *reviewR) GetReviewIDReplies() ReplySlice {
	if r == nil {
		return nil
	}
	return r.ReviewIDReplies
}

func (r *reviewR) GetReviewIDReviewImages() ReviewImageSlice {
	if r == nil {
		return nil
	}
	return r.ReviewIDReviewImages
}

// reviewL is where Load methods for each relationship are stored.
type reviewL struct{}

var (
	reviewAllColumns            = []string{"reviewID", "reviewDate", "stars", "comment", "status", "productID", "accountID", "invoiceID"}
	reviewColumnsWithoutDefault = []string{"reviewDate", "stars", "comment", "status", "productID", "accountID", "invoiceID"}
	reviewColumnsWithDefault    = []string{"reviewID"}
	reviewPrimaryKeyColumns     = []string{"reviewID"}
	reviewGeneratedColumns      = []string{"reviewID"}
)

type (
	// ReviewSlice is an alias for a slice of pointers to Review.
	// This should almost always be used instead of []Review.
	ReviewSlice []*Review
	// ReviewHook is the signature for custom Review hook methods
	ReviewHook func(context.Context, boil.ContextExecutor, *Review) error

	reviewQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	reviewType                 = reflect.TypeOf(&Review{})
	reviewMapping              = queries.MakeStructMapping(reviewType)
	reviewPrimaryKeyMapping, _ = queries.BindMapping(reviewType, reviewMapping, reviewPrimaryKeyColumns)
	reviewInsertCacheMut       sync.RWMutex
	reviewInsertCache          = make(map[string]insertCache)
	reviewUpdateCacheMut       sync.RWMutex
	reviewUpdateCache          = make(map[string]updateCache)
	reviewUpsertCacheMut       sync.RWMutex
	reviewUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var reviewAfterSelectMu sync.Mutex
var reviewAfterSelectHooks []ReviewHook

var reviewBeforeInsertMu sync.Mutex
var reviewBeforeInsertHooks []ReviewHook
var reviewAfterInsertMu sync.Mutex
var reviewAfterInsertHooks []ReviewHook

var reviewBeforeUpdateMu sync.Mutex
var reviewBeforeUpdateHooks []ReviewHook
var reviewAfterUpdateMu sync.Mutex
var reviewAfterUpdateHooks []ReviewHook

var reviewBeforeDeleteMu sync.Mutex
var reviewBeforeDeleteHooks []ReviewHook
var reviewAfterDeleteMu sync.Mutex
var reviewAfterDeleteHooks []ReviewHook

var reviewBeforeUpsertMu sync.Mutex
var reviewBeforeUpsertHooks []ReviewHook
var reviewAfterUpsertMu sync.Mutex
var reviewAfterUpsertHooks []ReviewHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Review) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reviewAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Review) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reviewBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Review) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reviewAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Review) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reviewBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Review) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reviewAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Review) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reviewBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Review) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reviewAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Review) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reviewBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Review) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reviewAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddReviewHook registers your hook function for all future operations.
func AddReviewHook(hookPoint boil.HookPoint, reviewHook ReviewHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		reviewAfterSelectMu.Lock()
		reviewAfterSelectHooks = append(reviewAfterSelectHooks, reviewHook)
		reviewAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		reviewBeforeInsertMu.Lock()
		reviewBeforeInsertHooks = append(reviewBeforeInsertHooks, reviewHook)
		reviewBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		reviewAfterInsertMu.Lock()
		reviewAfterInsertHooks = append(reviewAfterInsertHooks, reviewHook)
		reviewAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		reviewBeforeUpdateMu.Lock()
		reviewBeforeUpdateHooks = append(reviewBeforeUpdateHooks, reviewHook)
		reviewBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		reviewAfterUpdateMu.Lock()
		reviewAfterUpdateHooks = append(reviewAfterUpdateHooks, reviewHook)
		reviewAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		reviewBeforeDeleteMu.Lock()
		reviewBeforeDeleteHooks = append(reviewBeforeDeleteHooks, reviewHook)
		reviewBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		reviewAfterDeleteMu.Lock()
		reviewAfterDeleteHooks = append(reviewAfterDeleteHooks, reviewHook)
		reviewAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		reviewBeforeUpsertMu.Lock()
		reviewBeforeUpsertHooks = append(reviewBeforeUpsertHooks, reviewHook)
		reviewBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		reviewAfterUpsertMu.Lock()
		reviewAfterUpsertHooks = append(reviewAfterUpsertHooks, reviewHook)
		reviewAfterUpsertMu.Unlock()
	}
}

// One returns a single review record from the query.
func (q reviewQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Review, error) {
	o := &Review{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for review")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Review records from the query.
func (q reviewQuery) All(ctx context.Context, exec boil.ContextExecutor) (ReviewSlice, error) {
	var o []*Review

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Review slice")
	}

	if len(reviewAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Review records in the query.
func (q reviewQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count review rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q reviewQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if review exists")
	}

	return count > 0, nil
}

// AccountIDAccount pointed to by the foreign key.
func (o *Review) AccountIDAccount(mods ...qm.QueryMod) accountQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"accountID\" = ?", o.AccountID),
	}

	queryMods = append(queryMods, mods...)

	return Accounts(queryMods...)
}

// InvoiceIDInvoice pointed to by the foreign key.
func (o *Review) InvoiceIDInvoice(mods ...qm.QueryMod) invoiceQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"invoiceID\" = ?", o.InvoiceID),
	}

	queryMods = append(queryMods, mods...)

	return Invoices(queryMods...)
}

// ProductIDProduct pointed to by the foreign key.
func (o *Review) ProductIDProduct(mods ...qm.QueryMod) productQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"productID\" = ?", o.ProductID),
	}

	queryMods = append(queryMods, mods...)

	return Products(queryMods...)
}

// ReviewIDReplies retrieves all the reply's Replies with an executor via reviewID column.
func (o *Review) ReviewIDReplies(mods ...qm.QueryMod) replyQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"reply\".\"reviewID\"=?", o.ReviewID),
	)

	return Replies(queryMods...)
}

// ReviewIDReviewImages retrieves all the review_image's ReviewImages with an executor via reviewID column.
func (o *Review) ReviewIDReviewImages(mods ...qm.QueryMod) reviewImageQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"review_images\".\"reviewID\"=?", o.ReviewID),
	)

	return ReviewImages(queryMods...)
}

// LoadAccountIDAccount allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (reviewL) LoadAccountIDAccount(ctx context.Context, e boil.ContextExecutor, singular bool, maybeReview interface{}, mods queries.Applicator) error {
	var slice []*Review
	var object *Review

	if singular {
		var ok bool
		object, ok = maybeReview.(*Review)
		if !ok {
			object = new(Review)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeReview)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeReview))
			}
		}
	} else {
		s, ok := maybeReview.(*[]*Review)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeReview)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeReview))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &reviewR{}
		}
		args[object.AccountID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &reviewR{}
			}

			args[obj.AccountID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`account`),
		qm.WhereIn(`account.accountID in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Account")
	}

	var resultSlice []*Account
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Account")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for account")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for account")
	}

	if len(accountAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.AccountIDAccount = foreign
		if foreign.R == nil {
			foreign.R = &accountR{}
		}
		foreign.R.AccountIDReviews = append(foreign.R.AccountIDReviews, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.AccountID == foreign.AccountID {
				local.R.AccountIDAccount = foreign
				if foreign.R == nil {
					foreign.R = &accountR{}
				}
				foreign.R.AccountIDReviews = append(foreign.R.AccountIDReviews, local)
				break
			}
		}
	}

	return nil
}

// LoadInvoiceIDInvoice allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (reviewL) LoadInvoiceIDInvoice(ctx context.Context, e boil.ContextExecutor, singular bool, maybeReview interface{}, mods queries.Applicator) error {
	var slice []*Review
	var object *Review

	if singular {
		var ok bool
		object, ok = maybeReview.(*Review)
		if !ok {
			object = new(Review)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeReview)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeReview))
			}
		}
	} else {
		s, ok := maybeReview.(*[]*Review)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeReview)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeReview))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &reviewR{}
		}
		args[object.InvoiceID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &reviewR{}
			}

			args[obj.InvoiceID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`invoice`),
		qm.WhereIn(`invoice.invoiceID in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Invoice")
	}

	var resultSlice []*Invoice
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Invoice")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for invoice")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for invoice")
	}

	if len(invoiceAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.InvoiceIDInvoice = foreign
		if foreign.R == nil {
			foreign.R = &invoiceR{}
		}
		foreign.R.InvoiceIDReviews = append(foreign.R.InvoiceIDReviews, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.InvoiceID == foreign.InvoiceID {
				local.R.InvoiceIDInvoice = foreign
				if foreign.R == nil {
					foreign.R = &invoiceR{}
				}
				foreign.R.InvoiceIDReviews = append(foreign.R.InvoiceIDReviews, local)
				break
			}
		}
	}

	return nil
}

// LoadProductIDProduct allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (reviewL) LoadProductIDProduct(ctx context.Context, e boil.ContextExecutor, singular bool, maybeReview interface{}, mods queries.Applicator) error {
	var slice []*Review
	var object *Review

	if singular {
		var ok bool
		object, ok = maybeReview.(*Review)
		if !ok {
			object = new(Review)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeReview)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeReview))
			}
		}
	} else {
		s, ok := maybeReview.(*[]*Review)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeReview)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeReview))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &reviewR{}
		}
		args[object.ProductID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &reviewR{}
			}

			args[obj.ProductID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`product`),
		qm.WhereIn(`product.productID in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Product")
	}

	var resultSlice []*Product
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Product")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for product")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for product")
	}

	if len(productAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ProductIDProduct = foreign
		if foreign.R == nil {
			foreign.R = &productR{}
		}
		foreign.R.ProductIDReviews = append(foreign.R.ProductIDReviews, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ProductID == foreign.ProductID {
				local.R.ProductIDProduct = foreign
				if foreign.R == nil {
					foreign.R = &productR{}
				}
				foreign.R.ProductIDReviews = append(foreign.R.ProductIDReviews, local)
				break
			}
		}
	}

	return nil
}

// LoadReviewIDReplies allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (reviewL) LoadReviewIDReplies(ctx context.Context, e boil.ContextExecutor, singular bool, maybeReview interface{}, mods queries.Applicator) error {
	var slice []*Review
	var object *Review

	if singular {
		var ok bool
		object, ok = maybeReview.(*Review)
		if !ok {
			object = new(Review)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeReview)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeReview))
			}
		}
	} else {
		s, ok := maybeReview.(*[]*Review)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeReview)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeReview))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &reviewR{}
		}
		args[object.ReviewID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &reviewR{}
			}
			args[obj.ReviewID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`reply`),
		qm.WhereIn(`reply.reviewID in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load reply")
	}

	var resultSlice []*Reply
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice reply")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on reply")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for reply")
	}

	if len(replyAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ReviewIDReplies = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &replyR{}
			}
			foreign.R.ReviewIDReview = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ReviewID == foreign.ReviewID {
				local.R.ReviewIDReplies = append(local.R.ReviewIDReplies, foreign)
				if foreign.R == nil {
					foreign.R = &replyR{}
				}
				foreign.R.ReviewIDReview = local
				break
			}
		}
	}

	return nil
}

// LoadReviewIDReviewImages allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (reviewL) LoadReviewIDReviewImages(ctx context.Context, e boil.ContextExecutor, singular bool, maybeReview interface{}, mods queries.Applicator) error {
	var slice []*Review
	var object *Review

	if singular {
		var ok bool
		object, ok = maybeReview.(*Review)
		if !ok {
			object = new(Review)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeReview)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeReview))
			}
		}
	} else {
		s, ok := maybeReview.(*[]*Review)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeReview)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeReview))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &reviewR{}
		}
		args[object.ReviewID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &reviewR{}
			}
			args[obj.ReviewID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`review_images`),
		qm.WhereIn(`review_images.reviewID in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load review_images")
	}

	var resultSlice []*ReviewImage
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice review_images")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on review_images")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for review_images")
	}

	if len(reviewImageAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ReviewIDReviewImages = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &reviewImageR{}
			}
			foreign.R.ReviewIDReview = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ReviewID == foreign.ReviewID {
				local.R.ReviewIDReviewImages = append(local.R.ReviewIDReviewImages, foreign)
				if foreign.R == nil {
					foreign.R = &reviewImageR{}
				}
				foreign.R.ReviewIDReview = local
				break
			}
		}
	}

	return nil
}

// SetAccountIDAccount of the review to the related item.
// Sets o.R.AccountIDAccount to related.
// Adds o to related.R.AccountIDReviews.
func (o *Review) SetAccountIDAccount(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Account) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"review\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"accountID"}),
		strmangle.WhereClause("\"", "\"", 2, reviewPrimaryKeyColumns),
	)
	values := []interface{}{related.AccountID, o.ReviewID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.AccountID = related.AccountID
	if o.R == nil {
		o.R = &reviewR{
			AccountIDAccount: related,
		}
	} else {
		o.R.AccountIDAccount = related
	}

	if related.R == nil {
		related.R = &accountR{
			AccountIDReviews: ReviewSlice{o},
		}
	} else {
		related.R.AccountIDReviews = append(related.R.AccountIDReviews, o)
	}

	return nil
}

// SetInvoiceIDInvoice of the review to the related item.
// Sets o.R.InvoiceIDInvoice to related.
// Adds o to related.R.InvoiceIDReviews.
func (o *Review) SetInvoiceIDInvoice(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Invoice) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"review\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"invoiceID"}),
		strmangle.WhereClause("\"", "\"", 2, reviewPrimaryKeyColumns),
	)
	values := []interface{}{related.InvoiceID, o.ReviewID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.InvoiceID = related.InvoiceID
	if o.R == nil {
		o.R = &reviewR{
			InvoiceIDInvoice: related,
		}
	} else {
		o.R.InvoiceIDInvoice = related
	}

	if related.R == nil {
		related.R = &invoiceR{
			InvoiceIDReviews: ReviewSlice{o},
		}
	} else {
		related.R.InvoiceIDReviews = append(related.R.InvoiceIDReviews, o)
	}

	return nil
}

// SetProductIDProduct of the review to the related item.
// Sets o.R.ProductIDProduct to related.
// Adds o to related.R.ProductIDReviews.
func (o *Review) SetProductIDProduct(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Product) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"review\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"productID"}),
		strmangle.WhereClause("\"", "\"", 2, reviewPrimaryKeyColumns),
	)
	values := []interface{}{related.ProductID, o.ReviewID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ProductID = related.ProductID
	if o.R == nil {
		o.R = &reviewR{
			ProductIDProduct: related,
		}
	} else {
		o.R.ProductIDProduct = related
	}

	if related.R == nil {
		related.R = &productR{
			ProductIDReviews: ReviewSlice{o},
		}
	} else {
		related.R.ProductIDReviews = append(related.R.ProductIDReviews, o)
	}

	return nil
}

// AddReviewIDReplies adds the given related objects to the existing relationships
// of the review, optionally inserting them as new records.
// Appends related to o.R.ReviewIDReplies.
// Sets related.R.ReviewIDReview appropriately.
func (o *Review) AddReviewIDReplies(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Reply) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ReviewID = o.ReviewID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"reply\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"reviewID"}),
				strmangle.WhereClause("\"", "\"", 2, replyPrimaryKeyColumns),
			)
			values := []interface{}{o.ReviewID, rel.ReplyID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ReviewID = o.ReviewID
		}
	}

	if o.R == nil {
		o.R = &reviewR{
			ReviewIDReplies: related,
		}
	} else {
		o.R.ReviewIDReplies = append(o.R.ReviewIDReplies, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &replyR{
				ReviewIDReview: o,
			}
		} else {
			rel.R.ReviewIDReview = o
		}
	}
	return nil
}

// AddReviewIDReviewImages adds the given related objects to the existing relationships
// of the review, optionally inserting them as new records.
// Appends related to o.R.ReviewIDReviewImages.
// Sets related.R.ReviewIDReview appropriately.
func (o *Review) AddReviewIDReviewImages(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ReviewImage) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ReviewID = o.ReviewID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"review_images\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"reviewID"}),
				strmangle.WhereClause("\"", "\"", 2, reviewImagePrimaryKeyColumns),
			)
			values := []interface{}{o.ReviewID, rel.ReviewImageID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ReviewID = o.ReviewID
		}
	}

	if o.R == nil {
		o.R = &reviewR{
			ReviewIDReviewImages: related,
		}
	} else {
		o.R.ReviewIDReviewImages = append(o.R.ReviewIDReviewImages, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &reviewImageR{
				ReviewIDReview: o,
			}
		} else {
			rel.R.ReviewIDReview = o
		}
	}
	return nil
}

// Reviews retrieves all the records using an executor.
func Reviews(mods ...qm.QueryMod) reviewQuery {
	mods = append(mods, qm.From("\"review\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"review\".*"})
	}

	return reviewQuery{q}
}

// FindReview retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindReview(ctx context.Context, exec boil.ContextExecutor, reviewID int, selectCols ...string) (*Review, error) {
	reviewObj := &Review{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"review\" where \"reviewID\"=$1", sel,
	)

	q := queries.Raw(query, reviewID)

	err := q.Bind(ctx, exec, reviewObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from review")
	}

	if err = reviewObj.doAfterSelectHooks(ctx, exec); err != nil {
		return reviewObj, err
	}

	return reviewObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Review) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no review provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(reviewColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	reviewInsertCacheMut.RLock()
	cache, cached := reviewInsertCache[key]
	reviewInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			reviewAllColumns,
			reviewColumnsWithDefault,
			reviewColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, reviewGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(reviewType, reviewMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(reviewType, reviewMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"review\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"review\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into review")
	}

	if !cached {
		reviewInsertCacheMut.Lock()
		reviewInsertCache[key] = cache
		reviewInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Review.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Review) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	reviewUpdateCacheMut.RLock()
	cache, cached := reviewUpdateCache[key]
	reviewUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			reviewAllColumns,
			reviewPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, reviewGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update review, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"review\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, reviewPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(reviewType, reviewMapping, append(wl, reviewPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update review row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for review")
	}

	if !cached {
		reviewUpdateCacheMut.Lock()
		reviewUpdateCache[key] = cache
		reviewUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q reviewQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for review")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for review")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ReviewSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), reviewPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"review\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, reviewPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in review slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all review")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Review) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no review provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(reviewColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	reviewUpsertCacheMut.RLock()
	cache, cached := reviewUpsertCache[key]
	reviewUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			reviewAllColumns,
			reviewColumnsWithDefault,
			reviewColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			reviewAllColumns,
			reviewPrimaryKeyColumns,
		)

		insert = strmangle.SetComplement(insert, reviewGeneratedColumns)
		update = strmangle.SetComplement(update, reviewGeneratedColumns)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert review, could not build update column list")
		}

		ret := strmangle.SetComplement(reviewAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(reviewPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert review, could not build conflict column list")
			}

			conflict = make([]string, len(reviewPrimaryKeyColumns))
			copy(conflict, reviewPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"review\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(reviewType, reviewMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(reviewType, reviewMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert review")
	}

	if !cached {
		reviewUpsertCacheMut.Lock()
		reviewUpsertCache[key] = cache
		reviewUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Review record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Review) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Review provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), reviewPrimaryKeyMapping)
	sql := "DELETE FROM \"review\" WHERE \"reviewID\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from review")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for review")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q reviewQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no reviewQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from review")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for review")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ReviewSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(reviewBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), reviewPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"review\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, reviewPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from review slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for review")
	}

	if len(reviewAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Review) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindReview(ctx, exec, o.ReviewID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ReviewSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ReviewSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), reviewPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"review\".* FROM \"review\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, reviewPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ReviewSlice")
	}

	*o = slice

	return nil
}

// ReviewExists checks if the Review row exists.
func ReviewExists(ctx context.Context, exec boil.ContextExecutor, reviewID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"review\" where \"reviewID\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, reviewID)
	}
	row := exec.QueryRowContext(ctx, sql, reviewID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if review exists")
	}

	return exists, nil
}

// Exists checks if the Review row exists.
func (o *Review) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ReviewExists(ctx, exec, o.ReviewID)
}
