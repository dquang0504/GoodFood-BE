// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/sqlboiler/v4/queries/qm"
	"github.com/aarondl/sqlboiler/v4/queries/qmhelper"
	"github.com/aarondl/strmangle"
	"github.com/friendsofgo/errors"
)

// ProductImage is an object representing the database table.
type ProductImage struct {
	ProductImageID int    `boil:"productImageID" json:"productImageID" toml:"productImageID" yaml:"productImageID"`
	Image          string `boil:"image" json:"image" toml:"image" yaml:"image"`
	ProductID      int    `boil:"productID" json:"productID" toml:"productID" yaml:"productID"`

	R *productImageR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L productImageL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ProductImageColumns = struct {
	ProductImageID string
	Image          string
	ProductID      string
}{
	ProductImageID: "productImageID",
	Image:          "image",
	ProductID:      "productID",
}

var ProductImageTableColumns = struct {
	ProductImageID string
	Image          string
	ProductID      string
}{
	ProductImageID: "product_images.productImageID",
	Image:          "product_images.image",
	ProductID:      "product_images.productID",
}

// Generated where

var ProductImageWhere = struct {
	ProductImageID whereHelperint
	Image          whereHelperstring
	ProductID      whereHelperint
}{
	ProductImageID: whereHelperint{field: "\"product_images\".\"productImageID\""},
	Image:          whereHelperstring{field: "\"product_images\".\"image\""},
	ProductID:      whereHelperint{field: "\"product_images\".\"productID\""},
}

// ProductImageRels is where relationship names are stored.
var ProductImageRels = struct {
	ProductIDProduct string
}{
	ProductIDProduct: "ProductIDProduct",
}

// productImageR is where relationships are stored.
type productImageR struct {
	ProductIDProduct *Product `boil:"ProductIDProduct" json:"ProductIDProduct" toml:"ProductIDProduct" yaml:"ProductIDProduct"`
}

// NewStruct creates a new relationship struct
func (*productImageR) NewStruct() *productImageR {
	return &productImageR{}
}

func (o *ProductImage) GetProductIDProduct() *Product {
	if o == nil {
		return nil
	}

	return o.R.GetProductIDProduct()
}

func (r *productImageR) GetProductIDProduct() *Product {
	if r == nil {
		return nil
	}

	return r.ProductIDProduct
}

// productImageL is where Load methods for each relationship are stored.
type productImageL struct{}

var (
	productImageAllColumns            = []string{"productImageID", "image", "productID"}
	productImageColumnsWithoutDefault = []string{"image", "productID"}
	productImageColumnsWithDefault    = []string{"productImageID"}
	productImagePrimaryKeyColumns     = []string{"productImageID"}
	productImageGeneratedColumns      = []string{}
)

type (
	// ProductImageSlice is an alias for a slice of pointers to ProductImage.
	// This should almost always be used instead of []ProductImage.
	ProductImageSlice []*ProductImage
	// ProductImageHook is the signature for custom ProductImage hook methods
	ProductImageHook func(context.Context, boil.ContextExecutor, *ProductImage) error

	productImageQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	productImageType                 = reflect.TypeOf(&ProductImage{})
	productImageMapping              = queries.MakeStructMapping(productImageType)
	productImagePrimaryKeyMapping, _ = queries.BindMapping(productImageType, productImageMapping, productImagePrimaryKeyColumns)
	productImageInsertCacheMut       sync.RWMutex
	productImageInsertCache          = make(map[string]insertCache)
	productImageUpdateCacheMut       sync.RWMutex
	productImageUpdateCache          = make(map[string]updateCache)
	productImageUpsertCacheMut       sync.RWMutex
	productImageUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var productImageAfterSelectMu sync.Mutex
var productImageAfterSelectHooks []ProductImageHook

var productImageBeforeInsertMu sync.Mutex
var productImageBeforeInsertHooks []ProductImageHook
var productImageAfterInsertMu sync.Mutex
var productImageAfterInsertHooks []ProductImageHook

var productImageBeforeUpdateMu sync.Mutex
var productImageBeforeUpdateHooks []ProductImageHook
var productImageAfterUpdateMu sync.Mutex
var productImageAfterUpdateHooks []ProductImageHook

var productImageBeforeDeleteMu sync.Mutex
var productImageBeforeDeleteHooks []ProductImageHook
var productImageAfterDeleteMu sync.Mutex
var productImageAfterDeleteHooks []ProductImageHook

var productImageBeforeUpsertMu sync.Mutex
var productImageBeforeUpsertHooks []ProductImageHook
var productImageAfterUpsertMu sync.Mutex
var productImageAfterUpsertHooks []ProductImageHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ProductImage) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productImageAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ProductImage) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productImageBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ProductImage) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productImageAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ProductImage) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productImageBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ProductImage) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productImageAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ProductImage) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productImageBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ProductImage) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productImageAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ProductImage) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productImageBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ProductImage) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productImageAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddProductImageHook registers your hook function for all future operations.
func AddProductImageHook(hookPoint boil.HookPoint, productImageHook ProductImageHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		productImageAfterSelectMu.Lock()
		productImageAfterSelectHooks = append(productImageAfterSelectHooks, productImageHook)
		productImageAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		productImageBeforeInsertMu.Lock()
		productImageBeforeInsertHooks = append(productImageBeforeInsertHooks, productImageHook)
		productImageBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		productImageAfterInsertMu.Lock()
		productImageAfterInsertHooks = append(productImageAfterInsertHooks, productImageHook)
		productImageAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		productImageBeforeUpdateMu.Lock()
		productImageBeforeUpdateHooks = append(productImageBeforeUpdateHooks, productImageHook)
		productImageBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		productImageAfterUpdateMu.Lock()
		productImageAfterUpdateHooks = append(productImageAfterUpdateHooks, productImageHook)
		productImageAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		productImageBeforeDeleteMu.Lock()
		productImageBeforeDeleteHooks = append(productImageBeforeDeleteHooks, productImageHook)
		productImageBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		productImageAfterDeleteMu.Lock()
		productImageAfterDeleteHooks = append(productImageAfterDeleteHooks, productImageHook)
		productImageAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		productImageBeforeUpsertMu.Lock()
		productImageBeforeUpsertHooks = append(productImageBeforeUpsertHooks, productImageHook)
		productImageBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		productImageAfterUpsertMu.Lock()
		productImageAfterUpsertHooks = append(productImageAfterUpsertHooks, productImageHook)
		productImageAfterUpsertMu.Unlock()
	}
}

// One returns a single productImage record from the query.
func (q productImageQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ProductImage, error) {
	o := &ProductImage{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for product_images")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ProductImage records from the query.
func (q productImageQuery) All(ctx context.Context, exec boil.ContextExecutor) (ProductImageSlice, error) {
	var o []*ProductImage

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ProductImage slice")
	}

	if len(productImageAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ProductImage records in the query.
func (q productImageQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count product_images rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q productImageQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if product_images exists")
	}

	return count > 0, nil
}

// ProductIDProduct pointed to by the foreign key.
func (o *ProductImage) ProductIDProduct(mods ...qm.QueryMod) productQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"productID\" = ?", o.ProductID),
	}

	queryMods = append(queryMods, mods...)

	return Products(queryMods...)
}

// LoadProductIDProduct allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (productImageL) LoadProductIDProduct(ctx context.Context, e boil.ContextExecutor, singular bool, maybeProductImage interface{}, mods queries.Applicator) error {
	var slice []*ProductImage
	var object *ProductImage

	if singular {
		var ok bool
		object, ok = maybeProductImage.(*ProductImage)
		if !ok {
			object = new(ProductImage)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeProductImage)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeProductImage))
			}
		}
	} else {
		s, ok := maybeProductImage.(*[]*ProductImage)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeProductImage)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeProductImage))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &productImageR{}
		}
		args[object.ProductID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &productImageR{}
			}

			args[obj.ProductID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`product`),
		qm.WhereIn(`product.productID in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Product")
	}

	var resultSlice []*Product
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Product")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for product")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for product")
	}

	if len(productAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ProductIDProduct = foreign
		if foreign.R == nil {
			foreign.R = &productR{}
		}
		foreign.R.ProductIDProductImages = append(foreign.R.ProductIDProductImages, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ProductID == foreign.ProductID {
				local.R.ProductIDProduct = foreign
				if foreign.R == nil {
					foreign.R = &productR{}
				}
				foreign.R.ProductIDProductImages = append(foreign.R.ProductIDProductImages, local)
				break
			}
		}
	}

	return nil
}

// SetProductIDProduct of the productImage to the related item.
// Sets o.R.ProductIDProduct to related.
// Adds o to related.R.ProductIDProductImages.
func (o *ProductImage) SetProductIDProduct(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Product) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"product_images\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"productID"}),
		strmangle.WhereClause("\"", "\"", 2, productImagePrimaryKeyColumns),
	)
	values := []interface{}{related.ProductID, o.ProductImageID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ProductID = related.ProductID
	if o.R == nil {
		o.R = &productImageR{
			ProductIDProduct: related,
		}
	} else {
		o.R.ProductIDProduct = related
	}

	if related.R == nil {
		related.R = &productR{
			ProductIDProductImages: ProductImageSlice{o},
		}
	} else {
		related.R.ProductIDProductImages = append(related.R.ProductIDProductImages, o)
	}

	return nil
}

// ProductImages retrieves all the records using an executor.
func ProductImages(mods ...qm.QueryMod) productImageQuery {
	mods = append(mods, qm.From("\"product_images\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"product_images\".*"})
	}

	return productImageQuery{q}
}

// FindProductImage retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindProductImage(ctx context.Context, exec boil.ContextExecutor, productImageID int, selectCols ...string) (*ProductImage, error) {
	productImageObj := &ProductImage{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"product_images\" where \"productImageID\"=$1", sel,
	)

	q := queries.Raw(query, productImageID)

	err := q.Bind(ctx, exec, productImageObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from product_images")
	}

	if err = productImageObj.doAfterSelectHooks(ctx, exec); err != nil {
		return productImageObj, err
	}

	return productImageObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ProductImage) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no product_images provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(productImageColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	productImageInsertCacheMut.RLock()
	cache, cached := productImageInsertCache[key]
	productImageInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			productImageAllColumns,
			productImageColumnsWithDefault,
			productImageColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(productImageType, productImageMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(productImageType, productImageMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"product_images\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"product_images\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into product_images")
	}

	if !cached {
		productImageInsertCacheMut.Lock()
		productImageInsertCache[key] = cache
		productImageInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ProductImage.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ProductImage) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	productImageUpdateCacheMut.RLock()
	cache, cached := productImageUpdateCache[key]
	productImageUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			productImageAllColumns,
			productImagePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update product_images, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"product_images\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, productImagePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(productImageType, productImageMapping, append(wl, productImagePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update product_images row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for product_images")
	}

	if !cached {
		productImageUpdateCacheMut.Lock()
		productImageUpdateCache[key] = cache
		productImageUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q productImageQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for product_images")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for product_images")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ProductImageSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), productImagePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"product_images\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, productImagePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in productImage slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all productImage")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ProductImage) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no product_images provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(productImageColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	productImageUpsertCacheMut.RLock()
	cache, cached := productImageUpsertCache[key]
	productImageUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			productImageAllColumns,
			productImageColumnsWithDefault,
			productImageColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			productImageAllColumns,
			productImagePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert product_images, could not build update column list")
		}

		ret := strmangle.SetComplement(productImageAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(productImagePrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert product_images, could not build conflict column list")
			}

			conflict = make([]string, len(productImagePrimaryKeyColumns))
			copy(conflict, productImagePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"product_images\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(productImageType, productImageMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(productImageType, productImageMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert product_images")
	}

	if !cached {
		productImageUpsertCacheMut.Lock()
		productImageUpsertCache[key] = cache
		productImageUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single ProductImage record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ProductImage) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ProductImage provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), productImagePrimaryKeyMapping)
	sql := "DELETE FROM \"product_images\" WHERE \"productImageID\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from product_images")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for product_images")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q productImageQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no productImageQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from product_images")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for product_images")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ProductImageSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(productImageBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), productImagePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"product_images\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, productImagePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from productImage slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for product_images")
	}

	if len(productImageAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ProductImage) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindProductImage(ctx, exec, o.ProductImageID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ProductImageSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ProductImageSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), productImagePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"product_images\".* FROM \"product_images\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, productImagePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ProductImageSlice")
	}

	*o = slice

	return nil
}

// ProductImageExists checks if the ProductImage row exists.
func ProductImageExists(ctx context.Context, exec boil.ContextExecutor, productImageID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"product_images\" where \"productImageID\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, productImageID)
	}
	row := exec.QueryRowContext(ctx, sql, productImageID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if product_images exists")
	}

	return exists, nil
}

// Exists checks if the ProductImage row exists.
func (o *ProductImage) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ProductImageExists(ctx, exec, o.ProductImageID)
}
