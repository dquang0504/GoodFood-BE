// Code generated by SQLBoiler 4.18.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testDistricts(t *testing.T) {
	t.Parallel()

	query := Districts()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testDistrictsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &District{}
	if err = randomize.Struct(seed, o, districtDBTypes, true, districtColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize District struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Districts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDistrictsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &District{}
	if err = randomize.Struct(seed, o, districtDBTypes, true, districtColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize District struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Districts().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Districts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDistrictsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &District{}
	if err = randomize.Struct(seed, o, districtDBTypes, true, districtColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize District struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DistrictSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Districts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDistrictsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &District{}
	if err = randomize.Struct(seed, o, districtDBTypes, true, districtColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize District struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := DistrictExists(ctx, tx, o.DistrictID)
	if err != nil {
		t.Errorf("Unable to check if District exists: %s", err)
	}
	if !e {
		t.Errorf("Expected DistrictExists to return true, but got false.")
	}
}

func testDistrictsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &District{}
	if err = randomize.Struct(seed, o, districtDBTypes, true, districtColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize District struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	districtFound, err := FindDistrict(ctx, tx, o.DistrictID)
	if err != nil {
		t.Error(err)
	}

	if districtFound == nil {
		t.Error("want a record, got nil")
	}
}

func testDistrictsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &District{}
	if err = randomize.Struct(seed, o, districtDBTypes, true, districtColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize District struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Districts().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testDistrictsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &District{}
	if err = randomize.Struct(seed, o, districtDBTypes, true, districtColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize District struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Districts().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testDistrictsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	districtOne := &District{}
	districtTwo := &District{}
	if err = randomize.Struct(seed, districtOne, districtDBTypes, false, districtColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize District struct: %s", err)
	}
	if err = randomize.Struct(seed, districtTwo, districtDBTypes, false, districtColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize District struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = districtOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = districtTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Districts().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testDistrictsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	districtOne := &District{}
	districtTwo := &District{}
	if err = randomize.Struct(seed, districtOne, districtDBTypes, false, districtColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize District struct: %s", err)
	}
	if err = randomize.Struct(seed, districtTwo, districtDBTypes, false, districtColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize District struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = districtOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = districtTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Districts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func districtBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *District) error {
	*o = District{}
	return nil
}

func districtAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *District) error {
	*o = District{}
	return nil
}

func districtAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *District) error {
	*o = District{}
	return nil
}

func districtBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *District) error {
	*o = District{}
	return nil
}

func districtAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *District) error {
	*o = District{}
	return nil
}

func districtBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *District) error {
	*o = District{}
	return nil
}

func districtAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *District) error {
	*o = District{}
	return nil
}

func districtBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *District) error {
	*o = District{}
	return nil
}

func districtAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *District) error {
	*o = District{}
	return nil
}

func testDistrictsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &District{}
	o := &District{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, districtDBTypes, false); err != nil {
		t.Errorf("Unable to randomize District object: %s", err)
	}

	AddDistrictHook(boil.BeforeInsertHook, districtBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	districtBeforeInsertHooks = []DistrictHook{}

	AddDistrictHook(boil.AfterInsertHook, districtAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	districtAfterInsertHooks = []DistrictHook{}

	AddDistrictHook(boil.AfterSelectHook, districtAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	districtAfterSelectHooks = []DistrictHook{}

	AddDistrictHook(boil.BeforeUpdateHook, districtBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	districtBeforeUpdateHooks = []DistrictHook{}

	AddDistrictHook(boil.AfterUpdateHook, districtAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	districtAfterUpdateHooks = []DistrictHook{}

	AddDistrictHook(boil.BeforeDeleteHook, districtBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	districtBeforeDeleteHooks = []DistrictHook{}

	AddDistrictHook(boil.AfterDeleteHook, districtAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	districtAfterDeleteHooks = []DistrictHook{}

	AddDistrictHook(boil.BeforeUpsertHook, districtBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	districtBeforeUpsertHooks = []DistrictHook{}

	AddDistrictHook(boil.AfterUpsertHook, districtAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	districtAfterUpsertHooks = []DistrictHook{}
}

func testDistrictsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &District{}
	if err = randomize.Struct(seed, o, districtDBTypes, true, districtColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize District struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Districts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDistrictsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &District{}
	if err = randomize.Struct(seed, o, districtDBTypes, true); err != nil {
		t.Errorf("Unable to randomize District struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(districtColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Districts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDistrictToManyDistrictIDWards(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a District
	var b, c Ward

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, districtDBTypes, true, districtColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize District struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, wardDBTypes, false, wardColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, wardDBTypes, false, wardColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.DistrictID = a.DistrictID
	c.DistrictID = a.DistrictID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.DistrictIDWards().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.DistrictID == b.DistrictID {
			bFound = true
		}
		if v.DistrictID == c.DistrictID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := DistrictSlice{&a}
	if err = a.L.LoadDistrictIDWards(ctx, tx, false, (*[]*District)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.DistrictIDWards); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.DistrictIDWards = nil
	if err = a.L.LoadDistrictIDWards(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.DistrictIDWards); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testDistrictToManyAddOpDistrictIDWards(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a District
	var b, c, d, e Ward

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, districtDBTypes, false, strmangle.SetComplement(districtPrimaryKeyColumns, districtColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Ward{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, wardDBTypes, false, strmangle.SetComplement(wardPrimaryKeyColumns, wardColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Ward{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddDistrictIDWards(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.DistrictID != first.DistrictID {
			t.Error("foreign key was wrong value", a.DistrictID, first.DistrictID)
		}
		if a.DistrictID != second.DistrictID {
			t.Error("foreign key was wrong value", a.DistrictID, second.DistrictID)
		}

		if first.R.DistrictIDDistrict != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.DistrictIDDistrict != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.DistrictIDWards[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.DistrictIDWards[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.DistrictIDWards().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testDistrictToOneProvinceUsingProvinceIDProvince(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local District
	var foreign Province

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, districtDBTypes, false, districtColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize District struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, provinceDBTypes, false, provinceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Province struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.ProvinceID = foreign.ProvinceID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.ProvinceIDProvince().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ProvinceID != foreign.ProvinceID {
		t.Errorf("want: %v, got %v", foreign.ProvinceID, check.ProvinceID)
	}

	ranAfterSelectHook := false
	AddProvinceHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Province) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := DistrictSlice{&local}
	if err = local.L.LoadProvinceIDProvince(ctx, tx, false, (*[]*District)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ProvinceIDProvince == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.ProvinceIDProvince = nil
	if err = local.L.LoadProvinceIDProvince(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ProvinceIDProvince == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testDistrictToOneSetOpProvinceUsingProvinceIDProvince(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a District
	var b, c Province

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, districtDBTypes, false, strmangle.SetComplement(districtPrimaryKeyColumns, districtColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, provinceDBTypes, false, strmangle.SetComplement(provincePrimaryKeyColumns, provinceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, provinceDBTypes, false, strmangle.SetComplement(provincePrimaryKeyColumns, provinceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Province{&b, &c} {
		err = a.SetProvinceIDProvince(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.ProvinceIDProvince != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ProvinceIDDistricts[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.ProvinceID != x.ProvinceID {
			t.Error("foreign key was wrong value", a.ProvinceID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ProvinceID))
		reflect.Indirect(reflect.ValueOf(&a.ProvinceID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.ProvinceID != x.ProvinceID {
			t.Error("foreign key was wrong value", a.ProvinceID, x.ProvinceID)
		}
	}
}

func testDistrictsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &District{}
	if err = randomize.Struct(seed, o, districtDBTypes, true, districtColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize District struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDistrictsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &District{}
	if err = randomize.Struct(seed, o, districtDBTypes, true, districtColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize District struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DistrictSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDistrictsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &District{}
	if err = randomize.Struct(seed, o, districtDBTypes, true, districtColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize District struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Districts().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	districtDBTypes = map[string]string{`DistrictID`: `integer`, `DistrictCode`: `integer`, `DistrictName`: `character varying`, `ProvinceID`: `integer`}
	_               = bytes.MinRead
)

func testDistrictsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(districtPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(districtAllColumns) == len(districtPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &District{}
	if err = randomize.Struct(seed, o, districtDBTypes, true, districtColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize District struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Districts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, districtDBTypes, true, districtPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize District struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testDistrictsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(districtAllColumns) == len(districtPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &District{}
	if err = randomize.Struct(seed, o, districtDBTypes, true, districtColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize District struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Districts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, districtDBTypes, true, districtPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize District struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(districtAllColumns, districtPrimaryKeyColumns) {
		fields = districtAllColumns
	} else {
		fields = strmangle.SetComplement(
			districtAllColumns,
			districtPrimaryKeyColumns,
		)
		fields = strmangle.SetComplement(fields, districtGeneratedColumns)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := DistrictSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testDistrictsUpsert(t *testing.T) {
	t.Parallel()

	if len(districtAllColumns) == len(districtPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := District{}
	if err = randomize.Struct(seed, &o, districtDBTypes, true); err != nil {
		t.Errorf("Unable to randomize District struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert District: %s", err)
	}

	count, err := Districts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, districtDBTypes, false, districtPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize District struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert District: %s", err)
	}

	count, err = Districts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
