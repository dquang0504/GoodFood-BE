// Code generated by SQLBoiler 4.18.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testReviewImages(t *testing.T) {
	t.Parallel()

	query := ReviewImages()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testReviewImagesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ReviewImage{}
	if err = randomize.Struct(seed, o, reviewImageDBTypes, true, reviewImageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ReviewImage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ReviewImages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testReviewImagesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ReviewImage{}
	if err = randomize.Struct(seed, o, reviewImageDBTypes, true, reviewImageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ReviewImage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := ReviewImages().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ReviewImages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testReviewImagesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ReviewImage{}
	if err = randomize.Struct(seed, o, reviewImageDBTypes, true, reviewImageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ReviewImage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ReviewImageSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ReviewImages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testReviewImagesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ReviewImage{}
	if err = randomize.Struct(seed, o, reviewImageDBTypes, true, reviewImageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ReviewImage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := ReviewImageExists(ctx, tx, o.ReviewImageID)
	if err != nil {
		t.Errorf("Unable to check if ReviewImage exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ReviewImageExists to return true, but got false.")
	}
}

func testReviewImagesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ReviewImage{}
	if err = randomize.Struct(seed, o, reviewImageDBTypes, true, reviewImageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ReviewImage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	reviewImageFound, err := FindReviewImage(ctx, tx, o.ReviewImageID)
	if err != nil {
		t.Error(err)
	}

	if reviewImageFound == nil {
		t.Error("want a record, got nil")
	}
}

func testReviewImagesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ReviewImage{}
	if err = randomize.Struct(seed, o, reviewImageDBTypes, true, reviewImageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ReviewImage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = ReviewImages().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testReviewImagesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ReviewImage{}
	if err = randomize.Struct(seed, o, reviewImageDBTypes, true, reviewImageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ReviewImage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := ReviewImages().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testReviewImagesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	reviewImageOne := &ReviewImage{}
	reviewImageTwo := &ReviewImage{}
	if err = randomize.Struct(seed, reviewImageOne, reviewImageDBTypes, false, reviewImageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ReviewImage struct: %s", err)
	}
	if err = randomize.Struct(seed, reviewImageTwo, reviewImageDBTypes, false, reviewImageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ReviewImage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = reviewImageOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = reviewImageTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ReviewImages().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testReviewImagesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	reviewImageOne := &ReviewImage{}
	reviewImageTwo := &ReviewImage{}
	if err = randomize.Struct(seed, reviewImageOne, reviewImageDBTypes, false, reviewImageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ReviewImage struct: %s", err)
	}
	if err = randomize.Struct(seed, reviewImageTwo, reviewImageDBTypes, false, reviewImageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ReviewImage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = reviewImageOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = reviewImageTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ReviewImages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func reviewImageBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *ReviewImage) error {
	*o = ReviewImage{}
	return nil
}

func reviewImageAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *ReviewImage) error {
	*o = ReviewImage{}
	return nil
}

func reviewImageAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *ReviewImage) error {
	*o = ReviewImage{}
	return nil
}

func reviewImageBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ReviewImage) error {
	*o = ReviewImage{}
	return nil
}

func reviewImageAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ReviewImage) error {
	*o = ReviewImage{}
	return nil
}

func reviewImageBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ReviewImage) error {
	*o = ReviewImage{}
	return nil
}

func reviewImageAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ReviewImage) error {
	*o = ReviewImage{}
	return nil
}

func reviewImageBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ReviewImage) error {
	*o = ReviewImage{}
	return nil
}

func reviewImageAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ReviewImage) error {
	*o = ReviewImage{}
	return nil
}

func testReviewImagesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &ReviewImage{}
	o := &ReviewImage{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, reviewImageDBTypes, false); err != nil {
		t.Errorf("Unable to randomize ReviewImage object: %s", err)
	}

	AddReviewImageHook(boil.BeforeInsertHook, reviewImageBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	reviewImageBeforeInsertHooks = []ReviewImageHook{}

	AddReviewImageHook(boil.AfterInsertHook, reviewImageAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	reviewImageAfterInsertHooks = []ReviewImageHook{}

	AddReviewImageHook(boil.AfterSelectHook, reviewImageAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	reviewImageAfterSelectHooks = []ReviewImageHook{}

	AddReviewImageHook(boil.BeforeUpdateHook, reviewImageBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	reviewImageBeforeUpdateHooks = []ReviewImageHook{}

	AddReviewImageHook(boil.AfterUpdateHook, reviewImageAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	reviewImageAfterUpdateHooks = []ReviewImageHook{}

	AddReviewImageHook(boil.BeforeDeleteHook, reviewImageBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	reviewImageBeforeDeleteHooks = []ReviewImageHook{}

	AddReviewImageHook(boil.AfterDeleteHook, reviewImageAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	reviewImageAfterDeleteHooks = []ReviewImageHook{}

	AddReviewImageHook(boil.BeforeUpsertHook, reviewImageBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	reviewImageBeforeUpsertHooks = []ReviewImageHook{}

	AddReviewImageHook(boil.AfterUpsertHook, reviewImageAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	reviewImageAfterUpsertHooks = []ReviewImageHook{}
}

func testReviewImagesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ReviewImage{}
	if err = randomize.Struct(seed, o, reviewImageDBTypes, true, reviewImageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ReviewImage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ReviewImages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testReviewImagesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ReviewImage{}
	if err = randomize.Struct(seed, o, reviewImageDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ReviewImage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(reviewImageColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := ReviewImages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testReviewImageToOneReviewUsingReviewIDReview(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local ReviewImage
	var foreign Review

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, reviewImageDBTypes, false, reviewImageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ReviewImage struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, reviewDBTypes, false, reviewColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Review struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.ReviewID = foreign.ReviewID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.ReviewIDReview().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ReviewID != foreign.ReviewID {
		t.Errorf("want: %v, got %v", foreign.ReviewID, check.ReviewID)
	}

	ranAfterSelectHook := false
	AddReviewHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Review) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := ReviewImageSlice{&local}
	if err = local.L.LoadReviewIDReview(ctx, tx, false, (*[]*ReviewImage)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ReviewIDReview == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.ReviewIDReview = nil
	if err = local.L.LoadReviewIDReview(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ReviewIDReview == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testReviewImageToOneSetOpReviewUsingReviewIDReview(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ReviewImage
	var b, c Review

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, reviewImageDBTypes, false, strmangle.SetComplement(reviewImagePrimaryKeyColumns, reviewImageColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, reviewDBTypes, false, strmangle.SetComplement(reviewPrimaryKeyColumns, reviewColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, reviewDBTypes, false, strmangle.SetComplement(reviewPrimaryKeyColumns, reviewColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Review{&b, &c} {
		err = a.SetReviewIDReview(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.ReviewIDReview != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ReviewIDReviewImages[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.ReviewID != x.ReviewID {
			t.Error("foreign key was wrong value", a.ReviewID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ReviewID))
		reflect.Indirect(reflect.ValueOf(&a.ReviewID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.ReviewID != x.ReviewID {
			t.Error("foreign key was wrong value", a.ReviewID, x.ReviewID)
		}
	}
}

func testReviewImagesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ReviewImage{}
	if err = randomize.Struct(seed, o, reviewImageDBTypes, true, reviewImageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ReviewImage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testReviewImagesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ReviewImage{}
	if err = randomize.Struct(seed, o, reviewImageDBTypes, true, reviewImageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ReviewImage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ReviewImageSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testReviewImagesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ReviewImage{}
	if err = randomize.Struct(seed, o, reviewImageDBTypes, true, reviewImageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ReviewImage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ReviewImages().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	reviewImageDBTypes = map[string]string{`ReviewImageID`: `integer`, `ImageName`: `character varying`, `ReviewID`: `integer`}
	_                  = bytes.MinRead
)

func testReviewImagesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(reviewImagePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(reviewImageAllColumns) == len(reviewImagePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ReviewImage{}
	if err = randomize.Struct(seed, o, reviewImageDBTypes, true, reviewImageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ReviewImage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ReviewImages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, reviewImageDBTypes, true, reviewImagePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ReviewImage struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testReviewImagesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(reviewImageAllColumns) == len(reviewImagePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ReviewImage{}
	if err = randomize.Struct(seed, o, reviewImageDBTypes, true, reviewImageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ReviewImage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ReviewImages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, reviewImageDBTypes, true, reviewImagePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ReviewImage struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(reviewImageAllColumns, reviewImagePrimaryKeyColumns) {
		fields = reviewImageAllColumns
	} else {
		fields = strmangle.SetComplement(
			reviewImageAllColumns,
			reviewImagePrimaryKeyColumns,
		)
		fields = strmangle.SetComplement(fields, reviewImageGeneratedColumns)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := ReviewImageSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testReviewImagesUpsert(t *testing.T) {
	t.Parallel()

	if len(reviewImageAllColumns) == len(reviewImagePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := ReviewImage{}
	if err = randomize.Struct(seed, &o, reviewImageDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ReviewImage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ReviewImage: %s", err)
	}

	count, err := ReviewImages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, reviewImageDBTypes, false, reviewImagePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ReviewImage struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ReviewImage: %s", err)
	}

	count, err = ReviewImages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
