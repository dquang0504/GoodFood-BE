// Code generated by SQLBoiler 4.18.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// CartDetail is an object representing the database table.
type CartDetail struct {
	CartID    int `boil:"cartID" json:"cartID" toml:"cartID" yaml:"cartID"`
	Quantity  int `boil:"quantity" json:"quantity" toml:"quantity" yaml:"quantity"`
	ProductID int `boil:"productID" json:"productID" toml:"productID" yaml:"productID"`
	AccountID int `boil:"accountID" json:"accountID" toml:"accountID" yaml:"accountID"`

	R *cartDetailR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L cartDetailL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CartDetailColumns = struct {
	CartID    string
	Quantity  string
	ProductID string
	AccountID string
}{
	CartID:    "cartID",
	Quantity:  "quantity",
	ProductID: "productID",
	AccountID: "accountID",
}

var CartDetailTableColumns = struct {
	CartID    string
	Quantity  string
	ProductID string
	AccountID string
}{
	CartID:    "cart_detail.cartID",
	Quantity:  "cart_detail.quantity",
	ProductID: "cart_detail.productID",
	AccountID: "cart_detail.accountID",
}

// Generated where

var CartDetailWhere = struct {
	CartID    whereHelperint
	Quantity  whereHelperint
	ProductID whereHelperint
	AccountID whereHelperint
}{
	CartID:    whereHelperint{field: "\"cart_detail\".\"cartID\""},
	Quantity:  whereHelperint{field: "\"cart_detail\".\"quantity\""},
	ProductID: whereHelperint{field: "\"cart_detail\".\"productID\""},
	AccountID: whereHelperint{field: "\"cart_detail\".\"accountID\""},
}

// CartDetailRels is where relationship names are stored.
var CartDetailRels = struct {
	AccountIDAccount string
	ProductIDProduct string
}{
	AccountIDAccount: "AccountIDAccount",
	ProductIDProduct: "ProductIDProduct",
}

// cartDetailR is where relationships are stored.
type cartDetailR struct {
	AccountIDAccount *Account `boil:"AccountIDAccount" json:"AccountIDAccount" toml:"AccountIDAccount" yaml:"AccountIDAccount"`
	ProductIDProduct *Product `boil:"ProductIDProduct" json:"ProductIDProduct" toml:"ProductIDProduct" yaml:"ProductIDProduct"`
}

// NewStruct creates a new relationship struct
func (*cartDetailR) NewStruct() *cartDetailR {
	return &cartDetailR{}
}

func (r *cartDetailR) GetAccountIDAccount() *Account {
	if r == nil {
		return nil
	}
	return r.AccountIDAccount
}

func (r *cartDetailR) GetProductIDProduct() *Product {
	if r == nil {
		return nil
	}
	return r.ProductIDProduct
}

// cartDetailL is where Load methods for each relationship are stored.
type cartDetailL struct{}

var (
	cartDetailAllColumns            = []string{"cartID", "quantity", "productID", "accountID"}
	cartDetailColumnsWithoutDefault = []string{"quantity", "productID", "accountID"}
	cartDetailColumnsWithDefault    = []string{"cartID"}
	cartDetailPrimaryKeyColumns     = []string{"cartID"}
	cartDetailGeneratedColumns      = []string{"cartID"}
)

type (
	// CartDetailSlice is an alias for a slice of pointers to CartDetail.
	// This should almost always be used instead of []CartDetail.
	CartDetailSlice []*CartDetail
	// CartDetailHook is the signature for custom CartDetail hook methods
	CartDetailHook func(context.Context, boil.ContextExecutor, *CartDetail) error

	cartDetailQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	cartDetailType                 = reflect.TypeOf(&CartDetail{})
	cartDetailMapping              = queries.MakeStructMapping(cartDetailType)
	cartDetailPrimaryKeyMapping, _ = queries.BindMapping(cartDetailType, cartDetailMapping, cartDetailPrimaryKeyColumns)
	cartDetailInsertCacheMut       sync.RWMutex
	cartDetailInsertCache          = make(map[string]insertCache)
	cartDetailUpdateCacheMut       sync.RWMutex
	cartDetailUpdateCache          = make(map[string]updateCache)
	cartDetailUpsertCacheMut       sync.RWMutex
	cartDetailUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var cartDetailAfterSelectMu sync.Mutex
var cartDetailAfterSelectHooks []CartDetailHook

var cartDetailBeforeInsertMu sync.Mutex
var cartDetailBeforeInsertHooks []CartDetailHook
var cartDetailAfterInsertMu sync.Mutex
var cartDetailAfterInsertHooks []CartDetailHook

var cartDetailBeforeUpdateMu sync.Mutex
var cartDetailBeforeUpdateHooks []CartDetailHook
var cartDetailAfterUpdateMu sync.Mutex
var cartDetailAfterUpdateHooks []CartDetailHook

var cartDetailBeforeDeleteMu sync.Mutex
var cartDetailBeforeDeleteHooks []CartDetailHook
var cartDetailAfterDeleteMu sync.Mutex
var cartDetailAfterDeleteHooks []CartDetailHook

var cartDetailBeforeUpsertMu sync.Mutex
var cartDetailBeforeUpsertHooks []CartDetailHook
var cartDetailAfterUpsertMu sync.Mutex
var cartDetailAfterUpsertHooks []CartDetailHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *CartDetail) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cartDetailAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *CartDetail) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cartDetailBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *CartDetail) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cartDetailAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *CartDetail) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cartDetailBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *CartDetail) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cartDetailAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *CartDetail) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cartDetailBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *CartDetail) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cartDetailAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *CartDetail) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cartDetailBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *CartDetail) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cartDetailAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCartDetailHook registers your hook function for all future operations.
func AddCartDetailHook(hookPoint boil.HookPoint, cartDetailHook CartDetailHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		cartDetailAfterSelectMu.Lock()
		cartDetailAfterSelectHooks = append(cartDetailAfterSelectHooks, cartDetailHook)
		cartDetailAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		cartDetailBeforeInsertMu.Lock()
		cartDetailBeforeInsertHooks = append(cartDetailBeforeInsertHooks, cartDetailHook)
		cartDetailBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		cartDetailAfterInsertMu.Lock()
		cartDetailAfterInsertHooks = append(cartDetailAfterInsertHooks, cartDetailHook)
		cartDetailAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		cartDetailBeforeUpdateMu.Lock()
		cartDetailBeforeUpdateHooks = append(cartDetailBeforeUpdateHooks, cartDetailHook)
		cartDetailBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		cartDetailAfterUpdateMu.Lock()
		cartDetailAfterUpdateHooks = append(cartDetailAfterUpdateHooks, cartDetailHook)
		cartDetailAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		cartDetailBeforeDeleteMu.Lock()
		cartDetailBeforeDeleteHooks = append(cartDetailBeforeDeleteHooks, cartDetailHook)
		cartDetailBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		cartDetailAfterDeleteMu.Lock()
		cartDetailAfterDeleteHooks = append(cartDetailAfterDeleteHooks, cartDetailHook)
		cartDetailAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		cartDetailBeforeUpsertMu.Lock()
		cartDetailBeforeUpsertHooks = append(cartDetailBeforeUpsertHooks, cartDetailHook)
		cartDetailBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		cartDetailAfterUpsertMu.Lock()
		cartDetailAfterUpsertHooks = append(cartDetailAfterUpsertHooks, cartDetailHook)
		cartDetailAfterUpsertMu.Unlock()
	}
}

// One returns a single cartDetail record from the query.
func (q cartDetailQuery) One(ctx context.Context, exec boil.ContextExecutor) (*CartDetail, error) {
	o := &CartDetail{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for cart_detail")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all CartDetail records from the query.
func (q cartDetailQuery) All(ctx context.Context, exec boil.ContextExecutor) (CartDetailSlice, error) {
	var o []*CartDetail

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to CartDetail slice")
	}

	if len(cartDetailAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all CartDetail records in the query.
func (q cartDetailQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count cart_detail rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q cartDetailQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if cart_detail exists")
	}

	return count > 0, nil
}

// AccountIDAccount pointed to by the foreign key.
func (o *CartDetail) AccountIDAccount(mods ...qm.QueryMod) accountQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"accountID\" = ?", o.AccountID),
	}

	queryMods = append(queryMods, mods...)

	return Accounts(queryMods...)
}

// ProductIDProduct pointed to by the foreign key.
func (o *CartDetail) ProductIDProduct(mods ...qm.QueryMod) productQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"productID\" = ?", o.ProductID),
	}

	queryMods = append(queryMods, mods...)

	return Products(queryMods...)
}

// LoadAccountIDAccount allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (cartDetailL) LoadAccountIDAccount(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCartDetail interface{}, mods queries.Applicator) error {
	var slice []*CartDetail
	var object *CartDetail

	if singular {
		var ok bool
		object, ok = maybeCartDetail.(*CartDetail)
		if !ok {
			object = new(CartDetail)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCartDetail)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCartDetail))
			}
		}
	} else {
		s, ok := maybeCartDetail.(*[]*CartDetail)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCartDetail)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCartDetail))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &cartDetailR{}
		}
		args[object.AccountID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &cartDetailR{}
			}

			args[obj.AccountID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`account`),
		qm.WhereIn(`account.accountID in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Account")
	}

	var resultSlice []*Account
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Account")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for account")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for account")
	}

	if len(accountAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.AccountIDAccount = foreign
		if foreign.R == nil {
			foreign.R = &accountR{}
		}
		foreign.R.AccountIDCartDetails = append(foreign.R.AccountIDCartDetails, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.AccountID == foreign.AccountID {
				local.R.AccountIDAccount = foreign
				if foreign.R == nil {
					foreign.R = &accountR{}
				}
				foreign.R.AccountIDCartDetails = append(foreign.R.AccountIDCartDetails, local)
				break
			}
		}
	}

	return nil
}

// LoadProductIDProduct allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (cartDetailL) LoadProductIDProduct(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCartDetail interface{}, mods queries.Applicator) error {
	var slice []*CartDetail
	var object *CartDetail

	if singular {
		var ok bool
		object, ok = maybeCartDetail.(*CartDetail)
		if !ok {
			object = new(CartDetail)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCartDetail)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCartDetail))
			}
		}
	} else {
		s, ok := maybeCartDetail.(*[]*CartDetail)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCartDetail)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCartDetail))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &cartDetailR{}
		}
		args[object.ProductID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &cartDetailR{}
			}

			args[obj.ProductID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`product`),
		qm.WhereIn(`product.productID in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Product")
	}

	var resultSlice []*Product
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Product")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for product")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for product")
	}

	if len(productAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ProductIDProduct = foreign
		if foreign.R == nil {
			foreign.R = &productR{}
		}
		foreign.R.ProductIDCartDetails = append(foreign.R.ProductIDCartDetails, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ProductID == foreign.ProductID {
				local.R.ProductIDProduct = foreign
				if foreign.R == nil {
					foreign.R = &productR{}
				}
				foreign.R.ProductIDCartDetails = append(foreign.R.ProductIDCartDetails, local)
				break
			}
		}
	}

	return nil
}

// SetAccountIDAccount of the cartDetail to the related item.
// Sets o.R.AccountIDAccount to related.
// Adds o to related.R.AccountIDCartDetails.
func (o *CartDetail) SetAccountIDAccount(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Account) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"cart_detail\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"accountID"}),
		strmangle.WhereClause("\"", "\"", 2, cartDetailPrimaryKeyColumns),
	)
	values := []interface{}{related.AccountID, o.CartID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.AccountID = related.AccountID
	if o.R == nil {
		o.R = &cartDetailR{
			AccountIDAccount: related,
		}
	} else {
		o.R.AccountIDAccount = related
	}

	if related.R == nil {
		related.R = &accountR{
			AccountIDCartDetails: CartDetailSlice{o},
		}
	} else {
		related.R.AccountIDCartDetails = append(related.R.AccountIDCartDetails, o)
	}

	return nil
}

// SetProductIDProduct of the cartDetail to the related item.
// Sets o.R.ProductIDProduct to related.
// Adds o to related.R.ProductIDCartDetails.
func (o *CartDetail) SetProductIDProduct(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Product) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"cart_detail\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"productID"}),
		strmangle.WhereClause("\"", "\"", 2, cartDetailPrimaryKeyColumns),
	)
	values := []interface{}{related.ProductID, o.CartID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ProductID = related.ProductID
	if o.R == nil {
		o.R = &cartDetailR{
			ProductIDProduct: related,
		}
	} else {
		o.R.ProductIDProduct = related
	}

	if related.R == nil {
		related.R = &productR{
			ProductIDCartDetails: CartDetailSlice{o},
		}
	} else {
		related.R.ProductIDCartDetails = append(related.R.ProductIDCartDetails, o)
	}

	return nil
}

// CartDetails retrieves all the records using an executor.
func CartDetails(mods ...qm.QueryMod) cartDetailQuery {
	mods = append(mods, qm.From("\"cart_detail\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"cart_detail\".*"})
	}

	return cartDetailQuery{q}
}

// FindCartDetail retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCartDetail(ctx context.Context, exec boil.ContextExecutor, cartID int, selectCols ...string) (*CartDetail, error) {
	cartDetailObj := &CartDetail{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"cart_detail\" where \"cartID\"=$1", sel,
	)

	q := queries.Raw(query, cartID)

	err := q.Bind(ctx, exec, cartDetailObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from cart_detail")
	}

	if err = cartDetailObj.doAfterSelectHooks(ctx, exec); err != nil {
		return cartDetailObj, err
	}

	return cartDetailObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *CartDetail) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no cart_detail provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(cartDetailColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	cartDetailInsertCacheMut.RLock()
	cache, cached := cartDetailInsertCache[key]
	cartDetailInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			cartDetailAllColumns,
			cartDetailColumnsWithDefault,
			cartDetailColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, cartDetailGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(cartDetailType, cartDetailMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(cartDetailType, cartDetailMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"cart_detail\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"cart_detail\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into cart_detail")
	}

	if !cached {
		cartDetailInsertCacheMut.Lock()
		cartDetailInsertCache[key] = cache
		cartDetailInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the CartDetail.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *CartDetail) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	cartDetailUpdateCacheMut.RLock()
	cache, cached := cartDetailUpdateCache[key]
	cartDetailUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			cartDetailAllColumns,
			cartDetailPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, cartDetailGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update cart_detail, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"cart_detail\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, cartDetailPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(cartDetailType, cartDetailMapping, append(wl, cartDetailPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update cart_detail row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for cart_detail")
	}

	if !cached {
		cartDetailUpdateCacheMut.Lock()
		cartDetailUpdateCache[key] = cache
		cartDetailUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q cartDetailQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for cart_detail")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for cart_detail")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CartDetailSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cartDetailPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"cart_detail\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, cartDetailPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in cartDetail slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all cartDetail")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *CartDetail) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no cart_detail provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(cartDetailColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	cartDetailUpsertCacheMut.RLock()
	cache, cached := cartDetailUpsertCache[key]
	cartDetailUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			cartDetailAllColumns,
			cartDetailColumnsWithDefault,
			cartDetailColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			cartDetailAllColumns,
			cartDetailPrimaryKeyColumns,
		)

		insert = strmangle.SetComplement(insert, cartDetailGeneratedColumns)
		update = strmangle.SetComplement(update, cartDetailGeneratedColumns)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert cart_detail, could not build update column list")
		}

		ret := strmangle.SetComplement(cartDetailAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(cartDetailPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert cart_detail, could not build conflict column list")
			}

			conflict = make([]string, len(cartDetailPrimaryKeyColumns))
			copy(conflict, cartDetailPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"cart_detail\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(cartDetailType, cartDetailMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(cartDetailType, cartDetailMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert cart_detail")
	}

	if !cached {
		cartDetailUpsertCacheMut.Lock()
		cartDetailUpsertCache[key] = cache
		cartDetailUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single CartDetail record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CartDetail) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no CartDetail provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cartDetailPrimaryKeyMapping)
	sql := "DELETE FROM \"cart_detail\" WHERE \"cartID\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from cart_detail")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for cart_detail")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q cartDetailQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no cartDetailQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from cart_detail")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for cart_detail")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CartDetailSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(cartDetailBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cartDetailPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"cart_detail\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, cartDetailPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from cartDetail slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for cart_detail")
	}

	if len(cartDetailAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CartDetail) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCartDetail(ctx, exec, o.CartID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CartDetailSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CartDetailSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cartDetailPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"cart_detail\".* FROM \"cart_detail\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, cartDetailPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in CartDetailSlice")
	}

	*o = slice

	return nil
}

// CartDetailExists checks if the CartDetail row exists.
func CartDetailExists(ctx context.Context, exec boil.ContextExecutor, cartID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"cart_detail\" where \"cartID\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, cartID)
	}
	row := exec.QueryRowContext(ctx, sql, cartID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if cart_detail exists")
	}

	return exists, nil
}

// Exists checks if the CartDetail row exists.
func (o *CartDetail) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return CartDetailExists(ctx, exec, o.CartID)
}
