// Code generated by SQLBoiler 4.18.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// District is an object representing the database table.
type District struct {
	DistrictID   int    `boil:"districtID" json:"districtID" toml:"districtID" yaml:"districtID"`
	DistrictCode int    `boil:"districtCode" json:"districtCode" toml:"districtCode" yaml:"districtCode"`
	DistrictName string `boil:"districtName" json:"districtName" toml:"districtName" yaml:"districtName"`
	ProvinceID   int    `boil:"provinceID" json:"provinceID" toml:"provinceID" yaml:"provinceID"`

	R *districtR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L districtL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DistrictColumns = struct {
	DistrictID   string
	DistrictCode string
	DistrictName string
	ProvinceID   string
}{
	DistrictID:   "districtID",
	DistrictCode: "districtCode",
	DistrictName: "districtName",
	ProvinceID:   "provinceID",
}

var DistrictTableColumns = struct {
	DistrictID   string
	DistrictCode string
	DistrictName string
	ProvinceID   string
}{
	DistrictID:   "district.districtID",
	DistrictCode: "district.districtCode",
	DistrictName: "district.districtName",
	ProvinceID:   "district.provinceID",
}

// Generated where

var DistrictWhere = struct {
	DistrictID   whereHelperint
	DistrictCode whereHelperint
	DistrictName whereHelperstring
	ProvinceID   whereHelperint
}{
	DistrictID:   whereHelperint{field: "\"district\".\"districtID\""},
	DistrictCode: whereHelperint{field: "\"district\".\"districtCode\""},
	DistrictName: whereHelperstring{field: "\"district\".\"districtName\""},
	ProvinceID:   whereHelperint{field: "\"district\".\"provinceID\""},
}

// DistrictRels is where relationship names are stored.
var DistrictRels = struct {
	ProvinceIDProvince string
	DistrictIDWards    string
}{
	ProvinceIDProvince: "ProvinceIDProvince",
	DistrictIDWards:    "DistrictIDWards",
}

// districtR is where relationships are stored.
type districtR struct {
	ProvinceIDProvince *Province `boil:"ProvinceIDProvince" json:"ProvinceIDProvince" toml:"ProvinceIDProvince" yaml:"ProvinceIDProvince"`
	DistrictIDWards    WardSlice `boil:"DistrictIDWards" json:"DistrictIDWards" toml:"DistrictIDWards" yaml:"DistrictIDWards"`
}

// NewStruct creates a new relationship struct
func (*districtR) NewStruct() *districtR {
	return &districtR{}
}

func (r *districtR) GetProvinceIDProvince() *Province {
	if r == nil {
		return nil
	}
	return r.ProvinceIDProvince
}

func (r *districtR) GetDistrictIDWards() WardSlice {
	if r == nil {
		return nil
	}
	return r.DistrictIDWards
}

// districtL is where Load methods for each relationship are stored.
type districtL struct{}

var (
	districtAllColumns            = []string{"districtID", "districtCode", "districtName", "provinceID"}
	districtColumnsWithoutDefault = []string{"districtCode", "districtName", "provinceID"}
	districtColumnsWithDefault    = []string{"districtID"}
	districtPrimaryKeyColumns     = []string{"districtID"}
	districtGeneratedColumns      = []string{"districtID"}
)

type (
	// DistrictSlice is an alias for a slice of pointers to District.
	// This should almost always be used instead of []District.
	DistrictSlice []*District
	// DistrictHook is the signature for custom District hook methods
	DistrictHook func(context.Context, boil.ContextExecutor, *District) error

	districtQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	districtType                 = reflect.TypeOf(&District{})
	districtMapping              = queries.MakeStructMapping(districtType)
	districtPrimaryKeyMapping, _ = queries.BindMapping(districtType, districtMapping, districtPrimaryKeyColumns)
	districtInsertCacheMut       sync.RWMutex
	districtInsertCache          = make(map[string]insertCache)
	districtUpdateCacheMut       sync.RWMutex
	districtUpdateCache          = make(map[string]updateCache)
	districtUpsertCacheMut       sync.RWMutex
	districtUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var districtAfterSelectMu sync.Mutex
var districtAfterSelectHooks []DistrictHook

var districtBeforeInsertMu sync.Mutex
var districtBeforeInsertHooks []DistrictHook
var districtAfterInsertMu sync.Mutex
var districtAfterInsertHooks []DistrictHook

var districtBeforeUpdateMu sync.Mutex
var districtBeforeUpdateHooks []DistrictHook
var districtAfterUpdateMu sync.Mutex
var districtAfterUpdateHooks []DistrictHook

var districtBeforeDeleteMu sync.Mutex
var districtBeforeDeleteHooks []DistrictHook
var districtAfterDeleteMu sync.Mutex
var districtAfterDeleteHooks []DistrictHook

var districtBeforeUpsertMu sync.Mutex
var districtBeforeUpsertHooks []DistrictHook
var districtAfterUpsertMu sync.Mutex
var districtAfterUpsertHooks []DistrictHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *District) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range districtAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *District) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range districtBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *District) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range districtAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *District) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range districtBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *District) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range districtAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *District) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range districtBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *District) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range districtAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *District) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range districtBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *District) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range districtAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDistrictHook registers your hook function for all future operations.
func AddDistrictHook(hookPoint boil.HookPoint, districtHook DistrictHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		districtAfterSelectMu.Lock()
		districtAfterSelectHooks = append(districtAfterSelectHooks, districtHook)
		districtAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		districtBeforeInsertMu.Lock()
		districtBeforeInsertHooks = append(districtBeforeInsertHooks, districtHook)
		districtBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		districtAfterInsertMu.Lock()
		districtAfterInsertHooks = append(districtAfterInsertHooks, districtHook)
		districtAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		districtBeforeUpdateMu.Lock()
		districtBeforeUpdateHooks = append(districtBeforeUpdateHooks, districtHook)
		districtBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		districtAfterUpdateMu.Lock()
		districtAfterUpdateHooks = append(districtAfterUpdateHooks, districtHook)
		districtAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		districtBeforeDeleteMu.Lock()
		districtBeforeDeleteHooks = append(districtBeforeDeleteHooks, districtHook)
		districtBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		districtAfterDeleteMu.Lock()
		districtAfterDeleteHooks = append(districtAfterDeleteHooks, districtHook)
		districtAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		districtBeforeUpsertMu.Lock()
		districtBeforeUpsertHooks = append(districtBeforeUpsertHooks, districtHook)
		districtBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		districtAfterUpsertMu.Lock()
		districtAfterUpsertHooks = append(districtAfterUpsertHooks, districtHook)
		districtAfterUpsertMu.Unlock()
	}
}

// One returns a single district record from the query.
func (q districtQuery) One(ctx context.Context, exec boil.ContextExecutor) (*District, error) {
	o := &District{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for district")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all District records from the query.
func (q districtQuery) All(ctx context.Context, exec boil.ContextExecutor) (DistrictSlice, error) {
	var o []*District

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to District slice")
	}

	if len(districtAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all District records in the query.
func (q districtQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count district rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q districtQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if district exists")
	}

	return count > 0, nil
}

// ProvinceIDProvince pointed to by the foreign key.
func (o *District) ProvinceIDProvince(mods ...qm.QueryMod) provinceQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"provinceID\" = ?", o.ProvinceID),
	}

	queryMods = append(queryMods, mods...)

	return Provinces(queryMods...)
}

// DistrictIDWards retrieves all the ward's Wards with an executor via districtID column.
func (o *District) DistrictIDWards(mods ...qm.QueryMod) wardQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"ward\".\"districtID\"=?", o.DistrictID),
	)

	return Wards(queryMods...)
}

// LoadProvinceIDProvince allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (districtL) LoadProvinceIDProvince(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDistrict interface{}, mods queries.Applicator) error {
	var slice []*District
	var object *District

	if singular {
		var ok bool
		object, ok = maybeDistrict.(*District)
		if !ok {
			object = new(District)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDistrict)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDistrict))
			}
		}
	} else {
		s, ok := maybeDistrict.(*[]*District)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDistrict)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDistrict))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &districtR{}
		}
		args[object.ProvinceID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &districtR{}
			}

			args[obj.ProvinceID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`province`),
		qm.WhereIn(`province.provinceID in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Province")
	}

	var resultSlice []*Province
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Province")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for province")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for province")
	}

	if len(provinceAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ProvinceIDProvince = foreign
		if foreign.R == nil {
			foreign.R = &provinceR{}
		}
		foreign.R.ProvinceIDDistricts = append(foreign.R.ProvinceIDDistricts, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ProvinceID == foreign.ProvinceID {
				local.R.ProvinceIDProvince = foreign
				if foreign.R == nil {
					foreign.R = &provinceR{}
				}
				foreign.R.ProvinceIDDistricts = append(foreign.R.ProvinceIDDistricts, local)
				break
			}
		}
	}

	return nil
}

// LoadDistrictIDWards allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (districtL) LoadDistrictIDWards(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDistrict interface{}, mods queries.Applicator) error {
	var slice []*District
	var object *District

	if singular {
		var ok bool
		object, ok = maybeDistrict.(*District)
		if !ok {
			object = new(District)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDistrict)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDistrict))
			}
		}
	} else {
		s, ok := maybeDistrict.(*[]*District)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDistrict)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDistrict))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &districtR{}
		}
		args[object.DistrictID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &districtR{}
			}
			args[obj.DistrictID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`ward`),
		qm.WhereIn(`ward.districtID in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ward")
	}

	var resultSlice []*Ward
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ward")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on ward")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for ward")
	}

	if len(wardAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.DistrictIDWards = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &wardR{}
			}
			foreign.R.DistrictIDDistrict = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.DistrictID == foreign.DistrictID {
				local.R.DistrictIDWards = append(local.R.DistrictIDWards, foreign)
				if foreign.R == nil {
					foreign.R = &wardR{}
				}
				foreign.R.DistrictIDDistrict = local
				break
			}
		}
	}

	return nil
}

// SetProvinceIDProvince of the district to the related item.
// Sets o.R.ProvinceIDProvince to related.
// Adds o to related.R.ProvinceIDDistricts.
func (o *District) SetProvinceIDProvince(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Province) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"district\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"provinceID"}),
		strmangle.WhereClause("\"", "\"", 2, districtPrimaryKeyColumns),
	)
	values := []interface{}{related.ProvinceID, o.DistrictID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ProvinceID = related.ProvinceID
	if o.R == nil {
		o.R = &districtR{
			ProvinceIDProvince: related,
		}
	} else {
		o.R.ProvinceIDProvince = related
	}

	if related.R == nil {
		related.R = &provinceR{
			ProvinceIDDistricts: DistrictSlice{o},
		}
	} else {
		related.R.ProvinceIDDistricts = append(related.R.ProvinceIDDistricts, o)
	}

	return nil
}

// AddDistrictIDWards adds the given related objects to the existing relationships
// of the district, optionally inserting them as new records.
// Appends related to o.R.DistrictIDWards.
// Sets related.R.DistrictIDDistrict appropriately.
func (o *District) AddDistrictIDWards(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Ward) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.DistrictID = o.DistrictID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"ward\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"districtID"}),
				strmangle.WhereClause("\"", "\"", 2, wardPrimaryKeyColumns),
			)
			values := []interface{}{o.DistrictID, rel.WardID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.DistrictID = o.DistrictID
		}
	}

	if o.R == nil {
		o.R = &districtR{
			DistrictIDWards: related,
		}
	} else {
		o.R.DistrictIDWards = append(o.R.DistrictIDWards, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &wardR{
				DistrictIDDistrict: o,
			}
		} else {
			rel.R.DistrictIDDistrict = o
		}
	}
	return nil
}

// Districts retrieves all the records using an executor.
func Districts(mods ...qm.QueryMod) districtQuery {
	mods = append(mods, qm.From("\"district\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"district\".*"})
	}

	return districtQuery{q}
}

// FindDistrict retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDistrict(ctx context.Context, exec boil.ContextExecutor, districtID int, selectCols ...string) (*District, error) {
	districtObj := &District{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"district\" where \"districtID\"=$1", sel,
	)

	q := queries.Raw(query, districtID)

	err := q.Bind(ctx, exec, districtObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from district")
	}

	if err = districtObj.doAfterSelectHooks(ctx, exec); err != nil {
		return districtObj, err
	}

	return districtObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *District) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no district provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(districtColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	districtInsertCacheMut.RLock()
	cache, cached := districtInsertCache[key]
	districtInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			districtAllColumns,
			districtColumnsWithDefault,
			districtColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, districtGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(districtType, districtMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(districtType, districtMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"district\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"district\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into district")
	}

	if !cached {
		districtInsertCacheMut.Lock()
		districtInsertCache[key] = cache
		districtInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the District.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *District) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	districtUpdateCacheMut.RLock()
	cache, cached := districtUpdateCache[key]
	districtUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			districtAllColumns,
			districtPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, districtGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update district, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"district\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, districtPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(districtType, districtMapping, append(wl, districtPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update district row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for district")
	}

	if !cached {
		districtUpdateCacheMut.Lock()
		districtUpdateCache[key] = cache
		districtUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q districtQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for district")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for district")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DistrictSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), districtPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"district\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, districtPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in district slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all district")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *District) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no district provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(districtColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	districtUpsertCacheMut.RLock()
	cache, cached := districtUpsertCache[key]
	districtUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			districtAllColumns,
			districtColumnsWithDefault,
			districtColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			districtAllColumns,
			districtPrimaryKeyColumns,
		)

		insert = strmangle.SetComplement(insert, districtGeneratedColumns)
		update = strmangle.SetComplement(update, districtGeneratedColumns)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert district, could not build update column list")
		}

		ret := strmangle.SetComplement(districtAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(districtPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert district, could not build conflict column list")
			}

			conflict = make([]string, len(districtPrimaryKeyColumns))
			copy(conflict, districtPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"district\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(districtType, districtMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(districtType, districtMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert district")
	}

	if !cached {
		districtUpsertCacheMut.Lock()
		districtUpsertCache[key] = cache
		districtUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single District record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *District) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no District provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), districtPrimaryKeyMapping)
	sql := "DELETE FROM \"district\" WHERE \"districtID\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from district")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for district")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q districtQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no districtQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from district")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for district")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DistrictSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(districtBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), districtPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"district\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, districtPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from district slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for district")
	}

	if len(districtAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *District) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDistrict(ctx, exec, o.DistrictID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DistrictSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DistrictSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), districtPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"district\".* FROM \"district\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, districtPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DistrictSlice")
	}

	*o = slice

	return nil
}

// DistrictExists checks if the District row exists.
func DistrictExists(ctx context.Context, exec boil.ContextExecutor, districtID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"district\" where \"districtID\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, districtID)
	}
	row := exec.QueryRowContext(ctx, sql, districtID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if district exists")
	}

	return exists, nil
}

// Exists checks if the District row exists.
func (o *District) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DistrictExists(ctx, exec, o.DistrictID)
}
