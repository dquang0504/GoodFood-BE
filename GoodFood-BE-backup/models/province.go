// Code generated by SQLBoiler 4.18.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Province is an object representing the database table.
type Province struct {
	ProvinceID   int    `boil:"provinceID" json:"provinceID" toml:"provinceID" yaml:"provinceID"`
	ProvinceCode int    `boil:"provinceCode" json:"provinceCode" toml:"provinceCode" yaml:"provinceCode"`
	ProvinceName string `boil:"provinceName" json:"provinceName" toml:"provinceName" yaml:"provinceName"`

	R *provinceR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L provinceL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ProvinceColumns = struct {
	ProvinceID   string
	ProvinceCode string
	ProvinceName string
}{
	ProvinceID:   "provinceID",
	ProvinceCode: "provinceCode",
	ProvinceName: "provinceName",
}

var ProvinceTableColumns = struct {
	ProvinceID   string
	ProvinceCode string
	ProvinceName string
}{
	ProvinceID:   "province.provinceID",
	ProvinceCode: "province.provinceCode",
	ProvinceName: "province.provinceName",
}

// Generated where

var ProvinceWhere = struct {
	ProvinceID   whereHelperint
	ProvinceCode whereHelperint
	ProvinceName whereHelperstring
}{
	ProvinceID:   whereHelperint{field: "\"province\".\"provinceID\""},
	ProvinceCode: whereHelperint{field: "\"province\".\"provinceCode\""},
	ProvinceName: whereHelperstring{field: "\"province\".\"provinceName\""},
}

// ProvinceRels is where relationship names are stored.
var ProvinceRels = struct {
	ProvinceIDDistricts string
}{
	ProvinceIDDistricts: "ProvinceIDDistricts",
}

// provinceR is where relationships are stored.
type provinceR struct {
	ProvinceIDDistricts DistrictSlice `boil:"ProvinceIDDistricts" json:"ProvinceIDDistricts" toml:"ProvinceIDDistricts" yaml:"ProvinceIDDistricts"`
}

// NewStruct creates a new relationship struct
func (*provinceR) NewStruct() *provinceR {
	return &provinceR{}
}

func (r *provinceR) GetProvinceIDDistricts() DistrictSlice {
	if r == nil {
		return nil
	}
	return r.ProvinceIDDistricts
}

// provinceL is where Load methods for each relationship are stored.
type provinceL struct{}

var (
	provinceAllColumns            = []string{"provinceID", "provinceCode", "provinceName"}
	provinceColumnsWithoutDefault = []string{"provinceCode", "provinceName"}
	provinceColumnsWithDefault    = []string{"provinceID"}
	provincePrimaryKeyColumns     = []string{"provinceID"}
	provinceGeneratedColumns      = []string{"provinceID"}
)

type (
	// ProvinceSlice is an alias for a slice of pointers to Province.
	// This should almost always be used instead of []Province.
	ProvinceSlice []*Province
	// ProvinceHook is the signature for custom Province hook methods
	ProvinceHook func(context.Context, boil.ContextExecutor, *Province) error

	provinceQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	provinceType                 = reflect.TypeOf(&Province{})
	provinceMapping              = queries.MakeStructMapping(provinceType)
	provincePrimaryKeyMapping, _ = queries.BindMapping(provinceType, provinceMapping, provincePrimaryKeyColumns)
	provinceInsertCacheMut       sync.RWMutex
	provinceInsertCache          = make(map[string]insertCache)
	provinceUpdateCacheMut       sync.RWMutex
	provinceUpdateCache          = make(map[string]updateCache)
	provinceUpsertCacheMut       sync.RWMutex
	provinceUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var provinceAfterSelectMu sync.Mutex
var provinceAfterSelectHooks []ProvinceHook

var provinceBeforeInsertMu sync.Mutex
var provinceBeforeInsertHooks []ProvinceHook
var provinceAfterInsertMu sync.Mutex
var provinceAfterInsertHooks []ProvinceHook

var provinceBeforeUpdateMu sync.Mutex
var provinceBeforeUpdateHooks []ProvinceHook
var provinceAfterUpdateMu sync.Mutex
var provinceAfterUpdateHooks []ProvinceHook

var provinceBeforeDeleteMu sync.Mutex
var provinceBeforeDeleteHooks []ProvinceHook
var provinceAfterDeleteMu sync.Mutex
var provinceAfterDeleteHooks []ProvinceHook

var provinceBeforeUpsertMu sync.Mutex
var provinceBeforeUpsertHooks []ProvinceHook
var provinceAfterUpsertMu sync.Mutex
var provinceAfterUpsertHooks []ProvinceHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Province) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range provinceAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Province) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range provinceBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Province) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range provinceAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Province) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range provinceBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Province) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range provinceAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Province) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range provinceBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Province) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range provinceAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Province) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range provinceBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Province) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range provinceAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddProvinceHook registers your hook function for all future operations.
func AddProvinceHook(hookPoint boil.HookPoint, provinceHook ProvinceHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		provinceAfterSelectMu.Lock()
		provinceAfterSelectHooks = append(provinceAfterSelectHooks, provinceHook)
		provinceAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		provinceBeforeInsertMu.Lock()
		provinceBeforeInsertHooks = append(provinceBeforeInsertHooks, provinceHook)
		provinceBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		provinceAfterInsertMu.Lock()
		provinceAfterInsertHooks = append(provinceAfterInsertHooks, provinceHook)
		provinceAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		provinceBeforeUpdateMu.Lock()
		provinceBeforeUpdateHooks = append(provinceBeforeUpdateHooks, provinceHook)
		provinceBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		provinceAfterUpdateMu.Lock()
		provinceAfterUpdateHooks = append(provinceAfterUpdateHooks, provinceHook)
		provinceAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		provinceBeforeDeleteMu.Lock()
		provinceBeforeDeleteHooks = append(provinceBeforeDeleteHooks, provinceHook)
		provinceBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		provinceAfterDeleteMu.Lock()
		provinceAfterDeleteHooks = append(provinceAfterDeleteHooks, provinceHook)
		provinceAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		provinceBeforeUpsertMu.Lock()
		provinceBeforeUpsertHooks = append(provinceBeforeUpsertHooks, provinceHook)
		provinceBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		provinceAfterUpsertMu.Lock()
		provinceAfterUpsertHooks = append(provinceAfterUpsertHooks, provinceHook)
		provinceAfterUpsertMu.Unlock()
	}
}

// One returns a single province record from the query.
func (q provinceQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Province, error) {
	o := &Province{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for province")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Province records from the query.
func (q provinceQuery) All(ctx context.Context, exec boil.ContextExecutor) (ProvinceSlice, error) {
	var o []*Province

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Province slice")
	}

	if len(provinceAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Province records in the query.
func (q provinceQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count province rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q provinceQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if province exists")
	}

	return count > 0, nil
}

// ProvinceIDDistricts retrieves all the district's Districts with an executor via provinceID column.
func (o *Province) ProvinceIDDistricts(mods ...qm.QueryMod) districtQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"district\".\"provinceID\"=?", o.ProvinceID),
	)

	return Districts(queryMods...)
}

// LoadProvinceIDDistricts allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (provinceL) LoadProvinceIDDistricts(ctx context.Context, e boil.ContextExecutor, singular bool, maybeProvince interface{}, mods queries.Applicator) error {
	var slice []*Province
	var object *Province

	if singular {
		var ok bool
		object, ok = maybeProvince.(*Province)
		if !ok {
			object = new(Province)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeProvince)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeProvince))
			}
		}
	} else {
		s, ok := maybeProvince.(*[]*Province)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeProvince)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeProvince))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &provinceR{}
		}
		args[object.ProvinceID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &provinceR{}
			}
			args[obj.ProvinceID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`district`),
		qm.WhereIn(`district.provinceID in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load district")
	}

	var resultSlice []*District
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice district")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on district")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for district")
	}

	if len(districtAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ProvinceIDDistricts = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &districtR{}
			}
			foreign.R.ProvinceIDProvince = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ProvinceID == foreign.ProvinceID {
				local.R.ProvinceIDDistricts = append(local.R.ProvinceIDDistricts, foreign)
				if foreign.R == nil {
					foreign.R = &districtR{}
				}
				foreign.R.ProvinceIDProvince = local
				break
			}
		}
	}

	return nil
}

// AddProvinceIDDistricts adds the given related objects to the existing relationships
// of the province, optionally inserting them as new records.
// Appends related to o.R.ProvinceIDDistricts.
// Sets related.R.ProvinceIDProvince appropriately.
func (o *Province) AddProvinceIDDistricts(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*District) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ProvinceID = o.ProvinceID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"district\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"provinceID"}),
				strmangle.WhereClause("\"", "\"", 2, districtPrimaryKeyColumns),
			)
			values := []interface{}{o.ProvinceID, rel.DistrictID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ProvinceID = o.ProvinceID
		}
	}

	if o.R == nil {
		o.R = &provinceR{
			ProvinceIDDistricts: related,
		}
	} else {
		o.R.ProvinceIDDistricts = append(o.R.ProvinceIDDistricts, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &districtR{
				ProvinceIDProvince: o,
			}
		} else {
			rel.R.ProvinceIDProvince = o
		}
	}
	return nil
}

// Provinces retrieves all the records using an executor.
func Provinces(mods ...qm.QueryMod) provinceQuery {
	mods = append(mods, qm.From("\"province\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"province\".*"})
	}

	return provinceQuery{q}
}

// FindProvince retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindProvince(ctx context.Context, exec boil.ContextExecutor, provinceID int, selectCols ...string) (*Province, error) {
	provinceObj := &Province{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"province\" where \"provinceID\"=$1", sel,
	)

	q := queries.Raw(query, provinceID)

	err := q.Bind(ctx, exec, provinceObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from province")
	}

	if err = provinceObj.doAfterSelectHooks(ctx, exec); err != nil {
		return provinceObj, err
	}

	return provinceObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Province) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no province provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(provinceColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	provinceInsertCacheMut.RLock()
	cache, cached := provinceInsertCache[key]
	provinceInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			provinceAllColumns,
			provinceColumnsWithDefault,
			provinceColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, provinceGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(provinceType, provinceMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(provinceType, provinceMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"province\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"province\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into province")
	}

	if !cached {
		provinceInsertCacheMut.Lock()
		provinceInsertCache[key] = cache
		provinceInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Province.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Province) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	provinceUpdateCacheMut.RLock()
	cache, cached := provinceUpdateCache[key]
	provinceUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			provinceAllColumns,
			provincePrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, provinceGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update province, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"province\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, provincePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(provinceType, provinceMapping, append(wl, provincePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update province row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for province")
	}

	if !cached {
		provinceUpdateCacheMut.Lock()
		provinceUpdateCache[key] = cache
		provinceUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q provinceQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for province")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for province")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ProvinceSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), provincePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"province\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, provincePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in province slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all province")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Province) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no province provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(provinceColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	provinceUpsertCacheMut.RLock()
	cache, cached := provinceUpsertCache[key]
	provinceUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			provinceAllColumns,
			provinceColumnsWithDefault,
			provinceColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			provinceAllColumns,
			provincePrimaryKeyColumns,
		)

		insert = strmangle.SetComplement(insert, provinceGeneratedColumns)
		update = strmangle.SetComplement(update, provinceGeneratedColumns)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert province, could not build update column list")
		}

		ret := strmangle.SetComplement(provinceAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(provincePrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert province, could not build conflict column list")
			}

			conflict = make([]string, len(provincePrimaryKeyColumns))
			copy(conflict, provincePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"province\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(provinceType, provinceMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(provinceType, provinceMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert province")
	}

	if !cached {
		provinceUpsertCacheMut.Lock()
		provinceUpsertCache[key] = cache
		provinceUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Province record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Province) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Province provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), provincePrimaryKeyMapping)
	sql := "DELETE FROM \"province\" WHERE \"provinceID\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from province")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for province")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q provinceQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no provinceQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from province")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for province")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ProvinceSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(provinceBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), provincePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"province\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, provincePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from province slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for province")
	}

	if len(provinceAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Province) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindProvince(ctx, exec, o.ProvinceID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ProvinceSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ProvinceSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), provincePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"province\".* FROM \"province\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, provincePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ProvinceSlice")
	}

	*o = slice

	return nil
}

// ProvinceExists checks if the Province row exists.
func ProvinceExists(ctx context.Context, exec boil.ContextExecutor, provinceID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"province\" where \"provinceID\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, provinceID)
	}
	row := exec.QueryRowContext(ctx, sql, provinceID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if province exists")
	}

	return exists, nil
}

// Exists checks if the Province row exists.
func (o *Province) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ProvinceExists(ctx, exec, o.ProvinceID)
}
